<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Quantified Savagery]]></title>
  <link href="http://blog.savageevan.com/atom.xml" rel="self"/>
  <link href="http://blog.savageevan.com/"/>
  <updated>2012-11-05T12:48:40-08:00</updated>
  <id>http://blog.savageevan.com/</id>
  <author>
    <name><![CDATA[Evan Savage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Persistent Location Tracking: Looking For A Few Good Data Points]]></title>
    <link href="http://blog.savageevan.com/blog/2012/11/02/persistent-location-tracking-looking-for-a-few-good-data-points/"/>
    <updated>2012-11-02T16:38:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/11/02/persistent-location-tracking-looking-for-a-few-good-data-points</id>
    <content type="html"><![CDATA[<p>In this post, I revisit the question of whether Google Latitude meets my
persistent location tracking needs. In <a href="http://blog.savageevan.com/blog/2012/10/29/persistent-location-tracking-picking-the-right-tool/">my previous post</a>, I compared
Google Latitude to InstaMapper and concluded that the latter is too
battery-intensive. By looking at maps and base-level insights from the data,
I suggest that Google Latitude optimizes for battery life at the expense of
data quality.</p>

<!-- more -->

<h2 id="exhibit-a-some-maps">Exhibit A: Some Maps</h2>

<p>I started gathering data on Oct. 3, 2012:</p>

<p><img src="https://lh5.googleusercontent.com/-kyl-kUDWe_M/UJgVi3pls3I/AAAAAAAAALg/zGsaBfNzY7s/s640/map-monthly.jpg" /></p>

<p>Since then, <a href="http://www.eecs.berkeley.edu/~valkyrie/">Valkyrie Savage</a> and I have travelled to Boston and Chicago.
Our stopover in Phoenix is clearly visible at this scale. You can barely make
out our day trip to <a href="http://goo.gl/maps/rLfNu">Mount Monadnock, NH</a> over near Boston. Here’s a
closer look at that trip:</p>

<p><img src="https://lh4.googleusercontent.com/-YJQip0zWnxQ/UJgVlFc_7pI/AAAAAAAAAMA/DjlCRjxouzo/s640/map-monadnock-trip.jpg" /></p>

<p>Ouch. The data is <em>noisy in some areas, sparse in others.</em> It’s fairly clear that
we took Hwy 2 over, but <em>some of the GPS readings are miles off.</em> Let’s zoom in
on that hike:</p>

<p><img src="https://lh5.googleusercontent.com/-bg3DxaZTe6k/UJgVlqpW7ZI/AAAAAAAAAMI/t2Kn3hrhWJM/s640/map-monadnock-hike.jpg" /></p>

<p>Only five data points actually lie within the park/mountain boundaries. That’s
<em>five data points for a four-hour hike.</em> Our Boston data is somewhat more
accurate:</p>

<p><img src="https://lh3.googleusercontent.com/-6RFwbwjBEtI/UJgVmQk1KCI/AAAAAAAAAMQ/-Nhyp0LtoLw/s640/map-monadnock-boston.jpg" /></p>

<p>Still, the red line cuts through city blocks with reckless abandon. Either 
we’re flying, or we’re packing some incredibly efficient demolition equipment.</p>

<p>Here’s the map for one of my more itinerant Bay Area days:</p>

<p><img src="https://lh5.googleusercontent.com/-xNNR5dnNV44/UJgVj3SZAEI/AAAAAAAAALw/6KvtDZYWel0/s640/map-busy-day.jpg" /></p>

<p>I cycled to a doctor’s appointment, visited
<a href="http://bid.berkeley.edu/">BiD</a> to hear <a href="http://research.microsoft.com/en-us/people/marycz/">Mary Czerwinski</a> speak about emotion tracking, worked
from <a href="http://goo.gl/maps/z7EuA">home</a> for a bit, went into San Francisco to meet up with
<a href="http://www.linkedin.com/in/levpopov">Lev Popov</a>, and finally dragged myself home again.</p>

<p>The BART ride into San Francisco is understandably sparse: most of it is
separated from cell towers and GPS satellites by rock and/or water.</p>

<p>Most of my travel is on foot, by bike, or via public transit. Not content
with the Mount Monadnock hike data, I tried another quick drive up into
<a href="http://goo.gl/maps/zk3AD">Tilden</a>:</p>

<p><img src="https://lh5.googleusercontent.com/-MCZ55KYjgcE/UJgVjNWQ0FI/AAAAAAAAALo/pibM6xiJmUE/s640/map-drive-test.jpg" /></p>

<p>Google Latitude captured <em>just four points during the 20-minute drive.</em></p>

<h2 id="exhibit-b-some-analysis">Exhibit B: Some Analysis</h2>

<p>You can see the code for this analysis
<a href="https://github.com/candu/quantified-savagery-files/tree/master/Location/kml">here</a>
and <a href="https://github.com/candu/quantified-savagery-files/tree/master/Location/api">here</a>.</p>

<p>After trudging through several lackluster map views, I’m left with a
nagging impression:</p>

<blockquote><p>This data isn&#8217;t that useful.</p></blockquote>

<p>This impression deserves further analysis, so I grab the KML to answer some
of my questions. First off: <em>how often is Google Latitude checking my location?</em></p>

<p><img src="https://lh5.googleusercontent.com/-A7we5G7pYIw/UJb-xhCk_oI/AAAAAAAAAKk/O7ZwpxF_uQs/s640/timings-frequency.jpg" /></p>

<p><em>About every two minutes.</em> GPS is a <a href="http://blog.savageevan.com/blog/2012/10/29/persistent-location-tracking-picking-the-right-tool/">huge battery drain</a>;
increasing the time between updates can help by allowing the GPS radio to
enter an idle state. <em>How are those location readings scheduled?</em></p>

<p><img src="https://lh6.googleusercontent.com/-PMYu61X440I/UJb-yCEbuBI/AAAAAAAAAKs/umbJNuuVfo0/s640/timings-second-histogram.jpg" /></p>

<p>Google Latitude really likes spacing its readings out by a <em>whole number of
minutes.</em></p>

<p><em>How accurate is the data?</em> The KML doesn’t provide <a href="http://en.wikipedia.org/wiki/Dilution_of_precision_(GPS)">accuracy estimates</a>
for its locations. Fortunately, the <a href="https://developers.google.com/latitude/">Google Latitude API</a> does, so
I retrieve my data using <a href="https://github.com/candu/quantified-savagery-files/blob/master/Location/api/scrape.py">this script</a> and look at the accuracy readings:</p>

<p><img src="https://lh3.googleusercontent.com/-p5senVUtgqM/UJb-ybk3zEI/AAAAAAAAAK0/qUvLSvog15E/s640/accuracy-histogram.jpg" /></p>

<p>Actually, <em>the readings have fairly high accuracy.</em> Only 7% of readings have a
reported error radius greater than 100m.</p>

<p>The maps above suggest that location readings are less accurate while
travelling at high speed. Is that true? The API provides speed estimates
for some readings, but this data is kind of sparse:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ python speed.py &lt; history.api 
</span><span class="line">found 7429 speed values among 20898 readings</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I try a different method: the <a href="http://mathforum.org/library/drmath/view/51879.html">Haversine distance formula</a>, which
gives me the distance between two points on the Earth’s surface:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="k">def</span> <span class="nf">haversineDistance</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">):</span>
</span><span class="line">  <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">  Distance (in meters) between two Locations. Uses the Haversine formula.</span>
</span><span class="line">
</span><span class="line"><span class="sd">  See http://www.movable-type.co.uk/scripts/latlong.html for corresponding</span>
</span><span class="line"><span class="sd">  JavaScript implementation.</span>
</span><span class="line"><span class="sd">  &quot;&quot;&quot;</span>
</span><span class="line">  <span class="c"># Earth&#39;s radius in meters</span>
</span><span class="line">  <span class="n">R</span> <span class="o">=</span> <span class="mi">6371009</span>
</span><span class="line">  <span class="n">dLat</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="n">B</span><span class="o">.</span><span class="n">lat</span> <span class="o">-</span> <span class="n">A</span><span class="o">.</span><span class="n">lat</span><span class="p">)</span>
</span><span class="line">  <span class="n">dLon</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="n">B</span><span class="o">.</span><span class="n">lng</span> <span class="o">-</span> <span class="n">A</span><span class="o">.</span><span class="n">lng</span><span class="p">)</span>
</span><span class="line">  <span class="n">lat1</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="n">A</span><span class="o">.</span><span class="n">lat</span><span class="p">)</span>
</span><span class="line">  <span class="n">lat2</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="n">B</span><span class="o">.</span><span class="n">lat</span><span class="p">)</span>
</span><span class="line">  <span class="n">sLat</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">dLat</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">)</span>
</span><span class="line">  <span class="n">sLon</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">dLon</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">)</span>
</span><span class="line">  <span class="n">a</span> <span class="o">=</span> <span class="n">sLat</span> <span class="o">*</span> <span class="n">sLat</span> <span class="o">+</span> <span class="n">sLon</span> <span class="o">*</span> <span class="n">sLon</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">lat1</span><span class="p">)</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">lat2</span><span class="p">)</span>
</span><span class="line">  <span class="n">c</span> <span class="o">=</span> <span class="mf">2.0</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">atan2</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">a</span><span class="p">))</span>
</span><span class="line">  <span class="k">return</span> <span class="n">R</span> <span class="o">*</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I use this distance formula to get a plot of accuracy versus travelling speed:</p>

<p><img src="https://lh5.googleusercontent.com/-ba4lES16aCU/UJb-ytwI4OI/AAAAAAAAAK8/-OZvTHzgZjk/s144/accuracy-vs-speed.jpg" /></p>

<p><em>No clear correlation here</em>; there are low-quality readings at both low and high
speeds. There are several possible explanations:</p>

<ul>
  <li><strong>Confirmation bias:</strong> I mistakenly extrapolated a small handful of
low-quality readings taken at high speeds to a general pattern.</li>
  <li><strong>Misinterpretation:</strong> Some of the Mount Monadnock readings look way off;
perhaps the error radius doesn’t mean what I think it does.</li>
  <li><strong>Different location sources:</strong> Location accuracy is
<a href="http://en.wikipedia.org/wiki/Dilution_of_precision_(GPS)">relatively well-defined</a> for GPS, but I’m not sure what happens when
cell towers or WiFi access points are incorporated into location fixes.</li>
  <li><strong>Longer sampling interval:</strong> Maybe Google Latitude assumes that precise
location tracking is less important when driving.</li>
</ul>

<p>To test this last hypothesis, I also <em>plot sampling interval versus speed:</em></p>

<p><img src="https://lh5.googleusercontent.com/-__3m3z_oQfQ/UJcC4GeNhyI/AAAAAAAAALQ/HI6XQdHjtns/s640/timings-vs-speed.jpg" /></p>

<p>Nothing conclusive there.</p>

<h2 id="conclusion">Conclusion</h2>

<p><em>The problem appears to be sampling frequency.</em> To reduce battery usage, <em>Google
Latitude polls about once every two minutes.</em> While it has some mechanism for
polling more often in periods of high activity, it’s unclear how that works.</p>

<p>Reliance on fixes from cell towers and WiFi may be reducing location quality
in more remote areas. Testing this hypothesis is difficult: how do you
quantify remote? One possibility is to compute nearest-neighbor distance
against <a href="http://www.maxmind.com/en/worldcities">a database of cities</a>. Another confounding factor is the
reliability of those <code>accuracy</code> values. Improving upon that would likely
involve manual labelling.</p>

<h2 id="why-do-this">Why Do This?</h2>

<blockquote><p>Accuracy is not binary.</p></blockquote>

<p>In Quantified Self applications, we <em>use personal data to drive changes in our
lives.</em> We put a lot of trust in the accuracy and relevance of that data, and
<em>we extend that trust to the tools and services that collect it.</em>
We trust <a href="http://www.fitbit.com/">Fitbit</a> to track our fitness.
We trust <a href="http://www.myzeo.com/sleep/">Zeo</a> to improve our sleep.
We trust <a href="http://www.lumosity.com/">Lumosity</a> to train our perception and attentiveness.</p>

<p>In giving so much trust to these tools, we sometimes forget that <em>data are not
infallible.</em>
<a href="http://www.pbs.org/wgbh/aso/databank/entries/dp27un.html">Physics guarantees</a> that there is no such thing as perfect data. <em>All
data contain error.</em> As a system consisting of geosynchronous satellites that
travel at relativistically significant speeds and beam data
through our multilayered atmosphere to tiny chip radios sandwiched between
layers of dense circuitry, GPS is understandably <a href="http://www.kowoma.de/en/gps/errors.htm">error-prone.</a>
When your chosen tools and services add noise on top of that, it’s reasonable
to ask:</p>

<blockquote><p>How much trust should I place in the output?</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persistent Location Tracking: Picking The Right Tool]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/29/persistent-location-tracking-picking-the-right-tool/"/>
    <updated>2012-10-29T18:37:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/29/persistent-location-tracking-picking-the-right-tool</id>
    <content type="html"><![CDATA[<p>In this post, I compare Google Latitude and InstaMapper, two popular services
for persistent location tracking. I walk through installation and data
extraction via API for each service, then provide some subjective first
impressions as to which one better suits my location-tracking needs.</p>

<!-- more -->

<h2 id="evaluating-tools">Evaluating Tools</h2>

<p>As the ecosystem of self-tracking tools <a href="http://quantifiedself.com/2011/03/the-state-of-quantified-self-a-year-of-growth/">grows exponentially</a>,
choosing the right tool is becoming an increasingly daunting task.
To add to the complexity of this decision, self-tracking tools are
<em>highly personal.</em></p>

<blockquote><p>How do I pick the best tool for me?</p></blockquote>

<p>This question is far from monolithic:</p>

<ul>
  <li>Do I want <strong>manual</strong> or <strong>automatic</strong> tracking?
    <ul>
      <li>How much <em>time and effort</em> am I willing to spend on self-tracking?</li>
      <li>Is a hybrid <em>automatic plus manual annotation</em> approach workable?</li>
    </ul>
  </li>
  <li>Do I want <strong>persistent</strong> tracking?
    <ul>
      <li><em>All day?</em> Or only at predetermined times?</li>
      <li><em>Every day?</em> What if I’m on vacation?</li>
    </ul>
  </li>
  <li>Do I want <strong>raw data access?</strong>
    <ul>
      <li>How do I want to access that data? Through <em>Excel CSV files?</em>
Via a <em>developer-friendly API?</em></li>
      <li>What <em>granularity</em> do I want? Sub-second? Daily?</li>
      <li>What <em>parameters</em> do I want? For location, is <code>(lat, long)</code> enough?
Do I want <em>altitude</em> as well? GPS fix <em>accuracy?</em></li>
    </ul>
  </li>
</ul>

<p>Without a <em>searchable database of self-tracking tools</em>, these questions can be
difficult to answer. The main <a href="http://quantifiedself.com/">Quantified Self website</a> includes a
<a href="http://quantifiedself.com/guide/">Guide to Self-Tracking Tools</a>, but their implementation is subject to
criticism:</p>

<blockquote><p>In a report to RWJF, Project Director Alexandra C. Carmichael noted that the guide was more a catalog of tools than a useful manual for people wanting to choose and use these tools.</p><footer><strong>Robert Wood Johnson Foundation</strong> <cite><a href="http://www.rwjf.org/content/dam/farm/reports/program_results_reports/2012/rwjf400733">www.rwjf.org/content/dam/farm/&hellip;</a></cite></footer></blockquote>

<p>This is a point worth repeating. Simply listing tools is <em>not enough</em>; a
database of tools <em>must answer these basic questions</em> to be useful. A quick
search on the Guide for <a href="http://quantifiedself.com/guide/tag/location">location-related tools</a>
comes up short:</p>

<p><img src="https://lh6.googleusercontent.com/-1r1swg9oBxo/UJA_is6HMSI/AAAAAAAAAIQ/zoiBG4fRAPU/s640/qs-guide-location-apps.jpg" /></p>

<p>Why is <a href="http://moodpanda.com/">MoodPanda</a> listed? I suppose it must location-tag mood entries,
but <em>that isn’t made explicit in the description.</em>
<a href="http://www.momentoapp.com/">Momento</a> makes a bit more sense, but it’s primarily a journalling app.
<a href="https://foursquare.com/">Foursquare</a> is definitely location-based, but anyone unfamiliar with
it <em>must read its description closely</em> to realize that it relies on
manual check-ins.</p>

<p>In lieu of a useful tool database, the only effective option is direct
evaluation. By investigating two popular location tracking tools, I’ll
demonstrate how such an evaluation might be carried out.</p>

<h2 id="the-tools">The Tools</h2>

<h3 id="google-latitude">Google Latitude</h3>

<p>Google Latitude bills itself primarily as a social location sharing service:</p>

<p><img src="https://lh5.googleusercontent.com/-ZGGebfguFEk/UJA_hShHXRI/AAAAAAAAAH4/kziP-01pI_g/s800/banner-glatitude.jpg" /></p>

<p>Social capacities aside, the <a href="https://maps.google.com/locationhistory/b/0">Location History</a>
functionality can be used as a persistent location-tracking tool.</p>

<h3 id="instamapper">InstaMapper</h3>

<p>I first heard of InstaMapper from
<a href="http://vimeo.com/8545134">Ted Power’s talk on geo-tracking</a>. Unlike Google
Latitude, InstaMapper focuses more on personal tracking:</p>

<p><img src="https://lh4.googleusercontent.com/-dOIGJWcJ7uc/UJA_h8QM2FI/AAAAAAAAAIA/0owDXIrD6Ro/s800/banner-instamapper.jpg" /></p>

<h3 id="the-criteria">The Criteria</h3>

<p>My ideal location tracking tool is:</p>

<ul>
  <li><strong>Android-compatible:</strong> It should work with my <a href="www.razr.com/RAZR-M">RAZR M</a> running
<a href="http://www.android.com/about/ice-cream-sandwich/">Android 4.0.4 (Ice Cream Sandwich)</a>.</li>
  <li><strong>Battery-friendly:</strong> It should allow me to go at least a day <em>without
recharging.</em></li>
  <li><strong>Automatic:</strong> It should track my location <em>without requiring check-ins</em>
or other manual input.</li>
  <li><strong>Persistent:</strong> It should track my location <em>constantly.</em></li>
  <li><strong>Fine-grained:</strong> It should be capable of <em>per-minute resolution or better.</em></li>
  <li><strong>Developer-friendly:</strong> It should <em>provide an API</em> for fetching location
history, and the data offered through that API should be <em>as complete as
possible.</em></li>
</ul>

<p>Both tools are <em>Android-compatible</em>, <em>automatic</em>, and <em>persistent</em> already,
which narrows down the list of criteria to evaluate.</p>

<h2 id="installation">Installation</h2>

<h3 id="google-latitude-1">Google Latitude</h3>

<p>Enabling automatic location tracking on Android requires <em>only a single
setting change:</em></p>

<p><img src="https://lh4.googleusercontent.com/-lGwyff6IKAQ/UJA_jzsY3CI/AAAAAAAAAIw/qgFZr8kT1xE/s288/install-glatitude-step1.jpg" />
<img src="https://lh5.googleusercontent.com/-v-7rvy4kAk4/UJA_kbfLddI/AAAAAAAAAI4/MLzFAjPXgR8/s288/install-glatitude-step2.jpg" />
<img src="https://lh3.googleusercontent.com/-rooAhkMibWg/UJA_kjz8o1I/AAAAAAAAAJA/sCnrK_yNHbE/s288/install-glatitude-step3.jpg" />
<img src="https://lh5.googleusercontent.com/-8jz3N_5HkUA/UJA_k6mNTAI/AAAAAAAAAJI/qerZyoCzXbo/s288/install-glatitude-step4.jpg" /></p>

<h3 id="instamapper-1">InstaMapper</h3>

<p>I followed the Android installation directions <a href="http://www.instamapper.com/android_howto.html">here</a>.
After you <a href="https://www.instamapper.com/fe?page=register">register for an InstaMapper account</a>, you install
InstaMapper’s <a href="https://play.google.com/store/apps/details?id=com.instamapper.gpstracker&amp;hl=en">GPS Tracker app</a>:</p>

<p><img src="https://lh5.googleusercontent.com/-FJZ7CxlpWSE/UJA_lDw4OVI/AAAAAAAAAJQ/pCreIS9emn0/s288/install-instamapper-step1.jpg" /></p>

<h3 id="comparison">Comparison</h3>

<p>Both tools are easily installed, but <em>Google Latitude</em> wins on simplicity. This
is unsurprising, as Google Latitude comes pre-installed.</p>

<h2 id="data-export">Data Export</h2>

<h3 id="google-latitude-2">Google Latitude</h3>

<p>To export data from the Location History dashboard, click on <em>Export KML</em>
under the calendar widget:</p>

<p><img src="https://lh3.googleusercontent.com/-N_E7GC01k3I/UJA_lY310cI/AAAAAAAAAJY/B6qCcqCAPm0/s800/export-glatitude.jpg" /></p>

<h3 id="instamapper-2">InstaMapper</h3>

<p>Head to the <em>data page</em> for your device:</p>

<p><img src="https://lh4.googleusercontent.com/-WiPRLpRcC9Q/UJA_l7UA-cI/AAAAAAAAAJg/ienRb1xYY2o/s400/export-instamapper-step1.jpg" />
<img src="https://lh4.googleusercontent.com/-kvWTFuAZoJ8/UJA_mK_zsbI/AAAAAAAAAJk/aG-iJs2Sfp8/s400/export-instamapper-step2.jpg" /></p>

<p>Here’s where this process gets weird. To export your data, you first have to
<em>define a track:</em></p>

<p><img src="https://lh3.googleusercontent.com/-0j8AdUIinoU/UJA_msnEnLI/AAAAAAAAAKM/LfOZOnEyOJA/s400/export-instamapper-step3.jpg" />
<img src="https://lh5.googleusercontent.com/-aiXmPGeKOxo/UJA_nRZr93I/AAAAAAAAAJ0/wWNddc34ZXo/s400/export-instamapper-step4.jpg" />
<img src="https://lh6.googleusercontent.com/-tgipa_V9TfU/UJA_ncU8LeI/AAAAAAAAAJ8/2HIvGJ_ycfY/s400/export-instamapper-step5.jpg" /></p>

<p>Once the track is created, you can <em>visit the Track Manager</em> to
export your track data in a variety of formats:</p>

<p><img src="https://lh6.googleusercontent.com/-OyteTDJcqYk/UJA_n7L2QvI/AAAAAAAAAKE/tvEkdMbB-Ik/s400/export-instamapper-step6.jpg" />
<img src="https://lh5.googleusercontent.com/-e52trEcnN0I/UJA_ob4XGgI/AAAAAAAAAKI/REcryQodFq0/s400/export-instamapper-step7.jpg" /></p>

<h3 id="comparison-1">Comparison</h3>

<p>This one goes to <em>Google Latitude</em>. Aside from the terrible UI flow,
InstaMapper has some other problems:</p>

<ul>
  <li>The <code>accuracy</code> field is missing, making it harder to <em>filter out noisy
readings.</em></li>
  <li>As stated in the <a href="http://www.instamapper.com/faq.html">InstaMapper FAQ</a>,
data access is <em>limited to the
previous 30 days or 100 000 locations.</em></li>
</ul>

<h2 id="api-fetching">API Fetching</h2>

<h3 id="tailers-and-streams">Tailers and Streams</h3>

<p>Many real-time APIs provide <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> endpoints for fetching
time-bounded chunks of data:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">https://www.googleapis.com/latitude/v1/location?key=INSERT-YOUR-KEY&amp;min-time=1111&amp;max-time=2222&amp;max-results=10</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By keeping track of a <code>since</code> time to fetch after, we can easily turn this
into a stream:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="k">def</span> <span class="nf">request</span><span class="p">(</span><span class="n">since</span><span class="p">):</span>
</span><span class="line">  <span class="c"># TODO: actually fetch data</span>
</span><span class="line">  <span class="k">pass</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">sleep</span><span class="p">(</span><span class="n">since</span><span class="p">,</span> <span class="n">freq</span><span class="p">):</span>
</span><span class="line">  <span class="n">elapsed</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">since</span>
</span><span class="line">  <span class="n">wait</span> <span class="o">=</span> <span class="n">freq</span> <span class="o">-</span> <span class="n">elapsed</span>
</span><span class="line">  <span class="k">if</span> <span class="n">wait</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">    <span class="k">return</span>
</span><span class="line">  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">wait</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">poll</span><span class="p">(</span><span class="n">freq</span><span class="p">):</span>
</span><span class="line">  <span class="n">since</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class="line">  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">    <span class="n">sleep</span><span class="p">(</span><span class="n">since</span><span class="p">,</span> <span class="n">freq</span><span class="p">)</span>
</span><span class="line">    <span class="n">locations</span> <span class="o">=</span> <span class="n">request</span><span class="p">(</span><span class="n">since</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="ow">not</span> <span class="n">locations</span><span class="p">:</span>
</span><span class="line">      <span class="k">continue</span>
</span><span class="line">    <span class="n">doSomething</span><span class="p">(</span><span class="n">locations</span><span class="p">)</span>
</span><span class="line">    <span class="n">since</span> <span class="o">=</span> <span class="n">locations</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">timestamp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This pattern is often referred to as a <em>tailer.</em> Why? Suppose we have a simple
implementation of <code>doSomething()</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="k">def</span> <span class="nf">doSomething</span><span class="p">(</span><span class="n">locations</span><span class="p">):</span>
</span><span class="line">  <span class="k">for</span> <span class="n">location</span> <span class="ow">in</span> <span class="n">locations</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="n">location</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This prints out locations as they are received, similar to UNIX <code>tail -F</code>. By
adjusting <code>freq</code> I can make different real-time guarantees, although at some
point the upstream API will start throttling my requests.</p>

<h3 id="google-latitude-3">Google Latitude</h3>

<p>You can see a working tailer implementation <a href="https://github.com/candu/quantified-savagery-files/blob/master/Location/tail_glatitude.py">here</a>.</p>

<p>To access the <a href="https://developers.google.com/latitude/">Google Latitude API</a>, you first need to
<a href="https://code.google.com/apis/console/b/0/">register an application</a>. This gives you the necessary
parameters <code>YOUR_KEY</code>, <code>YOUR_SECRET</code> for stepping through the OAuth flow.</p>

<p>With the Python library <a href="http://code.google.com/p/google-api-python-client/wiki/OAuth2Client">oauthclient2</a>, retrieving OAuth credentials is
relatively painless:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="kn">from</span> <span class="nn">oauth2client.client</span> <span class="kn">import</span> <span class="n">OAuth2WebServerFlow</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">oauth2client.file</span> <span class="kn">import</span> <span class="n">Storage</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">oauth2client.tools</span> <span class="kn">import</span> <span class="n">run</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">getCredentials</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">secret</span><span class="p">):</span>
</span><span class="line">  <span class="n">flow</span> <span class="o">=</span> <span class="n">OAuth2WebServerFlow</span><span class="p">(</span>
</span><span class="line">    <span class="n">client_id</span><span class="o">=</span><span class="n">key</span><span class="p">,</span>
</span><span class="line">    <span class="n">client_secret</span><span class="o">=</span><span class="n">secret</span><span class="p">,</span>
</span><span class="line">    <span class="n">scope</span><span class="o">=</span><span class="s">&#39;https://www.googleapis.com/auth/latitude.all.best&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="n">redirect_uri</span><span class="o">=</span><span class="s">&#39;http://localhost:8080/oauth2callback&#39;</span>
</span><span class="line">  <span class="p">)</span>
</span><span class="line">  <span class="n">storage</span> <span class="o">=</span> <span class="n">Storage</span><span class="p">(</span><span class="s">&#39;.creds&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">return</span> <span class="n">run</span><span class="p">(</span><span class="n">flow</span><span class="p">,</span> <span class="n">storage</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>oauth2client.tools.run()</code> invokes a browser window and starts an HTTP server
to receive the OAuth callback. With the credentials, we can <em>make a signed API
request:</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="kn">import</span> <span class="nn">httplib2</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">urllib</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">json</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">since</span><span class="p">):</span>
</span><span class="line">  <span class="n">http</span> <span class="o">=</span> <span class="n">httplib2</span><span class="o">.</span><span class="n">Http</span><span class="p">()</span>
</span><span class="line">  <span class="n">credentials</span> <span class="o">=</span> <span class="n">getCredentials</span><span class="p">(</span><span class="n">YOUR_KEY</span><span class="p">,</span> <span class="n">YOUR_SECRET</span><span class="p">)</span>
</span><span class="line">  <span class="n">credentials</span><span class="o">.</span><span class="n">authorize</span><span class="p">(</span><span class="n">http</span><span class="p">)</span>
</span><span class="line">  <span class="n">url</span> <span class="o">=</span> <span class="s">&#39;https://www.googleapis.com/latitude/v1/location?</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlencode</span><span class="p">({</span>
</span><span class="line">    <span class="s">&#39;max-results&#39;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;min-time&#39;</span><span class="p">:</span> <span class="n">since</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;max-time&#39;</span><span class="p">:</span> <span class="n">since</span> <span class="o">+</span> <span class="mi">10</span> <span class="o">*</span> <span class="p">(</span><span class="mi">15</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">),</span>
</span><span class="line">    <span class="s">&#39;granularity&#39;</span><span class="p">:</span> <span class="s">&#39;best&#39;</span>
</span><span class="line">  <span class="p">})</span>
</span><span class="line">  <span class="n">resp</span><span class="p">,</span> <span class="n">content</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class="line">  <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span><span class="line">  <span class="k">if</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;error&#39;</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">    <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">  <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;data&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;items&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There are some minor details:</p>

<ul>
  <li>The API <em>uses milliseconds for its timestamps</em>, so my <code>since</code> values take
this into account.</li>
  <li>Without <code>max-time</code>, the API <em>returns the most recent</em> <code>max-results</code> locations.
I supply a 150-second window.</li>
  <li>If there are no locations within the given time range, the API <strong>does not</strong>
populate <code>data['data']['items']</code>. I use <code>get()</code> to work around the resulting
<code>KeyError</code>.</li>
  <li>In the event of an error, the API populates <code>data['error']</code>. I use <code>None</code> as
a <em>sentinel value</em> to indicate that an error has occurred.</li>
</ul>

<h3 id="instamapper-3">InstaMapper</h3>

<p>You can see a working tailer implementation <a href="https://github.com/candu/quantified-savagery-files/blob/master/Location/tail_instamapper.py">here</a>.</p>

<p>InstaMapper doesn’t use OAuth; instead, it uses a unique key
<code>YOUR_KEY</code> that is passed as a GET parameter to the REST API:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="kn">import</span> <span class="nn">httplib</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">json</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">urllib</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">since</span><span class="p">):</span>
</span><span class="line">  <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&#39;action&#39;</span><span class="p">:</span> <span class="s">&#39;getPositions&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;key&#39;</span><span class="p">:</span> <span class="n">YOUR_KEY</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;num&#39;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;from_ts&#39;</span><span class="p">:</span> <span class="n">since</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;format&#39;</span><span class="p">:</span> <span class="s">&#39;json&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="n">url</span> <span class="o">=</span> <span class="s">&#39;http://www.instamapper.com/api?{1}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">APIHOST</span><span class="p">,</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlencode</span><span class="p">(</span><span class="n">params</span><span class="p">))</span>
</span><span class="line">  <span class="n">conn</span> <span class="o">=</span> <span class="n">httplib</span><span class="o">.</span><span class="n">HTTPConnection</span><span class="p">(</span><span class="s">&#39;www.instamapper.com&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="n">conn</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="s">&#39;GET&#39;</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
</span><span class="line">  <span class="n">resp</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
</span><span class="line">  <span class="k">if</span> <span class="n">resp</span><span class="o">.</span><span class="n">status</span> <span class="o">!=</span> <span class="mi">200</span><span class="p">:</span>
</span><span class="line">    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;HTTP {0} {1}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">status</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">reason</span><span class="p">))</span>
</span><span class="line">  <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class="line">  <span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">  <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;positions&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="comparison-2">Comparison</h3>

<p>Although InstaMapper’s API is arguably simpler to use, I’ll award this one to
<em>Google Latitude:</em></p>

<ul>
  <li><strong>Security:</strong> InstaMapper uses unencrypted HTTP GET requests, so anyone
running a <a href="http://www.wireshark.org/">packet sniffer</a> on my network has <em>complete access to my
location data.</em> Google Latitude uses HTTPS and OAuth. No contest.</li>
  <li><strong>Support:</strong> I can <em>leverage the community of Google API users</em> to help resolve
any issues I encounter.</li>
  <li><strong>Data:</strong> again, InstaMapper is <em>missing location accuracy.</em></li>
  <li><strong>Request Volume:</strong> InstaMapper permits one request every 10 seconds. Google
Latitude allows 1 000 000 requests per day, or <em>one request every 0.0864
seconds.</em></li>
</ul>

<h2 id="battery-usage">Battery Usage</h2>

<p>To find out how battery-friendly the two Android apps are, I <em>check the
Battery Manager:</em></p>

<p><img src="https://lh6.googleusercontent.com/-B246p7a_vbg/UJA_i7iGdyI/AAAAAAAAAIU/Q6U6hLdc2hg/s288/battery-overview.jpg" />
<img src="https://lh5.googleusercontent.com/-X6ClOm7t-8s/UJA_jVwjgrI/AAAAAAAAAIk/V1lOfjmpO2o/s288/battery-maps.jpg" />
<img src="https://lh5.googleusercontent.com/-r7N176E75z0/UJA_jdJfs_I/AAAAAAAAAIg/XQnPc0Q2lgY/s288/battery-gps-tracker.jpg" /></p>

<h3 id="comparison-3">Comparison</h3>

<p><em>Google Latitude</em> wins this one as well. InstaMapper keeps the GPS radio
running almost constantly, whereas Google Latitude manages to sip radio
access. I’m guessing that it uses WiFi, cell towers, and other non-GPS sources
where possible.</p>

<p>Without these power consumption improvements, InstaMapper’s GPS Tracker <em>uses
an order of magnitude more energy</em> than Google Latitude. Ouch.</p>

<h2 id="first-impressions">First Impressions</h2>

<p>After a day of persistent location tracking with both Google Latitude and
InstaMapper, <em>Google Latitude wins hands-down.</em> It’s <em>easy to install</em>, it
provides <em>simple and secure data access</em> via <code>oauth2client</code>, and it <em>preserves
battery life nicely.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Hate, Cross-Correlate]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/22/dont-hate-cross-correlate/"/>
    <updated>2012-10-22T13:41:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/22/dont-hate-cross-correlate</id>
    <content type="html"><![CDATA[<p>In this post, I discuss cross-correlation. Although commonly used in signal
processing, cross-correlation can be useful in a Quantified Self context.
I’ll present a bit of the mathematics behind cross-correlation, demonstrate
a quick example, and briefly explain where you might use this in analyzing
your personal data.</p>

<!-- more -->

<h2 id="the-inspiration">The Inspiration</h2>

<p>I was going through my <a href="http://reader.google.com">Google Reader</a> queue this morning and
came across <a href="http://vimeo.com/50329491">this talk</a> by <a href="http://www.linkedin.com/in/jeffzira">Jeff Zira</a>, a product manager at
<a href="http://www.lark.com/">Lark Technologies</a>. The talk asks a simple question:</p>

<blockquote><p>Do Jeff and his fiancée influence each other&#8217;s sleep patterns?</p></blockquote>

<p>He presents raw time-series sleep data collected using
<a href="http://www.lark.com/products/lark-life/experience">larklife</a>, then attempts to answer this question in a couple of
different ways. He first displays a <em>timeline visualization</em> of peak
overnight activity:</p>

<p><img src="https://lh6.googleusercontent.com/-nU3qiQKycow/UIbogGdHsGI/AAAAAAAAAHY/Ax23iCZB98M/s640/jeffzira-peak-vis.jpg" /></p>

<p>Since his peaks often occur slightly after her peaks, he uses this as
evidence that she’s waking him up. He also shows the <em>difference signal</em>
between their sleep patterns, but finds this less than conclusive:</p>

<p><img src="https://lh4.googleusercontent.com/-GAskT1r-gP4/UIbogcHUqCI/AAAAAAAAAHc/XbCl5IvAves/s640/jeffzira-diff-vis.jpg" /></p>

<p>After watching this talk, I immediately thought:</p>

<blockquote><p>Is there a more precise way to answer this question?</p></blockquote>

<h2 id="the-mathematics">The Mathematics</h2>

<p>Note that term <em>difference signal</em> above. Any time-series dataset is a signal,
which means the powerful tools of signal processing can be applied!</p>

<p>Let the sleep patterns of Jeff and his fiancée be the signals
$ S(\tau) $ and $ T(\tau) $ respectively. Let $ f(S(\tau), T(\tau)) $ be the
<em>similarity</em> between those signals. Ignoring (for now) the fact that $ f $
remains undefined, I’m looking for the <em>time shift</em> $ t $ that maximizes</p>

<script type="math/tex; mode=display">
f(S(\tau + t), T(\tau))
</script>

<p>(As a side note, the <em>difference signal</em> is a new signal
$ R(\tau) = S(\tau) - T(\tau) $.)</p>

<p>First, however, I need a reasonable <em>similarity function</em> $ f $. The answer
lies in <em>cross-correlation:</em></p>

<blockquote><p>In signal processing, cross-correlation is a measure of similarity of two waveforms as a function of a time-lag applied to one of them.</p><footer><strong>Wikipedia</strong> <cite><a href="http://en.wikipedia.org/wiki/Cross-correlation">en.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote>

<p>Perfect! The core of cross-correlation is an integral that looks suspiciously
like <a href="http://en.wikipedia.org/wiki/Convolution">convolution</a>, except that we have a term $ T(\tau + t) $ instead
of $ T(\tau - t) $:</p>

<script type="math/tex; mode=display">
(S \star T)(t) = \int_{-\infty}^{\infty} S^{\ast}(\tau) T(\tau + t) \mathrm{d}\tau
</script>

<p>The desired $ t $ is the <em>global maximum</em> of this cross-correlation function.</p>

<p>Given two discrete periodic signals <code>S1</code>, <code>S2</code> of equal length, this
cross-correlation integral can easily be computed:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">crossCorrelation</span><span class="p">(</span><span class="nx">S1</span><span class="p">,</span> <span class="nx">S2</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">N</span> <span class="o">=</span> <span class="nx">S1</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class="line">  <span class="nx">t</span> <span class="o">=</span> <span class="nx">t</span> <span class="o">%</span> <span class="nx">N</span><span class="p">;</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="nx">t</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">t</span> <span class="o">+=</span> <span class="nx">N</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">tau</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">tau</span> <span class="o">&lt;</span> <span class="nx">N</span><span class="p">;</span> <span class="nx">tau</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">C</span> <span class="o">+=</span> <span class="nx">S1</span><span class="p">[</span><span class="nx">tau</span><span class="p">]</span> <span class="o">*</span> <span class="nx">S2</span><span class="p">[(</span><span class="nx">tau</span> <span class="o">+</span> <span class="nx">t</span><span class="p">)</span> <span class="o">%</span> <span class="nx">N</span><span class="p">];</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">C</span> <span class="o">/</span> <span class="nx">N</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It can be hard to visualize what this is doing, though, so I’ve provided
a <a href="#quick-demo">quick demo</a> below.</p>

<h3 id="an-interactive-example">An Interactive Example</h3>

<p>If you’re viewing this on an RSS reader, check out the example
<a href="http://blog.savageevan.com/blog/2012/10/22/dont-hate-cross-correlate/#quick-demo">on my blog</a>.</p>

<p>You can see the code for this demo <a href="https://github.com/candu/quantified-savagery-files/tree/master/Algorithms/cross-correlation">here</a>.</p>

<div id="quick-demo">
  <style type="text/css">
    #datasets {
      cursor: move;
    }
    
    #cross-correlation {
      margin-top: 10px;
    }
    
    path {
      stroke-width: 2px;
    }
    
    path.s1 {
      fill: rgba(210, 0, 0, 0.4);
    }
    
    path.s2 {
      fill: rgba(0, 0, 210, 0.4);
    }
    
    path.c {
      fill: rgba(126, 0, 210, 0.64);
    }
    
    line {
      stroke: rgba(64, 64, 64, 0.7);
      stroke-width: 1px;
    }
    
    line.t {
      stroke: rgba(32, 32, 32, 0.8);
      stroke-width: 2px;
    }
    
    #status {
      color: #909;
      font-family: &#8220;Menlo&#8221;, monospace;
      padding-bottom: 10px;
    }
    
    #s1-picker {
      background-color: rgba(210, 0, 0, 0.7);
    }
    
    #s2-picker {
      background-color: rgba(0, 0, 210, 0.7);
    }  
  </style>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/lib/js/ArrayUtils.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/lib/js/MathUtils.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/lib/js/third-party/mootools.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/lib/js/third-party/d3.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/Algorithms/cross-correlation/demo.js"></script>
  <div id="controls">
    <select id="s1-picker">
      <option value="sine" selected="">Sine</option>
      <option value="noise">Noise</option>
      <option value="spiky">Spiky</option>
      <option value="square">Square</option>
      <option value="triangle">Triangle</option>
    </select>
    <select id="s2-picker">
      <option value="sine" selected="">Sine</option>
      <option value="noise">Noise</option>
      <option value="spiky">Spiky</option>
      <option value="square">Square</option>
      <option value="triangle">Triangle</option>
    </select>
  </div>
  <div id="datasets"></div>
  <div id="cross-correlation"></div>
  <div id="status"></div>
</div>

<p>Use the select boxes to change the red and blue functions. Click and drag
on the chart at top to see how sliding the blue function affects the
cross-correlation. Try different combinations of functions and <em>see where
the cross-correlation is maximized!</em></p>

<h3 id="back-to-the-original-motivation">Back To The Original Motivation</h3>

<p>Given the two sleep signals $ S, T $ above, cross-correlation makes it
possible to answer these questions:</p>

<ul>
  <li>Who wakes up first? By how long?</li>
  <li>Accounting for the time shift in awakening, how closely do the sleep
patterns match?</li>
</ul>

<p>This gives a <em>more rigorous</em> sense of whether the peaks in nighttime activity
actually do coincide. It also identifies the person who wakes up first and
how much earlier they wake up.</p>

<p>While simply <em>looking at the data</em> can be very effective, rigorous analysis
has definite value if you plan to <em>carry out further experiments.</em> Armed with
cross-correlation data, you can answer questions like</p>

<blockquote><p>Okay, I switched to a separately-coiled mattress. How well does that prevent<br />us from waking each other up?</p></blockquote>

<p>In general, <em>signal processing</em> techniques can be highly useful in examining
time-series data.</p>

<h2 id="up-next">Up Next</h2>

<p>This was a slight diversion from my plan to talk about
upcoming experiments, which I’ll return to in my next few posts. If you
just can’t wait, here’s a <em>quick summary:</em></p>

<ul>
  <li><strong>Persistent location tracking:</strong> by <em>constantly tracking my location</em>, I’ll
have an additional dataset to correlate against.</li>
  <li><strong>Diet:</strong> by <em>taking meal photos</em>, <em>tagging foods</em>, and <em>measuring
stress levels after meals</em>, I’ll get a better idea of how different
foods affect me.</li>
  <li><strong>Finances:</strong> by <em>tracking where Valkyrie and I spend our money</em>, we’ll
hopefully be able to better control our discretionary spending.</li>
  <li><strong>Loss Aversion:</strong> by <em>experimenting with tracking methods</em>, I’ll see if this
is something that can be meaningfully tracked over time.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Track Your Happiness: An Adventure In Data Extraction]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/18/track-your-happiness-an-adventure-in-data-extraction/"/>
    <updated>2012-10-18T15:41:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/18/track-your-happiness-an-adventure-in-data-extraction</id>
    <content type="html"><![CDATA[<p>In this post, I go over my first report from
<a href="https://www.trackyourhappiness.org/">Track Your Happiness</a>, a tool that uses
the <a href="https://www.trackyourhappiness.org/">Experience Sampling Method</a> for mood
tracking.</p>

<!-- more -->

<h2 id="my-report">My Report</h2>

<h3 id="charts">Charts</h3>

<p>My happiness is <em>relatively constant across days of the week.</em></p>

<p><img src="https://chart.googleapis.com/chart?chs=310x200&amp;cht=bvg&amp;chco=0088cc&amp;chxt=x%2Cy&amp;chxl=0%3A%7CSun%7CMon%7CTue%7CWed%7CThu%7CFri%7CSat&amp;chxr=1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3Aolpkmkp&amp;chbh=30" title="Weekday" /></p>

<p>I’m <em>happiest at the gym or in parks</em>, with vacations and restaurants close
behind. “At Home” is mid-pack, with <em>“At Work” near the bottom.</em></p>

<p><img src="https://chart.googleapis.com/chart?chs=310x338&amp;cht=bhg&amp;chco=0088cc&amp;chxt=y%2Cx&amp;chxl=0%3A%7CBus+Stoo%7CPlane%7CAt+Work%7CIn+A+Car%7CDentist%7CAt+Home%7CAirport%7CRestaurant%7CVacation%7CPark%7CGym&amp;chxr=1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3Auusroonliee&amp;chbh=20" title="Location" /></p>

<p><em>Fun, exercise, and food</em> generate the most happiness. <em>Passive actions</em> such as
watching TV, commuting, and waiting rank much lower. <em>Work is least
happiness-inducing.</em></p>

<p><img src="https://chart.googleapis.com/chart?chs=310x422&amp;cht=bhg&amp;chco=0088cc&amp;chxt=y%2Cx&amp;chxl=0%3A%7CWorking%7CCommuting%2C+Traveling%7CWaiting%7CWatching+Television%7CReading%7CHome+Computer%7CGrooming%2C+Self+Care%7CShopping%2C+Errands%7CRelaxing%2C+Nothing+Special%7CTalking%2C+Conversation%7CEating%7CPlaying%7CPreparing+Food%7CExercising&amp;chxr=1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3Autrrrqpnnnmlkj&amp;chbh=20" title="What are you doing?" /></p>

<p><em>Whether I want to perform a task</em> is a much stronger determinant of happiness
than whether I have to:</p>

<p><img src="https://chart.googleapis.com/chart?chs=310x200&amp;cht=bvg&amp;chco=0088cc&amp;chxt=x%2Cx%2Cy&amp;chxl=0%3A%7CDon%27t+want+to%7CWant+to%7CWant+to%7CDon%27t+want+to%7C1%3A%7CHave+to%7CHave+to%7CDon%27t+have+to%7CDon%27t+have+to&amp;chxr=2%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10%7C2%2C666666%2C10&amp;chd=s%3Agope&amp;chbh=51" title="Want to / Have to" /></p>

<p>I’m <em>happier when outside.</em></p>

<p><img src="https://chart.googleapis.com/chart?chs=310x126&amp;cht=bhg&amp;chco=0088cc&amp;chxt=y%2Cx&amp;chxl=0%3A%7CNo%7CYes&amp;chxr=1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3Apj&amp;chbh=40" title="Outside?" /></p>

<p>I’m <em>happier when alone.</em></p>

<p><img src="https://chart.googleapis.com/chart?chs=310x126&amp;cht=bhg&amp;chco=0088cc&amp;chxt=y%2Cx&amp;chxl=0%3A%7CNo%7CYes&amp;chxr=1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3Apl&amp;chbh=40" title="Alone" /></p>

<p>Given that, it seems counterintuitive that <em>I’m happier when interacting with
multiple people.</em></p>

<p><img src="https://chart.googleapis.com/chart?chs=310x132&amp;cht=bhg&amp;chco=0088cc&amp;chxt=y%2Cx&amp;chxl=0%3A%7CThree+Or+More%7CTwo%7COne&amp;chxr=1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3Aorq&amp;chbh=26" title="Number of people interacting with" /></p>

<p>I was also surprised by this one: I’m happiest when <em>talking with acquaintances
or friends</em> and least happy when <em>talking with family.</em></p>

<p><img src="https://chart.googleapis.com/chart?chs=310x198&amp;cht=bhg&amp;chco=0088cc&amp;chxt=y%2Cx&amp;chxl=0%3A%7COther+Relatives%7CSpouse%2FPartner%2FSignificant+Other%7CStrangers%7CCo+Workers%7CFriends%7CAcquaintances&amp;chxr=1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3Autsrpo&amp;chbh=20" title="Who talking with" /></p>

<h3 id="what-does-it-mean">What Does It Mean?</h3>

<p>Even without considering the specific results, I have a few <em>unanswered
questions:</em></p>

<ul>
  <li>What is <em>happiness</em>? How do I judge it at a particular moment? Is my
judgment <em>accurate and consistent?</em></li>
  <li>Is it necessarily better to be happier, or is there a
threshold past which additional happiness doesn’t improve the quality of life?</li>
  <li>Are these results <em>significant?</em> They’re computed from just 50 samples, which
seems low for drawing such broad conclusions.</li>
  <li>Do these activities make me more or less happy, or <em>do these readings reflect
my pre-existing mental state?</em></li>
</ul>

<p>There’s also the issue of those surprising findings. Am I really less happy
when talking with <a href="http://www.eecs.berkeley.edu/~valkyrie/">Valkyrie Savage</a>? To me, the most likely
explanation is <em>trust</em>: around her, <em>I feel free to discuss negative aspects
of my life.</em> Doing so would necessarily involve fixating on those aspects,
which could account for some happiness reduction.</p>

<p>During this period, I was confronting <em>doubt and frustration in
my job.</em> According to my personal data, I was also <a href="http://blog.savageevan.com/blog/2012/10/08/self-tracking-for-panic-a-deeper-look/">drinking heavily</a>,
possibly as a means for coping with that negative emotion. (It doesn’t help.)
Guilt is a potential factor; perhaps I felt
that I was always offloading that doubt and frustration onto her.</p>

<p>The problem, though, is that <em>none of these explanations are testable</em>. They seem
reasonable to me, but from a scientific standpoint they <em>fail a simple criterion:</em></p>

<blockquote><p>Upon viewing only my data, would an impartial stranger reach similar conclusions?</p></blockquote>

<p>I can’t see how they would, since <em>my explanations involve
intricate self-knowledge</em> that is not represented in the data.</p>

<h3 id="a-further-note-on-significance">A Further Note On Significance</h3>

<p>Let’s take a more critical look at this chart:</p>

<p><img src="https://chart.googleapis.com/chart?chs=310x198&amp;cht=bhg&amp;chco=0088cc&amp;chxt=y%2Cx&amp;chxl=0%3A%7COther+Relatives%7CSpouse%2FPartner%2FSignificant+Other%7CStrangers%7CCo+Workers%7CFriends%7CAcquaintances&amp;chxr=1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3Autsrpo&amp;chbh=20" title="Who talking with" /></p>

<p>I mentioned that this data was drawn from a total of 50 samples. I’m assuming
that these bars represent <em>average reported happiness</em> in each category. But:</p>

<ul>
  <li><strong>Which average?</strong> Probably the mean, but that’s not made explicit
anywhere.</li>
  <li><strong>Where are the error bars?</strong> I have no idea whether the ranking is significant.</li>
  <li><strong>How many samples go into each bar?</strong> Maybe “Acquaintances” and
“Other Relatives” are outliers because I rarely talk to people in those
categories.</li>
</ul>

<p>This leads to an important point:</p>

<blockquote><p>Never present uncertain information as certain.</p></blockquote>

<h2 id="digging-deeper">Digging Deeper</h2>

<p>Consider this chart:</p>

<p><img src="https://chart.googleapis.com/chart?chs=310x200&amp;cht=s&amp;chco=0088cc&amp;chxt=x%2Cy&amp;chxr=0%2C0%2C100%7C1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3AaUXKPnmomsWw0tSQnXaVrk%2CslrjjuZtXvZotualhrmepm" title="Focused" /></p>

<p><em>Am I happier when I’m more focused?</em> It’s hard to tell from looking at this
chart. This is a prime use case for <em>linear regression</em>, but I don’t have the
data! They <a href="http://support.trackyourhappiness.org/customer/portal/questions/302357-combine-categories-">claim to have plans for data export</a>, but I haven’t seen those
come to fruition. What now?</p>

<h3 id="data-extraction">Data Extraction</h3>

<p>Fortunately, the chart was generated using the 
(now deprecated) <a href="https://developers.google.com/chart/image/">Image Charts</a> functionality of the
<a href="https://developers.google.com/chart/">Google Charts API</a>. With Image Charts, you <em>make requests to specially
encoded URLs:</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">https://chart.googleapis.com/chart
</span><span class="line">  ?chs=310x200
</span><span class="line">  &amp;cht=s
</span><span class="line">  &amp;chco=0088cc
</span><span class="line">  &amp;chxt=x%2Cy
</span><span class="line">  &amp;chxr=0%2C0%2C100%7C1%2C0%2C100
</span><span class="line">  &amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10
</span><span class="line">  &amp;chd=s%3AaUXKPnmomsWw0tSQnXaVrk%2CslrjjuZtXvZotualhrmepm</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can see what all those parameters do <a href="https://developers.google.com/chart/image/docs/chart_params">here</a>,
but the one I really care about is <code>chd</code>. This <em>encodes the chart data</em>
in the <a href="https://developers.google.com/chart/image/docs/data_formats#simple">Simple Encoding Format</a>. I’ll walk through <em>how to decode
this data.</em></p>

<p>As it stands, the value of <code>chd</code> is <a href="http://tools.ietf.org/html/rfc3986#section-2.1">URL-encoded</a>.
We need to decode those <code>%3A</code> and <code>%2C</code> escape sequences.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="kn">import</span> <span class="nn">urlparse</span>
</span><span class="line"><span class="n">params</span> <span class="o">=</span> <span class="n">urlparse</span><span class="o">.</span><span class="n">parse_qs</span><span class="p">(</span><span class="s">&#39;chd=s%3AaUXKPnmomsWw0tSQnXaVrk%2CslrjjuZtXvZotualhrmepm&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">chd</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="s">&#39;chd&#39;</span><span class="p">]</span> <span class="c"># &#39;s:aUXKPnmomsWw0tSQnXaVrk,slrjjuZtXvZotualhrmepm&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>s:</code> at the front means <em>use the simple encoding</em>. In that encoding, the
characters <code>A-Za-z0-9</code> are mapped to values 0-61 in a, well, simple manner:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="k">def</span> <span class="nf">_get_simple_value</span><span class="p">(</span><span class="n">c</span><span class="p">):</span>
</span><span class="line">  <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s">&#39;_&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">  <span class="k">if</span> <span class="s">&#39;A&#39;</span> <span class="o">&lt;=</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="s">&#39;Z&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="k">return</span> <span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">if</span> <span class="s">&#39;a&#39;</span> <span class="o">&lt;=</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="s">&#39;z&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">26</span> <span class="o">+</span> <span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">if</span> <span class="s">&#39;0&#39;</span> <span class="o">&lt;=</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="s">&#39;9&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">52</span> <span class="o">+</span> <span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;0&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&#39;invalid character for simple encoding: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here the underscores <code>_</code> indicate missing or <code>null</code> values. With this function,
recovering the original data from the <code>chd</code> param is a quick one-liner:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="nb">map</span><span class="p">(</span><span class="n">_get_simple_value</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">chd</span><span class="p">[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By default, the simple encoding maps onto an effective range of 1-100, so the
last step is to normalize this and <code>zip()</code> the lists into pairs:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="k">def</span> <span class="nf">fitSimpleToRange</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">xmin</span><span class="p">,</span> <span class="n">xmax</span><span class="p">):</span>
</span><span class="line">  <span class="k">if</span> <span class="n">x</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">    <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">  <span class="n">nx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">/</span> <span class="mf">61.0</span>
</span><span class="line">  <span class="k">return</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">nx</span><span class="p">)</span> <span class="o">*</span> <span class="n">xmin</span> <span class="o">+</span> <span class="n">nx</span> <span class="o">*</span> <span class="n">xmax</span>
</span><span class="line">
</span><span class="line"><span class="n">points</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span>
</span><span class="line">  <span class="p">[</span><span class="n">fitSimpleToRange</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span>
</span><span class="line">  <span class="p">[</span><span class="n">fitSimpleToRange</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Done! I’ve packaged this up as <a href="https://github.com/candu/quantified-savagery-files/blob/master/lib/py/chdecode.py">chdecode</a>,
which also deals with the
<a href="https://developers.google.com/chart/image/docs/data_formats#text">Basic Text</a> and <a href="https://developers.google.com/chart/image/docs/data_formats#extended">Extended Encoding</a> formats.</p>

<h3 id="lets-see-those-charts-again">Let’s See Those Charts Again</h3>

<p>You can see the code for this analysis <a href="https://github.com/candu/quantified-savagery-files/blob/master/Panic/track-your-happiness/linregress.py">here</a>.</p>

<p>Focus, productivity, and sleep quality all have <em>minor positive correlations</em>
with happiness:</p>

<p><img src="https://lh4.googleusercontent.com/-DG51p79XNtk/UIGcRjGMLQI/AAAAAAAAAG4/mk1xaar0yJM/s640/happiness-focus.jpg" title="Focus" />
<img src="https://lh6.googleusercontent.com/-85nu0a-MBJw/UIGcRyutW9I/AAAAAAAAAG8/psRbjq12PLw/s640/happiness-productivity.jpg" title="Productivity" />
<img src="https://lh3.googleusercontent.com/-bjcS4-21xIw/UIGcSLK9mCI/AAAAAAAAAHA/EVJ1qonZvks/s640/happiness-sleep-quality.jpg" title="Sleep Quality" /></p>

<p>The <em>most significant one is focus,</em> but with $ p = 0.0927 $ it doesn’t quite
make the 5% significance threshold.</p>

<h2 id="up-next">Up Next</h2>

<p>This ends my series of posts on data collection and analysis for dealing
with panic disorder. In my next few posts, I’ll talk about my plans for future
experiments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fitbit: APIs, crossfilter, and d3.js]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/17/fitbit-apis-crossfilter-and-d3/"/>
    <updated>2012-10-17T08:30:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/17/fitbit-apis-crossfilter-and-d3</id>
    <content type="html"><![CDATA[<p>In this post, I present
<a href="https://github.com/candu/fitbit-crossfilter">fitbit-crossfilter</a>, which uses
the <a href="http://dev.fitbit.com/">Fitbit API</a>, <a href="http://square.github.com/crossfilter/">crossfilter</a> and <a href="http://d3js.org/">d3.js</a>
to provide an interactive visualization for exploratory analysis.</p>

<!-- more -->

<h2 id="the-inspiration">The Inspiration</h2>

<p>It was early April 2012. By this point, I’d been through a stint of pen-and-paper
self-tracking for <a href="http://blog.savageevan.com/blog/2012/10/03/panic/">panic recovery</a>.
I’d <a href="http://blog.savageevan.com/blog/2012/10/16/fitbit-my-brief-experience/">just received my Fitbit in the mail</a>. </p>

<p>Earlier that year, I applied to the <a href="http://www.eecs.berkeley.edu/Gradadm/">EECS PhD program at UC Berkeley</a> with
<a href="https://docs.google.com/document/d/10PupOF0RLa54o6y9_xBGnj7VbjtQNPab0-HdoVfT6gA/edit">this statement of purpose</a>. I was fascinated by this idea that <em>pervasive
gameplay really could make us all better</em>, that somewhere beyond the rat wheel
of gamification was hidden a Shangri-La of game-driven awesome.</p>

<p>That unfortunately didn’t pan out, and I was left with the age-old question:</p>

<blockquote><p>What do I do with this idea?</p></blockquote>

<p>It was around this time that, in a moment of exquisite
digital serendipity, <a href="http://www.meetup.com/">Meetup</a> suggested I check out the
<a href="http://www.meetup.com/quantifiedself/">Bay Area Quantified Self Meetup Group</a>.</p>

<p>Quantified Self? <a href="http://blog.savageevan.com/blog/2012/10/02/welcome-to-quantified-savagery/">What’s that?</a>. As I explored the group page, I felt
a rush of clarity: <em>this was exactly what I’d been doing!</em> There’s a whole
community of people turning their lives into games in the name of
self-betterment!</p>

<p>I bit the bullet and forked over hard cash to sign up for
<a href="http://www.meetup.com/quantifiedself/events/58370532/">QS Show&amp;Tell #25</a> at the
<a href="http://goo.gl/maps/fn8H4">California College of the Arts</a>. It was everything I’d hoped for.
One presenter dissected 30 years of medical data and correlated it with
his marital status. Another showed off a cyclist threat detection system
cobbled together by mounting a webcam and sonar unit to his handlebars.
There was a <em>rich vein of inquiry into awesome here.</em> I was hooked.</p>

<p><a href="http://www.beaugunderson.com/">Beau Gunderson</a> of
<a href="https://singly.com/">Singly</a> presented <a href="https://github.com/beaugunderson/zeo-crossfilter">zeo-crossfilter</a>.
That was the turning point. I saw what he had done and said</p>

<blockquote><p>Hey, I can build that!</p></blockquote>

<p>And so <a href="https://github.com/candu/fitbit-crossfilter">fitbit-crossfilter</a> was born.</p>

<h2 id="the-tools">The Tools</h2>

<p>As mentioned, <a href="https://github.com/candu/fitbit-crossfilter">fitbit-crossfilter</a> is a mashup between
the <a href="http://dev.fitbit.com/">Fitbit API</a>,
<a href="http://square.github.com/crossfilter/">crossfilter</a>,
and <a href="http://d3js.org/">d3.js</a>.
I’ll go over each part with examples.</p>

<h3 id="fitbit-api">Fitbit API</h3>

<p>The Fitbit API uses <a href="http://oauth.net/">OAuth</a> for authentication. If you’ve never
confronted OAuth before, it can be confusing. To compound the confusion, <em>every
API provider seems to do it slightly differently.</em> The
<a href="https://wiki.fitbit.com/display/API/OAuth+Authentication+in+the+Fitbit+API">official Fitbit docs</a> are opaque, the
<a href="http://tools.ietf.org/html/rfc5849">OAuth specs</a> are even more opaque, and
the <a href="http://apis.io/Fitbit">unofficial apis.io listing</a> is just wrong:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>curl -X GET -u <span class="s1">&#39;&lt;username&gt;:&lt;password&gt;&#39;</span> http://api.fitbit.com/1/user/-/profile.json 2&gt;/dev/null | jsonpp
</span><span class="line"><span class="o">{</span>
</span><span class="line">  <span class="s2">&quot;errors&quot;</span>: <span class="o">[</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">      <span class="s2">&quot;errorType&quot;</span>: <span class="s2">&quot;oauth&quot;</span>,
</span><span class="line">      <span class="s2">&quot;fieldName&quot;</span>: <span class="s2">&quot;n/a&quot;</span>,
</span><span class="line">      <span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;No Authorization header provided in the request. Each call to Fitbit API should be OAuth signed&quot;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">]</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I turned to <a href="https://github.com/simplegeo/python-oauth2">oauth2</a>, a Python library that makes it easier to carry out
this handshake. First, we get a <em>temporary access token:</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="c"># Fill in your app parameters here.</span>
</span><span class="line"><span class="n">FITBIT_APP_KEY</span> <span class="o">=</span> <span class="s">&#39;&lt;app key&gt;&#39;</span>
</span><span class="line"><span class="n">FITBIT_APP_SECRET</span> <span class="o">=</span> <span class="s">&#39;&lt;app secret&gt;&#39;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">oauth2</span>
</span><span class="line"><span class="n">consumer</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Consumer</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">FITBIT_APP_KEY</span><span class="p">,</span> <span class="n">secret</span><span class="o">=</span><span class="n">FITBIT_APP_SECRET</span><span class="p">)</span>
</span><span class="line"><span class="n">client</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">consumer</span><span class="p">)</span>
</span><span class="line"><span class="n">resp</span><span class="p">,</span> <span class="n">content</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="s">&#39;http://api.fitbit.com/oauth/request_token, &#39;</span><span class="n">GET</span><span class="s">&#39;)</span>
</span><span class="line"><span class="n">token</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Token</span><span class="o">.</span><span class="n">from_string</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span><span class="line"><span class="c"># NOTE: the auth URL uses www.fitbit.com as the domain, NOT api.fitbit.com</span>
</span><span class="line"><span class="n">auth_url</span> <span class="o">=</span> <span class="s">&#39;http://www.fitbit.com/oauth/authorize?oauth_token={0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">token</span><span class="o">.</span><span class="n">key</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">auth_url</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we need an <a href="http://wiki.oauth.net/w/page/12238555/Signed%20Callback%20URLs">OAuth verifier</a>. This will be used to retrieve the real
access credentials. Visit <code>auth_url</code> in your browser,
log into Fitbit, and click Allow. You’ll be redirected to the OAuth callback
specified in your app. Use the value of the <code>oauth_verifier</code> GET param on your
<code>token</code> from before to keep going:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="n">token</span><span class="o">.</span><span class="n">set_verifier</span><span class="p">(</span><span class="s">&#39;&lt;oauth_verifier&gt;&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">client</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">consumer</span><span class="p">,</span> <span class="n">token</span><span class="p">)</span>
</span><span class="line"><span class="n">resp</span><span class="p">,</span> <span class="n">content</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="s">&#39;http://api.fitbit.com/oauth/access_token&#39;</span><span class="p">,</span> <span class="s">&#39;POST&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">access_token</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Token</span><span class="o">.</span><span class="n">from_string</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With this, we can now <em>retrieve useful information:</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="n">request_url</span> <span class="o">=</span> <span class="s">&#39;http://api.fitbit.com/1/user/-/profile.json&#39;</span>
</span><span class="line"><span class="n">oauth_request</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Request</span><span class="o">.</span><span class="n">from_consumer_and_token</span><span class="p">(</span><span class="n">consumer</span><span class="p">,</span> <span class="n">token</span><span class="o">=</span><span class="n">access_token</span><span class="p">,</span> <span class="n">http_url</span><span class="o">=</span><span class="n">request_url</span><span class="p">)</span>
</span><span class="line"><span class="c"># Despite what the docs say, you need to generate a plaintext signature.</span>
</span><span class="line"><span class="n">oauth_request</span><span class="o">.</span><span class="n">sign_request</span><span class="p">(</span><span class="n">oauth2</span><span class="o">.</span><span class="n">SignatureMethod_PLAINTEXT</span><span class="p">(),</span> <span class="n">consumer</span><span class="p">,</span> <span class="n">access_token</span><span class="p">)</span>
</span><span class="line"><span class="n">headers</span> <span class="o">=</span> <span class="n">oauth_request</span><span class="o">.</span><span class="n">to_header</span><span class="p">(</span><span class="n">realm</span><span class="o">=</span><span class="s">&#39;api.fitbit.com&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">httplib</span>
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">httplib</span><span class="o">.</span><span class="n">HTTPSConnection</span><span class="p">(</span><span class="s">&#39;api.fitbit.com&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">connection</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="s">&#39;GET&#39;</span><span class="p">,</span> <span class="n">request_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span><span class="line"><span class="n">resp</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">json</span>
</span><span class="line"><span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I encountered a few difficulties in figuring this out:</p>

<ul>
  <li>For the authorize step, you need to use <code>www.fitbit.com</code> as the URL domain.
<code>api.fitbit.com</code> will NOT work.</li>
  <li>You need to <em>sign all requests with the access token.</em></li>
  <li>No, <code>oauth2.SignatureMethod_HMAC_SHA1</code> will <strong>NOT</strong> work. Yes, they explicitly
claim to use HMAC-SHA1 in the documentation. Don’t believe everything you
read. Use <a href="http://oauth.net/core/1.0/#anchor35">plaintext signatures</a> instead.</li>
  <li>Fitbit expects both the URI and Authorization header to be set, but
<code>oauth2</code> will only set <strong>ONE</strong> of them properly.
See <a href="https://github.com/candu/fitbit-crossfilter/commit/1d094cecaa6c78bc8d5c295a797d96b7e1687493">this commit message</a>
for more details.</li>
</ul>

<p>You can see the full implementation <a href="https://github.com/candu/fitbit-crossfilter/blob/master/fitbit_crossfilter/foo/lib/fitbit.py">here</a>, along with
<a href="https://github.com/candu/fitbit-crossfilter/blob/master/fitbit_crossfilter/foo/views/__init__.py">an example of its use</a>.</p>

<h3 id="crossfilter">crossfilter</h3>

<p>Square’s <a href="http://square.github.com/crossfilter/">crossfilter</a> is a JavaScript library for efficiently performing
<em>multidimensional range queries.</em> I’ve included an interactive example
<a href="#quick-demo">below</a>.</p>

<p>crossfilter uses two types of objects to <em>represent a multidimensional dataset:</em></p>

<ul>
  <li><strong>dimension:</strong> a map function that returns totally-ordered <em>dimension values</em>
(e.g. numbers, dates);</li>
  <li><strong>group:</strong> a reduce function on those dimension values.</li>
</ul>

<p>The <em>totally-ordered</em> part is essential, since that makes it possible to
perform range queries. A quick code snippet might help explain this further:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">L</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">N</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">M</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">L</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">i</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">M</span> <span class="o">*</span> <span class="p">(</span><span class="nx">N</span> <span class="o">-</span> <span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="nx">N</span><span class="p">)]);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">crossfilter</span><span class="p">(</span><span class="nx">L</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">d0</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="p">});</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">g0</span> <span class="o">=</span> <span class="nx">d0</span><span class="p">.</span><span class="nx">group</span><span class="p">();</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">d1</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="p">});</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">g1</span> <span class="o">=</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">group</span><span class="p">();</span>
</span><span class="line"><span class="nx">d0</span><span class="p">.</span><span class="nx">filterRange</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>At this point, we can <em>inspect the dimensions and groups</em> to understand the
effect of <code>filterRange()</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="o">&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">d1</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="kc">Infinity</span><span class="p">))</span>
</span><span class="line"><span class="s1">&#39;[[4,1],[3,1],[7,0],[6,0],[5,0]]&#39;</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">g1</span><span class="p">.</span><span class="nx">all</span><span class="p">())</span>
</span><span class="line"><span class="s1">&#39;[{&quot;key&quot;:0,&quot;value&quot;:3},{&quot;key&quot;:1,&quot;value&quot;:2}]&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note that the range <code>[3, 8]</code> is actually interpreted as the semi-open interval
$ [3, 8) $. Note also that the elements of <code>g1.all()</code> are of the form
<code>{key: k, value: v}</code> where <code>v</code> is the number of elements <code>x</code> with
<code>3 &lt;= x[0] &amp;&amp; x[0] &lt; 8 &amp;&amp; x[1] == k</code>.</p>

<h3 id="d3js">d3.js</h3>

<blockquote><p>D3.js is a JavaScript library for manipulating documents based on data.</p><footer><strong>D3.js</strong> <cite><a href="http://d3js.org/">d3js.org/&hellip;</a></cite></footer></blockquote>

<p>Using HTML, SVG, CSS, and JavaScript, you can build some pretty stunning
visualizations.
Again, check out the interactive example <a href="#quick-demo">below</a>. For more
examples, the <a href="https://github.com/mbostock/d3/wiki/Gallery">D3 Gallery</a> is
many kinds of awesome.</p>

<h3 id="a-quick-demo">A Quick Demo</h3>

<div id="quick-demo">
  <style type="text/css">
    .chart {
      display: inline-block;
      height: 151px;
      margin-bottom: 20px;
    }
    
    .reset {
      margin-left: 1em;
      font-size: smaller;
    }
    
    .background.bar {
      fill: #ccc;
    }
    
    .foreground.bar {
      fill: steelblue;
    }
    
    .axis path, .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }
    
    .axis text {
      font: 10px sans-serif;
    }
    
    .brush rect.extent {
      fill: steelblue;
      fill-opacity: .125;
    }
    
    .brush .resize path {
      fill: #eee;
      stroke: #666;
    }

    #chartA {
      width: 610px;
    }
    
    #chartB {
      width: 610px;
    }
  </style>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/Panic/fitbit-crossfilter/crossfilter.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/Panic/fitbit-crossfilter/d3.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/Panic/fitbit-crossfilter/chart.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/Panic/fitbit-crossfilter/demo.js"></script>
  <div id="charts">
    <div id="chartA" class="chart">
      <div class="title">A</div>
    </div>
    <div id="chartB" class="chart">
      <div class="title">B</div>
    </div>
  </div>
</div>

<p>If you’re viewing this through an RSS reader, the above demo won’t show
correctly. You can view it <a href="http://blog.savageevan.com/blog/2012/10/17/fitbit-apis-crossfilter-and-d3#quick-demo">on my blog</a>.</p>

<h2 id="insights-from-my-data">Insights From My Data</h2>

<p>You can see the live dashboard <a href="http://fitbit.savageevan.com/">here</a>. Some of the highlights:</p>

<ul>
  <li>During this tracking period, I was <em>most active during the 8-10 am and 6-9 pm
timeslots.</em> (The former was my morning walk to the employee shuttle; the
latter was the evening walk back plus <a href="http://soccerfours.com/">Soccer Fours</a>.</li>
  <li>The more sleep I get, the more bipolar my exercise habits become.</li>
  <li>Unlike Beau Gunderson, I’m not seeing a correlation between number of times
awoken and duration of sleep.</li>
  <li>There is, however, a clear positive correlation between steps per minute
and calories burned per minute, as expected.</li>
</ul>

<p>Again, you can play around with the dashboard <a href="http://fitbit.savageevan.com/">here</a>
to find patterns in my Fitbit data.</p>

<h2 id="how-to-use-fitbit-crossfilter">How To Use fitbit-crossfilter</h2>

<p>I’ve placed my live fitbit-crossfilter dashboard into demo mode, but <em>you can
fetch and view your data as follows.</em></p>

<p>First, you will need a Fitbit app <em>with Partner API access</em>; see
<a href="https://wiki.fitbit.com/display/API/Fitbit+Partner+API">this page</a> for more details on setting that up. Use the following
application settings:</p>

<ul>
  <li><strong>Application Type:</strong> Website</li>
  <li><strong>Callback URL:</strong> <code>http://localhost:9001/oauth</code></li>
  <li><strong>Default Access Type:</strong> Read-Only</li>
</ul>

<p>Now copy <code>settings.py.nopasswd</code> to create your settings file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>cp settings.py.nopasswd settings.py
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Edit the bottom of <code>settings.py</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="n">SYNC_ENABLED</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line"><span class="n">DEFAULT_USER</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line"><span class="n">FITBIT_CONSUMER_KEY</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">your</span> <span class="n">app</span> <span class="n">key</span><span class="o">&gt;</span>
</span><span class="line"><span class="n">FITBIT_CONSUMER_SECRET</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">your</span> <span class="n">app</span> <span class="n">secret</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Start the server, login, and sync your data:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>python manage.py runserver 9001
</span><span class="line"><span class="c"># visit localhost:9001/login in the browser to do the OAuth handshake</span>
</span><span class="line"><span class="c"># visit localhost:9001/sync-user-data in the browser to sync data</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When the syncing completes, you’ll be redirected to your dashboard.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Tracking for Panic: Another Dataset]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/14/self-tracking-for-panic-another-dataset/"/>
    <updated>2012-10-14T21:23:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/14/self-tracking-for-panic-another-dataset</id>
    <content type="html"><![CDATA[<p>In this post, I perform the same analyses presented in
<a href="http://blog.savageevan.com/blog/2012/10/09/self-tracking-for-panic-an-even-deeper-look/">my last post</a> using data from my second panic tracking period.
I then test whether my average alcohol and sugar consumption changed
measurably between the two tracking periods.</p>

<p>During the second tracking period, I gathered data using
<a href="https://github.com/candu/qs-counters">qs-counters</a>, a simple utility I built for reducing friction in
the recording process.</p>

<!-- more -->

<h2 id="the-usual-suspects">The Usual Suspects</h2>

<h3 id="linear-regression">Linear Regression</h3>

<p>During the second tracking period, <em>alcohol consumption remained
relatively constant</em>:</p>

<p><img src="https://lh4.googleusercontent.com/-Kha5L6BVqUo/UHxN-lFh_LI/AAAAAAAAADY/eVVLWJbYMaU/s640/qs-counters-alcohol.jpg" title="Alcohol Consumption" /></p>

<p>Sugar consumption is a different story, with a <em>pronounced negative trend</em>:</p>

<p><img src="https://lh6.googleusercontent.com/-MN60bkN-thg/UHxN_qhP-AI/AAAAAAAAADo/HXsmUbqEWnw/s640/qs-counters-sweets.jpg" title="Sugar Consumption" /></p>

<p>The evidence to suggest that <em>my alcohol and sugar consumption are linked</em> is
also much stronger now:</p>

<p><img src="https://lh5.googleusercontent.com/-9J_fMxZS2Co/UHxOAaijDbI/AAAAAAAAAD4/UDt5xjzZ-Lw/s640/qs-counters-alcohol-vs-sugar.jpg" title="Alcohol vs. Sugar Consumption" /></p>

<p>On the other hand, the previous-day alcohol effect seems to be
non-existent:</p>

<p><img src="https://lh6.googleusercontent.com/-8CPpr0mjczs/UHxOABjFKSI/AAAAAAAAADw/4sVdt2axAEs/s640/qs-counters-alcohol-today-vs-yesterday.jpg" title="Alcohol: Today vs. Yesterday" /></p>

<h3 id="fast-fourier-transform">Fast Fourier Transform</h3>

<p>With more data points, the FFT frequency amplitude plot is more muddled:</p>

<p><img src="https://lh4.googleusercontent.com/-1AeQyUEEW8o/UHxN90Wk75I/AAAAAAAAADM/eJs5x6UaQNI/s640/qs-counters-fft-frequencies.jpg" title="FFT Frequencies" /></p>

<p>The 2-day and 7-day effects previously “discovered” are nowhere to be
found.</p>

<h3 id="maximum-entropy-modelling">Maximum Entropy Modelling</h3>

<p>I didn’t record panic attacks during this tracking period. My previous
efforts reduced the severity and frequency of these attacks drastically,
enough so that the data here would have been extremely sparse.</p>

<p>In the absence of that data, I asked a different question:</p>

<blockquote><p>What features best predict my exercise patterns?</p></blockquote>

<p>Here are the top features from <code>MaxentClassifier</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">3.369 caffeine==True and label is 'no-exercise'
</span><span class="line">  -0.739 sweets==True and label is 'exercise'
</span><span class="line">   0.399 sweets==True and label is 'no-exercise'
</span><span class="line">  -0.201 alcohol==True and label is 'exercise'
</span><span class="line">   0.166 alcohol==True and label is 'no-exercise'
</span><span class="line">   0.161 relaxation==True and label is 'exercise'
</span><span class="line">  -0.092 relaxation==True and label is 'no-exercise'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The caffeine finding is misleading. On one of the two days where I entered
non-zero caffeine consumption, that was due to a <em>mistake in data entry.</em>
(Side note to self: all tools should include an undo feature!) Aside from
that, <em>sugar consumption appears to have the strongest negative effect on
exercise.</em></p>

<h2 id="students-t-test">Student’s t-test</h2>

<h3 id="what">What?</h3>

<p>Student’s t-test answers this question:</p>

<blockquote><p>Are these samples significantly different?</p></blockquote>

<p>More formally, the t-test answers a statistical question about normal
distributions: given
$ X \sim \mathcal{N}(\mu_X, \sigma_X^2) $ and
$ Y \sim \mathcal{N}(\mu_Y, \sigma_Y^2) $,
does $ \mu_X = \mu_Y $?</p>

<p>If we let $ Y $ be a known normal distribution centered at
rather than taking it from an empirical sample,
we also obtain a one-sample t-test for the null hypothesis
$ \mu_X = \mu_Y $.</p>

<h3 id="why">Why?</h3>

<p>In a self-tracking context, you might ask the following questions:</p>

<ul>
  <li>Did I improve significantly across tracking periods?</li>
  <li>Is my behavior consistent across tracking periods?</li>
</ul>

<p>Student’s t-test can help address both questions.</p>

<h3 id="the-data">The Data</h3>

<p>Before using Student’s t-test on my alcohol and sugar consumption data from
the two tracking periods, I <em>check whether these samples have a roughly
normal distribution.</em> The code for normality checking is
<a href="https://github.com/candu/quantified-savagery-files/blob/master/Panic/qs-counters/counters_normality.py">here</a>.</p>

<p>It helps to <em>visualize the histogram data first</em>:</p>

<p><img src="https://lh5.googleusercontent.com/-1sX3PJfuiAg/UHxdvv_-mkI/AAAAAAAAAEc/Rm7uknNlG7g/s640/recovery-journal-alcohol-histogram.jpg" title="Alcohol Histogram (recovery-journal)" />
<img src="https://lh5.googleusercontent.com/-9ScCbHMq4ls/UHxdu40NnPI/AAAAAAAAAEM/3SRyqPF_Bh8/s640/qs-counters-alcohol-histogram.jpg" title="Alcohol Histogram (qs-counters)" /></p>

<p><img src="https://lh3.googleusercontent.com/-10RnNsKZAS0/UHxdvzkHVhI/AAAAAAAAAEg/QCgl_8vd4Go/s640/recovery-journal-sweets-histogram.jpg" title="Sugar Histogram (recovery-journal)" />
<img src="https://lh6.googleusercontent.com/-c407cdWckp0/UHxdvMT5GJI/AAAAAAAAAEU/_xR3qO3ZMX0/s640/qs-counters-sweets-histogram.jpg" title="Sugar Histogram (qs-counters)" /></p>

<p>These don’t look particularly close to normal distributions, but it’s hard to
tell with discrete-valued data. For more evidence, I use the
<a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.shapiro.html">Shapiro-Wilk statistical normality test</a>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">alcohol, recovery-journal:  (0.944088339805603, 0.10709714889526367)
</span><span class="line">alcohol, qs-counters:  (0.8849299550056458, 4.6033787270971516e-07)
</span><span class="line">sugar, recovery-journal:  (0.722859263420105, 2.5730114430189133e-06)
</span><span class="line">sugar, qs-counters:  (0.8092769384384155, 8.38931979441071e-10)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The null hypothesis for Shapiro-Wilk is that the sample is normally distributed,
so these low p-values indicate the opposite: <em>my data isn’t normally distributed!</em>
Bad news for my attempt to use Student’s t-test here.</p>

<p>Nevertheless, I’ll barge ahead and run the t-test anyways, just to see what
that process looks like with <code>scipy.stats</code>. The code for t-testing is
<a href="https://github.com/candu/quantified-savagery-files/blob/master/Panic/qs-counters/counters_ttest.py">here</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">alcohol
</span><span class="line">==========
</span><span class="line">avg(A) = 3.26
</span><span class="line">avg(B) = 2.35
</span><span class="line">(t, p) = (2.0721, 0.0469)
</span><span class="line">
</span><span class="line">sweets
</span><span class="line">==========
</span><span class="line">avg(A) = 1.19
</span><span class="line">avg(B) = 1.23
</span><span class="line">(t, p) = (-0.1969, 0.8453)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If the t-test were useful for this data, it would show that <em>my alcohol
consumption was significantly lower during the second tracking period.</em>
With such a large drop in average consumption, I’m willing to say that
this is a reasonable assertion.</p>

<h2 id="a-question-of-motivation">A Question Of Motivation</h2>

<p>By this point, you might be asking:</p>

<blockquote><p>Why did I even bother with all this analysis when I have so few data points?</p></blockquote>

<p>Good question! The short answer? It’s a <em>learning opportunity.</em> The longer
answer is backed by a chain of reasoning:</p>

<ul>
  <li>As data collection gets easier, <em>the value of data analysis goes up;</em></li>
  <li>Statistical analysis is <em>hard to impossible</em> for the average user, so <em>they
will use whatever tools they can get</em> from app markets and device vendors;</li>
  <li>Most of those tools are built by people who, by trade, are software
developers;</li>
  <li>Most developers, even good ones, are typically not that great in the
statistics and data analysis department;</li>
  <li>Therefore, as a developer with plans to build self-tracking tools, <em>I owe it
to myself and my future users to know this stuff better.</em></li>
</ul>

<p>As it turns out, data analysis is hard, period. Picking the right tools is
difficult, and picking the wrong ones (like the t-test above!) <em>can easily
produce results that appear to be meaningful but are not.</em> In a self-tracking
scenario, this problem is often made worse by <em>smaller datasets</em> and <em>uncontrolled
conditions.</em></p>

<h2 id="thought-experiments">Thought Experiments</h2>

<h3 id="repeat-yourself-a-reflection-on-self-tracking-and-science">Repeat Yourself: A Reflection On Self-Tracking And Science</h3>

<p>One criticism often launched at the Quantified Self community is that
self-tracking is not <em>scientific</em> enough. For an interesting discussion
of the merits and drawbacks of presenting self-experimentation as science,
I highly recommend the <a href="http://www.escholarship.org/uc/item/2xc2h866#page-36">Open Peer Commentary section</a>
of <a href="http://www.escholarship.org/uc/item/2xc2h866">this paper</a>. Some of
the broader themes in this debate are also summarized
<a href="http://quantifiedself.com/2012/05/qs-101-the-science-of-self-experimentation/">here</a> on
the Quantified Self website.</p>

<p>To be fair, there are a host of valid concerns here. For starters,
<em>it’s very difficult to impose a controlled environment when self-tracking.</em>
In a Heisenbergian twist, being mindful of your behavior could modify the
behavior you’re trying to measure; this effect is discussed briefly by
<a href="http://www.escholarship.org/uc/item/2xc2h866#page-45">Simon Moore and Joselyn Sellen</a>.</p>

<p>Additionally, a sample population of one is meaningless. Will your
approaches work for others? Did you gather the data in a consistent
manner? Are your sensors working properly? The usual antidote is to
increase the sample population, but then you have another set of problems.
Are all participants using the same sensors in the same way? Are they all
running the same analyses?</p>

<p>From watching several presentations about self-tracking, there is a
curious pattern:</p>

<blockquote><p>Like any other habit, the tracking habit is hard to maintain.</p></blockquote>

<p>As a corollary, many tracking experiments consist of multiple
tracking periods, these punctuated by relapses of the tracking habit.</p>

<p>Many people interpret these relapses as failures, but they’re actually
<em>amazing scientific opportunities!</em> These are chances to re-run the same
experiment, verifying or confounding results from your earlier tracking
periods.</p>

<h3 id="the-predictive-modelling-game">The Predictive Modelling Game</h3>

<p>Predictive modelling could be an interesting component of a habit
modification system. Suppose I want to exercise more regularly. First, 
I <em>select several features that seem likely to influence my exercise
patterns</em>, such as:</p>

<ul>
  <li>Am I travelling? Where am I?</li>
  <li>What foods did I eat? When? How much?</li>
  <li>How positive or negative is my mood?</li>
  <li>Did I schedule time today to exercise?</li>
  <li>Did I exercise yesterday? How much?</li>
</ul>

<p>Next, I <em>gather some baseline data</em> by tracking these features along with
my exercise patterns. I then use that data to <em>train a classifier.</em>
Finally, I keep tracking the features, ask the classifier to predict my
exercise activity, and play a simple game with myself:</p>

<blockquote><p>Can I beat the classifier?</p></blockquote>

<p>That is, <em>can I exercise more often than my existing behavior patterns
suggest I should?</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Tracking For Panic: A Deeper Look]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/09/self-tracking-for-panic-an-even-deeper-look/"/>
    <updated>2012-10-09T07:00:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/09/self-tracking-for-panic-an-even-deeper-look</id>
    <content type="html"><![CDATA[<p>In this post, I apply three statistical and machine learning tools to my panic
recovery journal data: linear regression/correlation, the Fast Fourier
Transform, and maximum entropy modelling.</p>

<!-- more -->

<h2 id="first-a-word-about-tools">First, A Word About Tools</h2>

<blockquote><p>I suppose it is tempting, if the only tool you have is a hammer, to treat<br />everything as if it were a nail.</p><footer><strong>Abraham Maslow</strong> <cite>The Psychology of Science: A Reconnaissance</cite></footer></blockquote>

<h2 id="now-a-necessary-disclaimer">Now, A Necessary Disclaimer</h2>

<p>My experiment has fewer than 50 samples, which is <em>nowhere near enough to draw
statistically significant conclusions</em>. That’s not the point. The primary
purpose of this post is to <em>demonstrate analysis techniques by example</em>. These
same methods can be wielded on larger datasets, where they are much more
useful.</p>

<h2 id="getting-ready">Getting Ready</h2>

<p>To follow along with the examples here, you’ll need
the excellent Python toolkits
<a href="http://scipy.org/">scipy</a>,
<a href="http://matplotlib.org/">matplotlib</a>, and
<a href="http://nltk.org/">nltk</a>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ pip install scipy nltk matplotlib</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="linear-regression">Linear Regression</h2>

<h3 id="what">What?</h3>

<p>Linear regression answers this question:</p>

<blockquote><p>What is the line that most closely fits this data?</p></blockquote>

<p>Given points $ P_i = (x_i, y_i) $, the goal is to find the line
$ y = mx + b $ such that some error function is minimized.
A common one is the least squares function:</p>

<script type="math/tex; mode=display">
f(m, b) = \sum_{i} \left(y_i - (mx_i + b)\right)^2
</script>

<p>The
<a href="http://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient">Pearson correlation coefficient</a> $ R $ and
<a href="http://www.lstr.net/blog/2008/07/08/p-values-explained-well/">p-value</a> $ p $
are also useful here, as they measure <em>correlation</em> and <em>statistical
significance</em>.</p>

<h3 id="why">Why?</h3>

<p>In a self-tracking context, you might ask the following questions:</p>

<ul>
  <li>Have I been exercising more over time?</li>
  <li>Does exercise affect mood? By how much and in what direction?</li>
</ul>

<p>Linear regression can help address both questions. However, it can only find
<em>linear</em> relationships between datasets. Many dynamic processes are <em>locally linear</em>
but not <em>globally linear</em>. For instance, there are practical limits to how
much you can exercise in a day, so no linear model with non-zero slope will
accurately capture your exercise duration for all time.</p>

<h3 id="the-data">The Data</h3>

<p>You can see the code for this analysis <a href="https://github.com/candu/quantified-savagery-files/blob/master/Panic/recovery-journal/food_linregress.py">here</a>. I look at only the first
31 days, that being the largest consecutive run for which I have data.</p>

<p><img src="https://lh6.googleusercontent.com/-plD2webhfrY/UHXc4xHxAGI/AAAAAAAAACM/2X488DqHKms/s640/alcohol.jpg" title="Alcohol Consumption" /></p>

<p>My alcohol consumption did not decrease over time, but rather stayed fairly
constant: with $ R = 0.0098 $, there is no correlation between alcohol and time.</p>

<p><img src="https://lh5.googleusercontent.com/-UCZKlx5l5RI/UHXc6u8h2vI/AAAAAAAAACs/CWcJjS09dS8/s640/sweets.jpg" title="Sugar Consumption" /></p>

<p>Sugar consumption is a similar story: although the best-fit slope is slightly
negative, $ R = -0.0671 $ indicates no correlation over time. It seems that my
alcohol and sugar consumption were not modified significantly over the tracking
period.</p>

<p><img src="https://lh5.googleusercontent.com/-Ssz89uoE-EA/UHXc5DvHf0I/AAAAAAAAACU/o0C_PJpmZcM/s640/alcohol-and-sugar.jpg" title="Alcohol and Sugar Consumption" /></p>

<p>I decided to graph alcohol and sugar together. It looks like they might be
related, as the peaks in each seem to coincide on several occasions. Let’s
test this hypothesis:</p>

<p><img src="https://lh6.googleusercontent.com/-iCO9umA8L8s/UHXc5vImvhI/AAAAAAAAACc/d82SCqFs-qI/s640/alcohol-today-vs-yesterday.jpg" title="Alcohol vs. Sugar Consumption" /></p>

<p>The positive slope is more pronounced this time, but
$ R = 0.1624 $ still indicates a small degree of correlation. We can also look
at the p-value: with $ p = 0.3827 $, it is fairly easy to write this off as
a random effect.</p>

<p>Finally, let’s take another look at a question from
<a href="http://blog.savageevan.com/blog/2012/10/08/self-tracking-for-panic-a-deeper-look/">a previous blog post</a>:</p>

<blockquote><p>On days where I drink heavily, do I drink less the day after?</p></blockquote>

<p><img src="https://lh6.googleusercontent.com/-iCO9umA8L8s/UHXc5vImvhI/AAAAAAAAACc/d82SCqFs-qI/s640/alcohol-today-vs-yesterday.jpg" title="Alcohol Consumption: Today vs. Yesterday" /></p>

<p>There’s a negative slope there, but the correlation and p-value statistics are
in the same uncertain zone as before. I likely need more data to investigate
these last two effects properly.</p>

<h2 id="fast-fourier-transform">Fast Fourier Transform</h2>

<h3 id="what-1">What?</h3>

<p>Fourier analysis answers this question:</p>

<blockquote><p>What frequencies comprise this signal?</p></blockquote>

<p>Given a sequence $ x_n $, a
<a href="http://en.wikipedia.org/wiki/Discrete_Fourier_transform">Discrete Fourier Transform</a> (DFT)
computes</p>

<script type="math/tex; mode=display">
X_k = \sum_{n=0}^{N-1} x_n \cdot e^{\frac{-2 i \pi k n}{N}}
</script>

<p>The $ X_k $ encode the amplitude and phase of frequencies
$ \frac{f k}{N} $ Hz, where $ T $ is the time between samples
and $ f = 1 / T $ is the sampling frequency.</p>

<p>As described here, the DFT requires $ \mathcal{O}(N^2) $ time to
compute. The <a href="http://mathworld.wolfram.com/FastFourierTransform.html">Fast Fourier Transform</a> (FFT) uses
divide-and-conquer on this sum of complex exponentials to compute the DFT in
$ \mathcal{O}(N \log N) $ time. 
<a href="http://groups.csail.mit.edu/netmit/sFFT/">Further speedups are possible</a> for
real-world signals that are sparse in the frequency domain.</p>

<h3 id="why-1">Why?</h3>

<p>In a self-tracking context, you might ask the following questions:</p>

<ul>
  <li>Do I have regular exercising patterns?</li>
  <li>Do these patterns cycle weekly? bi-weekly? monthly?</li>
  <li>How much does my amount of exercise fluctuate during a cycle?</li>
</ul>

<p>With the FFT, Fourier analysis can help address these questions. However, it
can only find <em>periodic</em> effects. Unlike linear regression, it does not help
find <em>trends</em> in your data.</p>

<h3 id="the-data-1">The Data</h3>

<p>You can see the code for this analysis <a href="https://github.com/candu/quantified-savagery-files/blob/master/Panic/recovery-journal/food_fft.py">here</a>. Again, I look at the
first 31 days to ensure that the frequency analysis is meaningful.</p>

<p><img src="https://lh5.googleusercontent.com/-8j00ob_Ji-Y/UHXc67MQVpI/AAAAAAAAAC0/n3akVSjtRHs/s640/fft-frequencies.jpg" title="Frequency Strengths" /></p>

<p>There are some apparent maxima there, but it’s hard to tell what they
mean. Part of the difficulty is that <em>these are frequencies rather than
period lengths</em>, so let’s deal with that:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ python food_fft.py 
</span><span class="line">food_fft.py:32: RuntimeWarning: divide by zero encountered in divide
</span><span class="line">  for strength, phase, period in sorted(zip(FS, FP, 1.0 / Q))[-5:]:
</span><span class="line">[2.21 days] 3.0461 (phase=-0.67 days)
</span><span class="line">[-2.21 days] 3.0461 (phase=-0.67 days)
</span><span class="line">[7.75 days] 3.1116 (phase=-3.67 days)
</span><span class="line">[-7.75 days] 3.1116 (phase=-3.67 days)
</span><span class="line">food_fft.py:33: RuntimeWarning: invalid value encountered in double_scalars
</span><span class="line">  phase_days = period * (phase / (2.0 * math.pi))
</span><span class="line">[inf days] 18.1401 (phase=nan days)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you’re not familiar with the Fourier transform,
the last line might be a bit mysterious. That corresponds to $ X_0 $, which
is just the sum of the original samples:</p>

<script type="math/tex; mode=display">
X_0 = \sum_{n=0}^{N-1} x_n \cdot e^0 = \sum_{n=0}^{N-1} x_n
</script>

<p>Other than that, the most pronounced cycles have period lengths of
2.21 days and 7.75 days. The former might be explained by a <em>see-saw drinking
pattern</em>, whereas the latter is likely related to the day-of-week effects
we saw <a href="http://blog.savageevan.com/blog/2012/10/08/self-tracking-for-panic-a-deeper-look/">in the previous post</a>.</p>

<p>Which day of the week? The phase is -3.67 days, and our sample starts on a
Monday, placing the first peak on Thursday. The period is slightly longer than
a week, though, and the data runs for 31 days, so these peaks gradually shift
to <em>cover the weekend</em>.</p>

<p>There are two caveats:</p>

<ol>
  <li>I have no idea whether a Fourier coefficient of about 3 is significant
here. If it isn’t, I’m grasping at straws.</li>
  <li>Again, the small amount of data means the frequency domain data is sparse.
To accurately test for bi-daily or weekly effects, I <em>need more
fine-grained period lengths.</em></li>
</ol>

<h2 id="maximum-entropy-modelling">Maximum Entropy Modelling</h2>

<h3 id="what-2">What?</h3>

<p>Maximum entropy modelling answers this question:</p>

<blockquote><p>Given observations of a random process, what is the most likely model<br />for that random process?</p></blockquote>

<p>Given a discrete probability distribution $ p(X = x_k) = p_k $, the entropy
of this distribution is given by</p>

<script type="math/tex; mode=display">
H(p) = \sum - p_k \log p_k
</script>

<p>(Yes, I’m conflating the concepts of
<a href="http://en.wikipedia.org/wiki/Random_variable">random variables</a> and
<a href="http://en.wikipedia.org/wiki/Probability_distribution">probability distributions</a>.
If you knew that, you probably don’t need this explanation.)</p>

<p>This can be thought of as the <em>number of bits needed to encode outcomes
in this distribution</em>. For instance, if I have a double-headed coin, I need
no bits: I already know the outcome. Given a fair coin, though, I need one bit:
heads or tails?</p>

<p>After repeated sampling, we get observed expected values for $ p_k $;
let these be $ p’_k $. Since we would like the model to <em>accurately
reflect what we already know</em>, we impose the constraints $ p_k = p’_k $.
The maximum entropy model is the model that also maximizes $ H(p’) $.</p>

<p>This model encodes what is known
<em>while remaining maximally noncommittal on what is unknown.</em></p>

<p>Adam Berger (CMU) provides <a href="http://www.cs.cmu.edu/afs/cs/user/aberger/www/html/tutorial/node2.html#SECTION00011000000000000000">a more concrete example</a>.
If you’re interested in learning more, his tutorial is highly recommended
reading.</p>

<h3 id="why-2">Why?</h3>

<p>In a self-tracking context, you might ask the following questions:</p>

<ul>
  <li>Which treatments have the greatest effect in preventing panic attacks?
Which have the least effect?</li>
  <li>Today I exercised for at least 30 minutes and had four drinks. Am I
likely to get a panic attack?</li>
  <li>What treatments should I try next?</li>
</ul>

<p>Maximum entropy modelling can help address these questions. It is often
used to <em>classify unseen examples</em>, and would be fantastic in a
<a href="http://100plus.com/2012/09/qs-data-commons/">data commons</a> scenario
with enough data to provide recommendations to users. </p>

<h3 id="feature-extraction">Feature Extraction</h3>

<p>Since I’m now effectively building a classifier, there’s an additional step.
I need features for my classifier, which I extract from my existing datasets:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">train_set = []
</span><span class="line">dates = set(W).intersection(F)
</span><span class="line">for ds in dates:
</span><span class="line">  try:
</span><span class="line">    ds_data = {
</span><span class="line">      'relaxation' : bool(int(W[ds]['relaxation'])),
</span><span class="line">      'exercise' : bool(int(W[ds]['exercise'])),
</span><span class="line">      'caffeine' : int(F[ds]['caffeine']) &gt; 0,
</span><span class="line">      'sweets' : int(F[ds]['sweets']) &gt; 1,
</span><span class="line">      'alcohol' : int(F[ds]['alcohol']) &gt; 4,
</span><span class="line">      'supplements' : bool(int(F[ds]['supplements']))
</span><span class="line">    }
</span><span class="line">  except (ValueError, KeyError):
</span><span class="line">    continue
</span><span class="line">  had_panic = P.get(ds) and 'panic' or 'no-panic'
</span><span class="line">  train_set.append((ds_data, had_panic))</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note that the features listed here are binary. I use my daily goals as
thresholds on caffeine, sweets, and alcohol.</p>

<p>(If you know how to get float-valued features working with NLTK, let me know!
Otherwise, there’s always <a href="http://www.cs.utah.edu/~hal/megam/">megam</a> or
<a href="http://www-i6.informatik.rwth-aachen.de/web/Software/YASMET.html">YASMET</a>.</p>

<h3 id="the-data-2">The Data</h3>

<p>You can see the code for this analysis <a href="https://github.com/candu/quantified-savagery-files/blob/master/Panic/recovery-journal/panic_maxent.py">here</a>.
This time I don’t care about having consecutive dates, so I use all of the
samples.</p>

<p>After building a <code>MaxentClassifier</code>, I print out the most informative features
with <code>show_most_informative_features()</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-2.204 exercise==True and label is 'panic'
</span><span class="line">   1.821 caffeine==True and label is 'panic'
</span><span class="line">  -0.867 relaxation==True and label is 'panic'
</span><span class="line">   0.741 alcohol==True and label is 'panic'
</span><span class="line">  -0.615 caffeine==True and label is 'no-panic'
</span><span class="line">  -0.537 supplements==True and label is 'panic'
</span><span class="line">   0.439 sweets==True and label is 'panic'
</span><span class="line">   0.430 exercise==True and label is 'no-panic'
</span><span class="line">   0.284 relaxation==True and label is 'no-panic'
</span><span class="line">   0.233 supplements==True and label is 'no-panic'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Exercise, relaxation breathing, and vitamin supplements help with panic.
Caffeine, alcohol, and sweets do not. I knew that already, but this suggests 
<em>which treatments or dietary factors have greatest impact.</em></p>

<p>Let’s consider the supplements finding more closely. Of the 45 days, I took
supplements on all but two. It’s <em>dangerous</em> to draw any conclusions from a
feature for which there are very few negative samples.
This points out some important points about data analysis:</p>

<ul>
  <li><strong>Know your data</strong>: otherwise, you may <em>ascribe undue meaning to outliers or noise.</em></li>
  <li><strong>Know your features:</strong> supplements are probably not a good feature here.
A <em>feature inclusion threshold</em> on number of positive and negative samples 
might be helpful here.</li>
  <li><strong>Beware magic:</strong> even when you understand their inner workings, <em>machine
learning algorithms can produce results that are difficult to interpret.</em></li>
</ul>

<h2 id="up-next">Up Next</h2>

<p>In my next post, I look at a panic recovery dataset gathered using
<a href="https://github.com/candu/qs-counters">qs-counters</a>, a simple utility I built to reduce friction in
self-tracking. I perform these same three analyses on the
<a href="https://github.com/candu/quantified-savagery-files/tree/master/Panic/qs-counters">qs-counters dataset</a>, then compare it to the
<a href="https://github.com/candu/quantified-savagery-files/tree/master/Panic/recovery-journal">recovery-journal dataset</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Tracking For Panic: A bash-ful Look At Some Data]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/08/self-tracking-for-panic-a-deeper-look/"/>
    <updated>2012-10-08T10:00:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/08/self-tracking-for-panic-a-deeper-look</id>
    <content type="html"><![CDATA[<p>In this post, I perform initial exploratory analysis on my panic recovery
journal data using basic UNIX/bash commands.</p>

<!-- more -->

<h2 id="unix-bash-youre-not-serious-right">UNIX? bash? You’re not serious, right?</h2>

<p>Most of the data-centric Quantified Self talks I’ve seen focus on more
complicated methods, including:</p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Linear_regression">linear regression</a>, which <em>identifies gradual trends</em>;</li>
  <li><a href="http://en.wikipedia.org/wiki/Fast_Fourier_transform">FFT</a>, which <em>identifies periodic effects</em>;</li>
  <li><a href="http://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient">Pearson’s r</a>, which <em>measures correlation between datasets</em>;</li>
  <li><a href="http://en.wikipedia.org/wiki/Student's_t-test">t-test</a>, which <em>measures difference between datasets</em>.</li>
</ul>

<p>These are extremely powerful tools to have at your disposal. Better yet,
many languages have community-contributed libraries that provide these
tools out-of-the-box. For instance, Python’s <a href="LINK">scipy</a>
offers <a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.linregress.html">linregress</a>
for performing linear regression.</p>

<p>That said, these tools rely on mathematics that is <em>opaque</em> to many software
developers. Even if you don’t need to know how they work to use them, you need
some knowledge of <em>what they do</em> and <em>where they are most appropriate</em>.
Statistical tests in particular often have <em>strong preconditions</em> for use:</p>

<blockquote><p>Each of the two populations being compared should follow a normal distribution.</p><footer><strong>Wikipedia</strong> <cite><a href="http://en.wikipedia.org/wiki/Student%27s_t-test">Student&#8217;s T-test</a></cite></footer></blockquote>

<p>Even if you pick the right tool, there’s still <em>fear associated with losing
control</em>. These tools are not hammers and screwdrivers but magic
wands, and <a href="http://www.flickr.com/photos/wishingline/7162517642/">we are terrible magicians</a>.</p>

<h3 id="a-word-on-exploratory-analysis">A Word On Exploratory Analysis</h3>

<p>I mentioned that this post would demonstrate <em>exploratory analysis</em>. This is
a mode of analysis where you explore your data, play around with it a bit,
grab some low-hanging analytical fruit. You don’t necessarily need higher
mathematics. Regular counts and averages will do. You’re not looking for
ironclad proof, but rather for <em>suggestions</em>.</p>

<blockquote><p>What does this data suggest?</p></blockquote>

<p>This is an important question. Put this way, <em>there is no “right” or “wrong”
way to analyze your data</em>. UNIX tools fit in nicely here, because you can
piece them together and pretty quickly get some useful insights. Better yet,
since you understand what you just did, you can explain it to someone else.
Analysis becomes a <em>demystified</em> and <em>shareable</em> process.</p>

<p>Exploratory analysis is also a <em>great entry point</em> to deeper and more directed
analysis. As you work with the data, you ask more complicated questions. Eventually these
questions exceed the sophistication of your tools, so you look for better
tools. You might not deeply understand the better tools, but at least you’ve
worked with the data a bit. You can <em>perform basic sanity checks</em> when these
better tools turn up results you don’t expect.</p>

<h2 id="the-data">The Data</h2>

<p>I took my paper recovery journal logs:</p>

<p><img src="https://lh6.googleusercontent.com/-TDKFRsDfutE/UHNEPJReCOI/AAAAAAAAABU/q0sWUwRbPoE/s640/IMG_20121005_171146_426.jpg" title="A page from my journal" /></p>

<p>and manually converted them to handy CSV files:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">date,relaxation,exercise,diet,supplements
</span><span class="line">...
</span><span class="line">2012-03-12,0,0,1,1
</span><span class="line">2012-03-13,1,0,1,1
</span><span class="line">2012-03-14,1,0,0,1
</span><span class="line">2012-03-15,1,1,1,1
</span><span class="line">2012-03-16,1,1,1,1
</span><span class="line">2012-03-17,1,1,0,1
</span><span class="line">2012-03-18,0,1,0,1
</span><span class="line">...</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Where did all those different treatments go? I didn’t end up using most of
them. Making nine parallel habit changes is difficult, so I rapidly converged
on a subset of four:</p>

<ul>
  <li>relaxation breathing;</li>
  <li>daily exercise;</li>
  <li>dietary modifications; and</li>
  <li>vitamin supplements.</li>
</ul>

<p>Why manual input? There wasn’t enough data to make
<a href="http://code.google.com/p/tesseract-ocr/">OCR</a>
worthwhile:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd recovery-journal
</span><span class="line">$ wc -l * | grep total
</span><span class="line">      41 exercise-record
</span><span class="line">      46 food-diary
</span><span class="line">       8 panic-log
</span><span class="line">      46 weekly-practice-record
</span><span class="line">     141 total</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can view and download the raw data files
<a href="https://github.com/candu/quantified-savagery-files/tree/master/Panic/recovery-journal">here</a>.</p>

<h2 id="common-operations">Common Operations</h2>

<p>These operations appear several times in the UNIX one-liners below, so let’s go over
them quickly.</p>

<p>To lop off the CSV column name header:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tail -n+2</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To extract field <span>$ n $</span> from a CSV file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cut -d',' -f$n</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To tabulate counts in descending order:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sort | uniq -c | sort -rn</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To sum a series of numbers:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">awk '{sum+=$1} END {print sum}'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To get the day before <code>$ds</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ts=$(date -j -f "%Y-%m-%d" $ds "+%s"); tsprev=$(echo "$ts - 86400" | bc); dsprev=$(date -j -f "%s" $tsprev "+%Y-%m-%d");</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="and-now-the-main-show">And Now, The Main Show</h2>

<p>Let’s start by looking at my weekly practice record:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ for a in [01] 1; do for b in [01] 1; do for c in [01] 1; do for d in [01] 1; do count=$(grep -E ",$a,$b,$c,$d$" weekly-practice-record | wc -l); echo $a $b $c $d $count; done; done; done; done | tr ' ' '\t'
</span><span class="line">[01]    [01]    [01]    [01]    45
</span><span class="line">[01]    [01]    [01]    1       43
</span><span class="line">[01]    [01]    1       [01]    22
</span><span class="line">[01]    [01]    1       1       21
</span><span class="line">[01]    1       [01]    [01]    32
</span><span class="line">[01]    1       [01]    1       31
</span><span class="line">[01]    1       1       [01]    16
</span><span class="line">[01]    1       1       1       16
</span><span class="line">1       [01]    [01]    [01]    36
</span><span class="line">1       [01]    [01]    1       34
</span><span class="line">1       [01]    1       [01]    19
</span><span class="line">1       [01]    1       1       18
</span><span class="line">1       1       [01]    [01]    26
</span><span class="line">1       1       [01]    1       25
</span><span class="line">1       1       1       [01]    14
</span><span class="line">1       1       1       1       14</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I tracked myself for 45 days. During that time, I followed all four treatments
on 14 days. In order from most to least regular:</p>

<ul>
  <li>vitamin supplements (43 days);</li>
  <li>relaxation breathing (36 days);</li>
  <li>daily exercise (32 days);</li>
  <li>dietary modifications (22 days).</li>
</ul>

<p>I followed both the exercise and diet treatments for only 16 of 45 days! Right away, I
have a question for further inquiry:</p>

<blockquote><p>What was so hard about those two treatments?</p></blockquote>

<h3 id="exercise">Exercise</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ tail -n+2 exercise-record | cut -d',' -f2 | sort | uniq -c | sort -rn | head -5
</span><span class="line">  11 16:00
</span><span class="line">   8 20:00
</span><span class="line">   3 15:00
</span><span class="line">   3 14:00
</span><span class="line">   3 12:00</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>My most common exercise times were 4pm and 8pm. What was I doing at those times?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ grep 16:00 exercise-record | cut -d',' -f3 | sort | uniq -c | sort -rn | head -1
</span><span class="line">   9 conditioning
</span><span class="line">$ grep 20:00 exercise-record | cut -d',' -f3 | sort | uniq -c | sort -rn | head -1
</span><span class="line">   6 soccer</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Aha! 4pm was my scheduled gym time at work, and 8pm was when I went for
<a href="http://soccerfours.com/">weekly pickup soccer</a>. Both were regularly scheduled activities.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ grep -E "(00|01|02|03|04|05|06|07|08|09|10|11):00" exercise-record | wc -l
</span><span class="line">       7
</span><span class="line">$ grep -E "(12|13|14|15|16|17|18|19|20|21|22|23):00" exercise-record | wc -l
</span><span class="line">       33</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I rarely exercise in the morning, which might be okay: physical performance is
<a href="http://online.wsj.com/article/SB10000872396390444180004578018294057070544.html">higher in the afternoon</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ tail -n+2 exercise-record | cut -d',' -f3 | sort | uniq -c | sort -rn
</span><span class="line">  15 conditioning
</span><span class="line">   7 soccer
</span><span class="line">   6 walking
</span><span class="line">   6 cycling
</span><span class="line">   2 running
</span><span class="line">   2 dancing
</span><span class="line">   1 swimming
</span><span class="line">   1 longboarding</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s not surprising to see gym conditioning sets and soccer as my top
activities, but walking and cycling aren’t far behind.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ tail -n+2 exercise-record | cut -d',' -f4 | sort | uniq -c | sort -rn
</span><span class="line">  20 30
</span><span class="line">  11 60
</span><span class="line">   4 45
</span><span class="line">   2 40
</span><span class="line">   2 240
</span><span class="line">   1 120</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I most commonly exercised for 30-60 minutes, with infrequent longer blocks
of activity. What was I doing in those longer blocks?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ grep -E ",(120|240)$" exercise-record 
</span><span class="line">2012-01-27,20:00,dancing,120
</span><span class="line">2012-01-29,10:00,walking,240
</span><span class="line">2012-02-11,12:00,walking,240</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When else was I dancing?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ grep dancing exercise-record
</span><span class="line">2012-01-27,20:00,dancing,120
</span><span class="line">2012-02-03,21:00,dancing,30</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Looking at my calendar, these blocks are easily identified:</p>

<p><img src="https://lh6.googleusercontent.com/-BMXU2Ek3Ng0/UHNJnPz-bqI/AAAAAAAAABw/3vSmmAKQzQo/s800/Screen%2520Shot%25202012-10-08%2520at%25205.45.17%2520PM.jpg" title="Jan 27, 2012" />
<img src="https://lh4.googleusercontent.com/-EWShEmAoYPc/UHNJnuc6eGI/AAAAAAAAAB4/nWSI-zqtp_U/s800/Screen%2520Shot%25202012-10-08%2520at%25205.45.37%2520PM.jpg" title="Feb 03, 2012" /></p>

<p>Having fun is great for my health!</p>

<h3 id="diet">Diet</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ for i in $(seq 2 5); do count=$(cut -d',' -f$i food-diary | awk '{ sum+=$1} END {print sum}'); name=$(head -1 food-diary | cut -d',' -f$i); printf "%12s\t%s\n" $name $count; done
</span><span class="line">    caffeine    6
</span><span class="line">      sweets    48
</span><span class="line">     alcohol    140
</span><span class="line"> supplements    42</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I nearly eliminated caffeine during this period! By the time I started keeping the log,
I’d already started to reduce my consumption. On average, I had just over one sweet per day.
More troubling is alcohol, with an average of 3.1 drinks/day. Let’s take a closer look
at my drinking patterns.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ tail -n+2 food-diary | cut -d',' -f4 | sort | uniq -c | sort -rn
</span><span class="line">  12 4
</span><span class="line">   9 2
</span><span class="line">   7 1
</span><span class="line">   6 5
</span><span class="line">   3 3
</span><span class="line">   2 8
</span><span class="line">   2 6
</span><span class="line">   2 0
</span><span class="line">   2</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>My most common daily drinking amounts were 1, 2, and 4 drinks per day. It was
very rare for me to go a day without drinking any alcohol. More alarmingly,
<a href="http://en.wikipedia.org/wiki/Binge_drinking#Definition">binge drinking</a> counts for <em>over 40% of my alcohol consumption!</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ tail -n+2 food-diary | while read line; do weekday=$(date -j -f "%Y-%m-%d" $(echo $line | cut -d',' -f1) "+%a"); alcohol=$(echo $line | cut -d',' -f4); echo $weekday $alcohol; done &gt; drinking.log
</span><span class="line">$ for weekday in Mon Tue Wed Thu Fri Sat Sun; do count=$(grep $weekday drinking.log | cut -d' ' -f2 | awk '{ sum+=$1} END {print sum}'); echo $count $weekday; done | sort -rn
</span><span class="line">28 Wed
</span><span class="line">27 Sat
</span><span class="line">23 Mon
</span><span class="line">20 Sun
</span><span class="line">19 Fri
</span><span class="line">15 Tue
</span><span class="line">8 Thu</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I drank most on Wednesdays and Saturdays; Mondays were also major drinking days,
which is surprising! By contrast, I drank much less than average on Thursdays.
When I narrow in on binge drinking, the pattern shifts slightly:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ grep -E "(5|6|7|8)$" drinking.log | cut -d' ' -f1 | sort | uniq -c | sort -rn
</span><span class="line">   4 Sat
</span><span class="line">   3 Sun
</span><span class="line">   2 Wed
</span><span class="line">   1 Fri</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Wednesday is still an offender, but the weekends are clear culprits. <em>80% of my
binge drinking days fell on weekends.</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ tail -n+2 food-diary | cut -d',' -f1,4 | grep -E "(5|6|7|8)$" | while read line; do ds=$(echo $line | cut -d',' -f1); ts=$(date -j -f "%Y-%m-%d" $ds "+%s"); ts_next=$(echo "$ts + 86400" | bc); ds_next=$(date -j -f "%s" $ts_next "+%Y-%m-%d"); echo $line $(grep $ds_next food-diary | cut -d',' -f1,4); done
</span><span class="line">2012-01-21,5 2012-01-22,5
</span><span class="line">2012-01-22,5 2012-01-23,1
</span><span class="line">2012-01-28,8 2012-01-29,2
</span><span class="line">2012-02-01,6 2012-02-02,0
</span><span class="line">2012-02-04,5 2012-02-05,3
</span><span class="line">2012-02-10,6 2012-02-11,4
</span><span class="line">2012-02-12,5 2012-02-13,3
</span><span class="line">2012-03-14,8 2012-03-15,0
</span><span class="line">2012-03-17,5 2012-03-18,5
</span><span class="line">2012-03-18,5 2012-03-19,4</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Among days where I had 5 or more drinks, I had an average of 2.7 drinks the next day.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ tail -n+2 food-diary | cut -d',' -f1,4 | grep -E "(0|1)$" | while read line; do ds=$(echo $line | cut -d',' -f1); ts=$(date -j -f "%Y-%m-%d" $ds "+%s"); tsprev=$(echo "$ts - 86400" | bc); dsprev=$(date -j -f "%s" $tsprev "+%Y-%m-%d"); echo $(grep $dsprev food-diary | cut -d',' -f1,4) $line; done
</span><span class="line">2012-01-22,5 2012-01-23,1
</span><span class="line">2012-01-23,1 2012-01-24,1
</span><span class="line">2012-01-30,4 2012-01-31,1
</span><span class="line">2012-02-01,6 2012-02-02,0
</span><span class="line">2012-02-05,3 2012-02-06,1
</span><span class="line">2012-02-06,1 2012-02-07,1
</span><span class="line">2012-02-08,4 2012-02-09,1
</span><span class="line">2012-03-14,8 2012-03-15,0
</span><span class="line">2012-03-15,0 2012-03-16,1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Among days where I had fewer than 2 drinks, I had consumed an average of 3.6 drinks the
previous day. This suggests a <em>see-saw pattern</em>: I would drink too much one day,
back off the next, and repeat.</p>

<h3 id="panic">Panic</h3>

<p>All of this skirts the real question:</p>

<blockquote><p>What caused me to have panic attacks?</p></blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ for i in $(seq 2 4); do head -1 food-diary | cut -d',' -f$i; tail -n+2 panic-log | cut -d',' -f1 | while read ds; do ts=$(date -j -f "%Y-%m-%d" $ds "+%s"); tsprev=$(echo "$ts - 86400" | bc); dsprev=$(date -j -f "%s" $tsprev "+%Y-%m-%d"); echo $(grep $dsprev food-diary | cut -d',' -f1,2) $(grep $ds food-diary | cut -d',' -f1,$i) $ds; done; done
</span><span class="line">caffeine
</span><span class="line">2012-01-28,0 2012-01-29,0 2012-01-29
</span><span class="line">2012-01-31,0 2012-02-01,0 2012-02-01
</span><span class="line">2012-02-03,0 2012-02-04,0 2012-02-04
</span><span class="line">2012-02-07,0 2012-02-08,1 2012-02-08
</span><span class="line">2012-02-12,0 2012-02-13,0 2012-02-13
</span><span class="line">2012-02-29
</span><span class="line">2012-03-12,0 2012-03-13,1 2012-03-13
</span><span class="line">sweets
</span><span class="line">2012-01-28,0 2012-01-29,3 2012-01-29
</span><span class="line">2012-01-31,0 2012-02-01,1 2012-02-01
</span><span class="line">2012-02-03,0 2012-02-04,2 2012-02-04
</span><span class="line">2012-02-07,0 2012-02-08,1 2012-02-08
</span><span class="line">2012-02-12,0 2012-02-13,1 2012-02-13
</span><span class="line">2012-02-29
</span><span class="line">2012-03-12,0 2012-03-13,1 2012-03-13
</span><span class="line">alcohol
</span><span class="line">2012-01-28,0 2012-01-29,2 2012-01-29
</span><span class="line">2012-01-31,0 2012-02-01,6 2012-02-01
</span><span class="line">2012-02-03,0 2012-02-04,5 2012-02-04
</span><span class="line">2012-02-07,0 2012-02-08,4 2012-02-08
</span><span class="line">2012-02-12,0 2012-02-13,3 2012-02-13
</span><span class="line">2012-02-29
</span><span class="line">2012-03-12,0 2012-03-13,2 2012-03-13</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I had no data for <code>2012-02-28</code>. Other than that, on days where I had reported
panic attacks, my <em>current- and previous-day consumption patterns</em> were:</p>

<ul>
  <li><strong>alcohol</strong>: 3.7 drinks that day, 3.8 the previous day (overall average is 3.1);</li>
  <li><strong>sweets</strong>: 1.5 sweets that day, 1.0 the previous day (overall average is 1.0);</li>
  <li><strong>caffeine</strong>: 0.3 caffeinated beverages that day, 0.0 the previous day (overall average is 0.1).</li>
</ul>

<p>This suggests that <em>reducing alcohol and sweets consumption does help</em>. The data
is less clear on caffeine; as previously mentioned, I had mostly cut out
caffeine by the time I started tracking.</p>

<h2 id="up-next">Up Next</h2>

<p>In the next post, I’ll run some of the statistical tests and transformations
mentioned previously on this same data. I’ll also compare this dataset with
another dataset gathered through
<a href="https://github.com/candu/qs-counters">qs-counters</a>, a simple lightweight tracking utility I built to
reduce friction in the recording process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Panic!]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/03/panic/"/>
    <updated>2012-10-03T17:47:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/03/panic</id>
    <content type="html"><![CDATA[<p>In this post, I’ll tell the story of how I got started with self-tracking
and talk briefly about my first experiment.</p>

<!--more-->

<h2 id="my-journey-into-the-self-tracking-jungle">My Journey Into The Self-Tracking Jungle</h2>

<h3 id="first-a-video-for-context">First, A Video For Context</h3>

<p>If you’ve already seen my talk on panic attacks, feel free to skip to the next
section.</p>

<iframe src="http://player.vimeo.com/video/45860129" width="500" height="281" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
<p><a href="http://vimeo.com/45860129">Evan Savage - Panic</a> from <a href="http://vimeo.com/quantifiedself">Gary Wolf</a> on <a href="http://vimeo.com">Vimeo</a>.</p>

<h3 id="seeking-help">Seeking Help</h3>

<p>My success in confronting panic began with a <em>simple yet powerful insight</em>:</p>

<blockquote><p>I don&#8217;t know how to deal with this, but someone else might.</p></blockquote>

<p>Once I had this insight, <em>seeing a psychologist</em> was the natural next step.</p>

<ul>
  <li>As a <em>domain expert</em>, the psychologist knows where to find relevant
information for a wide variety of conditions. I can ask her for further
resources and receive <em>highly targeted recommendations</em>.</li>
  <li>As a <em>stranger</em>, the psychologist provides an <em>impartial and
non-judgmental sounding board</em>. I can discuss my thoughts, fears, and
experiences with her and feel safe doing so.</li>
</ul>

<p>As a side note, the former point reflects some of the promise of the
<em>Quantified Mass</em>. When you have a specific problem,
there is a subtle but crucial difference between</p>

<blockquote><p>What did others try?</p></blockquote>

<p>and</p>

<blockquote><p>What should I try next?</p></blockquote>

<p>While answering the first question is helpful, I’d argue that answering the
second is an order of magnitude more helpful.</p>

<h3 id="basic-research">Basic Research</h3>

<p>My psychologist recommended the
<a href="http://www.amazon.com/Anxiety-Phobia-Workbook-Edmund-Bourne/dp/1572248912">Anxiety and Phobia Workbook</a>.
As a survey of known symptoms, studies, treatments, and experiences, it gave me
a <em>much broader set of external inputs</em> to draw on. After reading the workbook
cover to cover, the natural next step was now to <em>combine these inputs into
something actionable</em>.</p>

<p>I identified specific treatments that seemed easy to implement. In retrospect,
my initial list was pretty large:</p>

<ul>
  <li><strong>Abdominal Breathing</strong>: by learning to <em>breathe from the abdomen</em>, you train
your body to avoid the sort of shallow chest breathing that can worsen an
attack.</li>
  <li><strong>Deep Relaxation</strong>: through <em>meditation, progressive muscle relaxation, or
other prolonged exercises</em>, you remove sources of physical tension in the body.</li>
  <li><strong>Daily Exercise</strong>: with <em>30 minutes of exercise per day</em>, you reduce overall
stress and increase fitness.</li>
  <li><strong>Positive Self-Talk</strong>: by <em>replacing internal
monologues</em> like “oh no, I’m having a heart attack” with more positive ones
like “I’ve dealt with this before, I’m in control”, you stop this
mental feedback loop from making your attack worse.</li>
  <li><strong>Desensitization</strong>: by <em>gradually exposing yourself to panic triggers in a
safe environment</em>, you sever the mental links that tie those triggers to
panic.</li>
  <li><strong>Assertiveness</strong>: by <em>expressing yourself in a constructive and
assertive manner</em>, you gain a sense of control over your environment
that is also useful in thwarting an attack.</li>
  <li><strong>Diet Modification</strong>: by <em>eliminating or reducing consumption of caffeine,
simple sugars, and alcohol</em>, you reduce baseline stress.</li>
  <li><strong>Supplements</strong>: by <em>taking B-complex and C vitamins</em>, your body gets the
raw materials necessary to regulate stress.</li>
</ul>

<p>All of these take <em>at most 30 minutes per day</em>, and many are <em>passive habits</em>
that rely on <em>small behavior modifications</em>.
<a href="https://www.facebook.com/events/268817716510713/">Small changes in habit</a>
are often more effective than large changes, as they are <em>easier to maintain</em>.</p>

<h2 id="my-first-experiment">My First Experiment</h2>

<p>Building this list led me to another question:</p>

<blockquote><p>How will I know if my condition is improving?</p></blockquote>

<p>This is where <em>self-tracking</em> comes in. To answer this question, I needed
to know what I was doing and whether it was working. I decided that I would
keep a <em>recovery journal</em>, which I divided into four sections.</p>

<ol>
  <li><strong>Weekly Practice Record</strong>: this was an overview of my activity. Every day,
I would check off each treatment I successfully followed. I also had areas
for weekly goals and notes.</li>
  <li><strong>Daily Record of Exercise</strong>: every day, I would fill in either the duration
and type of exercise or a reason for not exercising.</li>
  <li><strong>Food Diary</strong>: every day, I would fill in my caffeine, sugar, and alcohol
consumption. I would also fill whether I took B-complex and C vitamins.</li>
  <li><strong>Panic Triggers and Responses</strong>: if I experienced a panic attack, I would
note the date and time, the severity, what triggered it, what specific
symptoms I experienced, and how I dealt with it.</li>
</ol>

<p>You can view and print the log sheets
<a href="https://docs.google.com/folder/d/0B4lRh7NaNiTMNDE2ODE3ZTMtNWVjZC00M2VlLTg1NWUtZjdmZTlkMGI2NTZm/edit">on Google Docs</a>.</p>

<p>Keeping these logs took no more than five minutes per day. Tracking mechanisms
are most effective when they have <em>low overhead</em>, as this lowers the willpower
barrier to using them regularly.</p>

<h3 id="a-diversion-on-self-tracking-design">A Diversion On Self-Tracking Design</h3>

<blockquote><p>How can we design systems when we don&#8217;t know what we&#8217;re doing?</p><footer><strong>Bret Victor</strong> <cite><a href="http://worrydream.com/LadderOfAbstraction/">Up and Down the Ladder of Abstraction</a></cite></footer></blockquote>

<p>Although I cribbed the individual sections almost verbatim from the workbook,
their specific combination has some curious results.</p>

<p>The <em>broad</em> view of Section 1 is complemented by the <em>deep</em> view of Sections
2-3. In the data visualization world, having
<a href="http://worrydream.com/LadderOfAbstraction/">multiple levels of abstraction</a>
helps the viewer grasp the whole picture without losing their hold on specifics.
By looking at the broad view, I knew my overall progress; by looking at the
deep views, I could see the areas I needed to focus on.</p>

<p>Section 4 provides the <em>feedback loop</em>. Without this section,
I can’t answer my earlier question:</p>

<blockquote><p>How will I know if my condition is improving?</p></blockquote>

<p>My self-tracking was very <em>goal-directed</em>: I had a specific problem that I
wanted to solve. There is another kind of self-tracking, one that I
think many people ignore, and that is <em>exploratory</em> self-tracking.</p>

<p>Imagine this same journal without Section 4. None of the treatments are
specific to panic, so they could reasonably be followed by anyone. Without the
goal of confronting panic, there is <em>greater room for curiosity</em>. You could add
more experiments, play with correlations, ask weirder questions like
“what happens if I eat a lot of <a href="http://quantifiedself.com/butter/">butter</a>?”
<em>Without imposing goals, there is no failure or success</em>, and that can be both
a curse and a blessing. The curse is that you might not measurably improve
yourself. The blessing is that you might not care!</p>

<p>I believe that, much like a
<a href="http://en.wikipedia.org/wiki/Reinforcement_learning">reinforcement learning</a>
system, the Quantified Self community <em>needs both modes of self-tracking to
thrive</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome to Quantified Savagery]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/02/welcome-to-quantified-savagery/"/>
    <updated>2012-10-02T21:34:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/02/welcome-to-quantified-savagery</id>
    <content type="html"><![CDATA[<p>I’m <a href="http://cv.savageevan.com/">Evan Savage</a> and I’d like to welcome you
to Quantified Savagery. I recently left my job at Facebook to focus on
exploring the
<a href="http://quantifiedself.com/">Quantified Self</a>,
and I’m super-excited to share those explorations here on my new blog.</p>

<p>In this first post, I’ll explain the Quantified Self, give you a sense of
what I’ll be posting in the near future, and provide some helpful tips on
reading this blog.</p>

<!--more-->

<h2 id="what-is-the-quantified-self">What is the Quantified Self?</h2>

<p>I’ve had to explain this countless times to friends, family, and
co-workers: why did I leave
<a href="http://www.glassdoor.com/Reviews/Facebook-Reviews-E40772.htm">one of the world’s best employers</a>
to explore a field most people haven’t even heard of?
I usually start by name-dropping
<a href="http://www.fitbit.com/">Fitbit</a> or <a href="http://nikeplus.nike.com/plus/">Nike+</a> as
prominent examples of personal data collection and analysis. I then do some
semi-coherent hand-waving about the vast potential of data collection and
analysis. All of this is really just an attempt to cover up the fact
that <em>I don’t really know</em>.</p>

<p>That doesn’t really cut it as an explanation for a major life decision,
though, so let’s look a bit deeper.</p>

<p>The Quantified Self
<a href="http://quantifiedself.com/">community website</a> has this tagline:</p>

<blockquote><p>self knowledge through numbers</p></blockquote>

<ul>
  <li><strong>self:</strong> you seek to answer <em>your</em> questions.</li>
  <li><strong>knowledge:</strong> in doing this, you gain an <em>awareness</em> of your behaviors and
motivations.</li>
  <li><strong>through numbers:</strong> this process is driven by <em>data</em> gathered from sensors,
journals, and any other tools at your disposal.</li>
</ul>

<p>This is a good first-level approximation: you <em>gather</em> your data, <em>analyze</em> it,
and <em>interpret</em> the analysis to become more <em>self-aware</em>.</p>

<p><span class="pullquote-right" data-pullquote="For the first time in history, over half the world&#8217;s population owns sensor-packed networked computing devices.">
But why is this suddenly important? After all, journal-keeping has been around
roughly as long as written languages. The answer lies in <em>technology</em>.
For the first time in history, over half the world’s population owns
sensor-packed networked computing devices. We refer to these
devices as mobile phones only by historical accident. In fact, they’re really
powerful tools for speeding up this process of gaining
<em>self knowledge through numbers</em>.
</span></p>

<p>As I said before, though, this is only a first-level approximation. There are
two main ways in which Quantified Self can achieve greater awesomeness:
<em>Quantified Mass</em> and <em>Qualified Self</em>.</p>

<h3 id="quantified-mass">Quantified Mass</h3>

<p>As Gary Wolf pointed out in his
<a href="http://www.onthemedia.org/people/gary-wolf/">interview with On the Media</a>,
self-tracking doesn’t lead to self-obsession but rather to group-awareness.
In asking our own questions, we find that these questions are important to
others as well. When many people gather comparable datasets to answer the
same questions, there’s an opportunity to extract insights
that could benefit us all.</p>

<p>Scalable <em>mass</em> insights have massive power. Taking a 1% chunk out of the
American obesity epidemic might not sound impressive, but that’s potentially
a <a href="http://www.forbes.com/sites/bethhoffman/2012/08/16/what-the-obesity-epidemic-costs-us-infographic/">$6 billion impact</a>
on direct and indirect costs. And that’s just in the United States, which
counts for a tiny slice of the global mobile userbase.</p>

<p>Many of the requisite data mining tools already
exist, but they’re being employed to increase advertising click-through rates
by 1%. The engineers building these tools aren’t indifferent to societal
problems; rather, <em>the datasets to solve those problems largely don’t exist yet.</em>
Once they do, the quantified mass can start driving these massive-scale
incremental wins.</p>

<h3 id="qualified-self">Qualified Self</h3>

<blockquote><p>Not everything that counts can be counted,<br />and not everything that can be counted counts.</p></blockquote>

<p>Our perception of life is rarely numerical. Much more often, it is visual,
auditory, tactile, or experiential. 
The problem with data is that you can’t
<a href="http://worrydream.com/#!/KillMath">see</a> or
<a href="http://blog.makezine.com/2009/02/08/haptic-compass/">feel</a> them.
Even the best data scientists use
data only as a means of
<a href="http://www.ted.com/talks/hans_rosling_shows_the_best_stats_you_ve_ever_seen.html">telling a story</a>.</p>

<p>Put another way, this awareness process starts with qualitative questions
and ends with qualitative answers. Data is the intermediate representation,
one we use for its unique ability to permit detailed analysis. Ultimately,
though, we’re going to ask questions like</p>

<blockquote><p>How can I improve my fitness?</p></blockquote>

<p>and expect answers like</p>

<blockquote><p>By finding training partners. By doing more engaging athletic<br />activities. By setting aside regularly scheduled time.</p></blockquote>

<p>We’re going to need moral support. We’re going to give and receive advice.
We’re going to have conversations and <em>tell stories</em> about our personal
struggles with fitness.</p>

<p>These qualified aspects of self-awareness are arguably the most important
to us. <em>Data provide a stepping-stone</em>, something we can build upon
to address these aspects. By building systems designed for the qualified self,
we can bring the benefits of the quantified self to everyone.</p>

<h3 id="back-to-the-quantified-self">Back to the Quantified Self</h3>

<p>That sums up why I’m so excited about Quantified Self: there really is an
enormous potential here to revolutionize our lives on both the global/societal
and individual levels.
It’s also a fantastically diverse field, one that connects hackers and 
doctors and entrepreneurs and teachers and artists through mutual pursuit of
insanely lofty goals.</p>

<h2 id="upcoming-content">Upcoming Content</h2>

<p>The next few posts will detail my experiences <em>dealing with panic
disorder through self-tracking</em>. I gave a talk about this to the Bay Area
Quantified Self community, which you can
<a href="http://quantifiedself.com/2012/07/evan-savage-on-panic-tracking/">view here</a>
for some initial context.</p>

<h2 id="how-to-read-this-blog">How To Read This Blog</h2>

<p>Although this is a blog about personal data, one of my primary goals is to
make the thoughts and insights shared here accessible to a broad audience.
You can filter what you read with these categories:</p>

<ul>
  <li><a href="http://blog.savageevan.com/blog/categories/non-technical/" class="category">Non-Technical</a>:
expect to see insights, thoughts, discussions, descriptions
of planned experiments, and post-mortems. I might link to articles, studies,
or books that provide context, but I’ll try to summarize the relevant
parts.</li>
  <li><a href="http://blog.savageevan.com/blog/categories/technical/" class="category">Technical</a>:
expect to see code, statistical analysis, $ \LaTeX $ formulae,
links to <a href="https://github.com/candu">Github</a> repos, and algorithm
descriptions. I’ll assume familiarity with programming and mathematics, or
at least a willingness to learn.</li>
</ul>

<p>In addition, many of my posts will be connected to one or more experiments.
For instance, my upcoming posts on self-tracking to address panic disorder will
fall under the <a href="http://blog.savageevan.com/blog/categories/panic/" class="category">Panic</a> category.
For every experiment, I’ll attempt to post
content in both the
<a href="http://blog.savageevan.com/blog/categories/non-technical/" class="category">Non-Technical</a> and
<a href="http://blog.savageevan.com/blog/categories/technical/" class="category">Technical</a> categories.</p>

<p>Of course, I’ll be glad to answer any questions you have, technical or
otherwise!</p>
]]></content>
  </entry>
  
</feed>
