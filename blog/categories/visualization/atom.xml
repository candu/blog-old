<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Visualization | Quantified Savagery]]></title>
  <link href="http://blog.savageevan.com/blog/categories/visualization/atom.xml" rel="self"/>
  <link href="http://blog.savageevan.com/"/>
  <updated>2013-10-10T15:30:30-07:00</updated>
  <id>http://blog.savageevan.com/</id>
  <author>
    <name><![CDATA[Evan Savage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Tale of Two Trips]]></title>
    <link href="http://blog.savageevan.com/blog/2013/10/09/a-tale-of-two-trips/"/>
    <updated>2013-10-09T09:32:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2013/10/09/a-tale-of-two-trips</id>
    <content type="html"><![CDATA[<p>This summer, <a href="http://www.eecs.berkeley.edu/~valkyrie/">Valkyrie</a> and I travelled
through Eastern Asia.  We started with the Great Barrier Reef and rainforests near
Cairns, then went onwards to Singapore, Vietnam, Cambodia, Malaysia, and Korea
before spending three typhoon-stricken days holed up in Manila, Philippines.</p>

<p>As with our <a href="http://fearlesstost.github.io/biketotheearth/">bike trip</a>, we kept
a <a href="http://ramblelust.savageinter.net/">daily journal</a> of our travels in blog
form.  In this post, I visualize the two trips from our blog entries using some
simple word count graphs.  These aren’t the most sophisticated visualizations
possible, but they provide a simple starting point to build upon in future
blog posts.</p>

<!-- more -->

<p>First of all, it feels good to write another post!  The rapidly upcoming <a href="http://quantifiedself.com/conference/San-Francisco-2013/">Quantified Self 2013 Global Conference</a>
seemed like a good excuse to break seven months of blog neglect, so here I am.</p>

<p>I’ll refer to these trips as <em>Bike to the Earth</em> and <em>Ramblelust</em> respectively,
following the names of each trip blog.  Let’s start with a look at the broadest
of broad textual measures, word count.</p>

<h2 id="word-count">Word Count</h2>

<p>How many words did we write for each trip?  How many per post, on average?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python global_word_count.py &lt; BikeToTheEarth/posts_normalized.json 
</span><span class='line'>141329 words in 197 posts (717 words/post)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$ python global_word_count.py &lt; Ramblelust/posts_normalized.json 
</span><span class='line'>61010 words in 86 posts (709 words/post)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Not much difference here.  What happens if we graph the word counts over time?
Top is Bike to the Earth, bottom is Ramblelust.</p>

<p><img src="https://lh4.googleusercontent.com/-5Sv5_JZEDdw/UlcoazZGSxI/AAAAAAAAAks/9TZH7nDzpnQ/w1000/biketotheearth_daily_words.jpg">
<img src="https://lh6.googleusercontent.com/-BW5K-iWb56c/UlcoZ4fktZI/AAAAAAAAAkw/3g2w4bbbMtI/w1000/ramblelust_daily_words.jpg"></p>

<p>One point jumps out on the Bike to the Earth graph: <a href="http://fearlesstost.github.io/biketotheearth/posts/2010/10/19/hellbania.html">this post</a>,
a massive 3600-word whopper that details our arduous exit from the rain-stricken
Albanian coastline and into Greece.  For comparison, our longest post from
Ramblelust was <a href="http://ramblelust.savageinter.net/blog/2013/06/29/cam-ranh-ing-around/">this one</a>
about our CouchSurfing experiences in Cam Ranh, a short distance south from
Nha Trang along the Vietnamese coast.</p>

<p>Still, it’s hard to make much out of such noisy data.  Let’s smooth that a bit
by looking at weekly averages. Again, top is Bike to the Earth, bottom is Ramblelust.</p>

<p><img src="https://lh6.googleusercontent.com/-9YT2XueNpAs/UlcodH_CpwI/AAAAAAAAAkk/0ZnCYmXSMJc/w1000/biketotheearth_daily_words_smoothed.jpg">
<img src="https://lh4.googleusercontent.com/-C-Q604GWq84/UlcoesNibrI/AAAAAAAAAjk/8RHMmaBdOi0/w1000/ramblelust_daily_words_smoothed.jpg"></p>

<p>Now another pattern pops out of the Bike to the Earth data: sometime around
the beginning of September, our writing output doubled.  At that time, we were
just entering Italy, where we were sandwiched in between the southern Alps
and the sea for about 900km before reaching Rome.</p>

<p>As I go through this process, I’m constantly jumping back and forth between
the blog posts and these graphs.  As with all visualization, this context is an
essential part of understanding the data.</p>

<h2 id="next-steps">Next Steps</h2>

<p>There are lots of places we could go from here:</p>

<ul>
  <li>sentiment analysis;</li>
  <li>location-based visualization (by combining with country data);</li>
  <li>authorship analysis (my posts vs. Valkyrie’s posts)…</li>
</ul>

<p>…the list goes on.  What would you like to see?  Comment via Facebook or
Twitter to let me know, and I’ll put it into the next blog post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Another Quadtree Map Rendering]]></title>
    <link href="http://blog.savageevan.com/blog/2013/03/04/another-quadtree-map-rendering/"/>
    <updated>2013-03-04T16:48:00-08:00</updated>
    <id>http://blog.savageevan.com/blog/2013/03/04/another-quadtree-map-rendering</id>
    <content type="html"><![CDATA[<p>This will be a quick post: I’ve got another population-based map rendering to
share, based on the work described in <a href="http://blog.savageevan.com/blog/2013/02/21/quadtree-cartography/">this post</a>.</p>

<!-- more -->

<h2 id="the-rendering">The Rendering</h2>

<p>This rendering uses tiles at Google Maps zoom level 14:</p>

<p><img src="https://lh5.googleusercontent.com/-74zVhVDHIdc/UTVAtI4bhcI/AAAAAAAAAWY/sWT9JplWl7k/s800/tiles14.2048.jpg"></p>

<p>I decided to experiment with solid shading rather than wireframe for the tiles.
This cuts down on the <a href="http://en.wikipedia.org/wiki/Moir%C3%A9_pattern">Moiré effect</a>
in densely populated areas.</p>

<p>The original is a <em>whopping 1 gigapixels</em>, so I had to resize it using
<a href="http://www.imagemagick.org/script/index.php">ImageMagick</a> before uploading it to Picasa:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ convert tiles14.jpg -sample 2048x2048 tiles14.2048.jpg</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A few more random tidbits of information:</p>

<ul>
  <li>Computing the tile subdivision <em>took one CPU-hour</em> on my laptop, a fairly
new MacBook Air.</li>
  <li>At zoom level 14, tiles near the equator are <em>roughly 1.5 miles to a side.</em>
(Tiles further north or south are shorter in the north-south direction
due to distortion in the Mercator projection.)</li>
  <li><em>The Nile is clearly visible</em> between the Nile Delta and Aswan.</li>
</ul>

<h2 id="next-post">Next Post</h2>

<p>In my next post, I’ll dive into <a href="http://fearlesstost.github.com/biketotheearth/">six months of journal entries</a>
from a <a href="http://goo.gl/maps/0Xs55">six-month bike trip</a> that
<a href="http://www.eecs.berkeley.edu/~valkyrie/">Valkyrie Savage</a> and I took back in
2010.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quadtree Cartography]]></title>
    <link href="http://blog.savageevan.com/blog/2013/02/21/quadtree-cartography/"/>
    <updated>2013-02-21T10:05:00-08:00</updated>
    <id>http://blog.savageevan.com/blog/2013/02/21/quadtree-cartography</id>
    <content type="html"><![CDATA[<p>In this post, I show off some images from a project I’m working on (which will
remain nameless for now!) These images visualize subdivisions of the Earth
into Google Maps tile-sized regions with roughly equal population. I’ll also
provide a brief and non-technical rundown of the process by which I generated
these images.</p>

<!-- more -->

<h2 id="the-images">The Images</h2>

<p>First, a representative image from my renderings:</p>

<p><img src="https://lh5.googleusercontent.com/-EmN0ma8uhtg/USZnFkGsrfI/AAAAAAAAAV8/hDpa5sx1-IE/s640/tiles11.ag.jpg"></p>

<p>I love working on problems with a visual aspect - you get direct sensory
feedback on your progress!</p>

<p>Here, we can clearly see the continents delineated
by dense coastal population clusters. India and China are especially detailed,
and Europe has fairly uniform density throughout. Contrast this with North
America: northern Canada is sparsely populated, as are the deserts and
mountains of the Central United States.</p>

<p>Next, some renderings at different subdivision levels (Google Maps zoom
levels 8-11):</p>

<p><img src="https://lh4.googleusercontent.com/-SqLGYcz6yl0/USZnBXDoUNI/AAAAAAAAAUs/C7vdLkL522Y/s288/tiles8.ag60.jpg">
<img src="https://lh5.googleusercontent.com/-m2wk-ov9Mw4/USZnBmDUucI/AAAAAAAAAU0/vrU48gzJei4/s288/tiles9.ag60.jpg">
<img src="https://lh6.googleusercontent.com/-GuXnAIjWUf0/USZnCbAac_I/AAAAAAAAAU8/urh1UXBD3-U/s288/tiles10.ag60.jpg">
<img src="https://lh6.googleusercontent.com/-Y53pPe7T0II/USZnCn5ZL3I/AAAAAAAAAVI/Owjf_pnQBic/s288/tiles11.ag60.jpg"></p>

<p>As the subdivision level increases, the continents progress from blocky pixel
art to more recognizable shapes.</p>

<p>Finally, some renderings with different resolutions of the underlying population
data (degree, half-degree, quarter-degree, and 2.5 arc minutes):</p>

<p><img src="https://lh6.googleusercontent.com/-GuXnAIjWUf0/USZnCbAac_I/AAAAAAAAAU8/urh1UXBD3-U/s288/tiles10.ag60.jpg">
<img src="https://lh6.googleusercontent.com/-RRw5Gx4OiaA/USZnEQhqNhI/AAAAAAAAAVg/i6B3yx8BF_M/s288/tiles10.ag30.jpg">
<img src="https://lh5.googleusercontent.com/-NkGpf7zzHsY/USZnFI4qQ7I/AAAAAAAAAV4/Kl1UB4U-4pU/s288/tiles10.ag15.jpg">
<img src="https://lh6.googleusercontent.com/-n6Ufe_6mJzM/USZnF60IfvI/AAAAAAAAAWE/PEmAgvWvzNU/s288/tiles10.ag.jpg"></p>

<p>Here the effect is more subtle: detail is added in densely populated areas,
but larger tiles (corresponding to more remote regions) are mostly unaffected.</p>

<p>To see all the images as small multiples, <a href="https://picasaweb.google.com/100933554722754572774/20130221QuadtreeCartography#">view the album on Picasa</a>.</p>

<h2 id="the-process">The Process</h2>

<p>There are four major steps: getting the data, combining it with Google Maps
tile data, building the subdivision, and rendering it.</p>

<h3 id="getting-the-data">Getting the Data</h3>

<p>The <a href="http://sedac.ciesin.columbia.edu/citations">NASA Socio-Economic Data and Applications Center</a>,
or SEDAC, compiles global population grids. These grids contain the estimated
number of people living in each 2.5-arc-minute square of the Earth’s surface.
2.5 arc-minutes is 1/24 of a degree, or about 4.5 km of equatorial circumference:
definitely high-resolution enough for building some awesome maps!</p>

<p>The population count grids are available <a href="http://sedac.ciesin.columbia.edu/data/set/gpw-v3-population-count/data-download">here</a>.
You have to register on the site and cite usage of their data, but otherwise it
appears to be freely available.</p>

<h3 id="combining-with-google-maps">Combining with Google Maps</h3>

<p>Google Maps uses a <a href="http://en.wikipedia.org/wiki/Mercator_projection">Mercator projection</a>.
This projection is <a href="https://developers.google.com/maps/documentation/javascript/maptypes#WorldCoordinates">truncated</a>
at roughly 85 degrees latitude to create a square map, which is then projected
onto a 256 x 256 world coordinate system. Finally, world coordinates are
mapped to <a href="https://developers.google.com/maps/documentation/javascript/maptypes#PixelCoordinates">pixel coordinates</a>
at different zoom levels, which determine which <a href="https://developers.google.com/maps/documentation/javascript/maptypes#TileCoordinates">tile</a>
your location falls in.</p>

<p>To match up the gridded population data with Google Maps tiles, then, we need
to do the following:</p>

<ul>
  <li>for each grid cell, <em>determine its latitude and longitude boundaries</em>;</li>
  <li>use those boundaries to <em>figure out which map tiles the cell overlaps</em>;</li>
  <li><em>divide the cell’s population among those map tiles</em>.</li>
</ul>

<p>To divide the cell’s population fairly, I determine how much of the cell
overlaps each tile.</p>

<p>I found <a href="https://google-developers.appspot.com/maps/documentation/javascript/examples/map-coordinates">this helpful example</a>
of working with locations, world coordinates, pixel coordinates, and tiles.
The source code of that example contains an implementation of Google’s
Mercator projection, which I built into a larger <a href="http://nodejs.org/">node.js</a>
utility for computing the equal-population subdivision.</p>

<p>(Yes, node.js is fine for CPU-intensive tasks, just not in the same process
as your webserver.)</p>

<h3 id="building-an-equal-population-subdivision">Building an Equal-Population Subdivision</h3>

<p>To get map tiles of equal population, <em>I combine tiles into larger tiles
until the population exceeds a threshold.</em> This creates large tiles in
sparsely populated areas while leaving smaller tiles in densely populated
areas.</p>

<p>(I mentioned <a href="http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves">quadtrees</a>
in the title of this post - this data structure is ideally suited for the
problem.)</p>

<h3 id="rendering-the-subdivision">Rendering the Subdivision</h3>

<p>This is the easy part! I used <a href="https://pypi.python.org/pypi/Pillow/">Pillow</a>, a
nicely-packaged version of the excellent <a href="http://www.pythonware.com/products/pil/">Python Imaging Library</a>,
to render the subdivisions out as JPEG images.</p>

<p>(I suppose I could have rendered SVG images in node.js using some <a href="https://github.com/tmpvar/jsdom">jsdom</a>
and <a href="http://d3js.org/">d3</a> hackery, but I was already familiar with using
Python Imaging Library for image synthesis.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Financial Tracking: Mint Bubbles]]></title>
    <link href="http://blog.savageevan.com/blog/2012/11/12/financial-tracking-mint-bubbles/"/>
    <updated>2012-11-12T07:00:00-08:00</updated>
    <id>http://blog.savageevan.com/blog/2012/11/12/financial-tracking-mint-bubbles</id>
    <content type="html"><![CDATA[<p>In this post I present Mint Bubbles, a <a href="http://www.nytimes.com/interactive/2012/02/13/us/politics/2013-budget-proposal-graphic.html">force-directed bubble chart</a>
visualization of exported Mint data. I explain how to use
<a href="http://en.wikipedia.org/wiki/Force-based_algorithms_(graph_drawing)">force-directed layouts</a> to produce awesome interactive visualizations
with <a href="http://d3js.org/">d3</a>, and also provide details on some of the specific tricks used
to create Mint Bubbles.</p>

<!-- more -->

<h2 id="getting-your-data">Getting Your Data</h2>

<p>Exporting your data from Mint is easy. Log into Mint and go to the
Transactions tab:</p>

<p><img src="https://lh6.googleusercontent.com/-oHWRFHUK35A/UKLVzn8tlDI/AAAAAAAAAM4/_2mADDMZ__M/s640/transactions-tab-select.jpg"></p>

<p>Scroll to the bottom pagination section. In barely-legible super-tiny
type at bottom right, there’s a link to export all your transactions:</p>

<p><img src="https://lh3.googleusercontent.com/-VSYonXZ14ns/UKLVz3M9eHI/AAAAAAAAAMs/Svbd25tzd3A/s800/transactions-export-link.jpg"></p>

<p>Clicking that link will download a file called <code>transactions.csv</code>:</p>

<p><img src="https://lh6.googleusercontent.com/-iwz7B_kEtF8/UKLV0RLGvZI/AAAAAAAAAM0/w3tqQ53CVao/s800/transactions-csv-download.jpg"></p>

<h2 id="mint-bubbles">Mint Bubbles</h2>

<p>If you’re viewing this on an RSS reader, check out the example
<a href="/blog/2012/11/12/financial-tracking-mint-bubbles/#quick-demo">on my blog</a>. You will need a browser that supports the
<a href="https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications">HTML5 File API</a>.</p>

<p>You can see the code for this demo <a href="https://github.com/candu/quantified-savagery-files/tree/master/Financial/mint-bubbles">here</a>.</p>

<p>To see a visualization of your data, drag the <code>transactions.csv</code> file from
Mint onto the <code>drag your data here</code> area below. You can also use
<a href="http://candu.github.io/quantified-savagery-files/Financial/mint-bubbles/transactions.csv">my data</a> from the last three months or so.</p>

<div id="quick-demo">
  <style type="text/css">
    #quick-demo {
      line-height: 1;
    }

    #chart {
      height: 480px;
      width: 720px;
      margin: auto;
      margin-top: 32px;
      margin-bottom: 16px;
    }
    
    .chart-active {
      border: 1px solid #DFE2E1;
      background-color: #F7F7F7;
    }
    
    #drop_zone {
      display: table;
      border: 2px dashed #bbb;
      height: 100%;
      width: 100%;
      padding: 4px;
      cursor: pointer;
    }
    
    #drop_zone p {
      display: table-cell;
      vertical-align: middle;
      text-align: center;
      font-size: 150%;
      color: #7F7F7F;
    }
    
    .hidden {
      display: none !important;
    }
    
    circle.node {
      cursor: pointer;
    }
    
    circle.circle-active {
      fill: #36f !important;
      stroke: #03f !important;
    }
    
    #caption {
      width: 720px;
      margin: auto;
      text-align: center;
      min-height: 100%;
    }
    
    #total {
      font-size: 125%;
      color: #36f;
      padding: 4px;
      margin-bottom: 8px;
    }
    
    #prompt {
      font-size: 150%;
      color: #888;
      padding: 4px;
    }
    
    #transactions_table {
      width: 100%;
      margin-bottom: 8px;
    }
    
    #quick-demo th {
      font-weight: 500;
      padding-bottom: 4px;
    }

    #quick-demo th, #quick-demo td {
      text-align: center;
    }
  </style>
  <script src="http://candu.github.io/quantified-savagery-files/lib/js/third-party/mootools.js"></script>
  <script src="http://candu.github.io/quantified-savagery-files/lib/js/third-party/d3.js"></script>
  <script src="http://candu.github.io/quantified-savagery-files/Financial/mint-bubbles/demo.js"></script>
  <div id="chart">
    <div id="drop_zone">
      <p>
        drop your data here
        <div id="progress" class="hidden">
          <progress id="progress_bar" />
        </div>
      </p>
    </div>
  </div>
  <div id="caption" class="hidden">
    <div id="prompt">
      click bubbles to see transaction details
    </div>
    <div id="total" class="hidden"></div>
    <div id="transactions" class="hidden">
      <table id="transactions_table">
        <thead>
          <tr>
            <th width="120px">Date</th>
            <th width="120px">Amount</th>
            <th width="480px">Description</th>
          </tr>
        </thead>
        <tbody id="transactions_tbody" />
      </table>
    </div>
  </div>
</div>

<h2 id="behind-the-bubbles">Behind The Bubbles</h2>

<h3 id="inspiration">Inspiration</h3>

<p>This visualization was inspired by the
<a href="http://www.nytimes.com/interactive/2012/02/13/us/politics/2013-budget-proposal-graphic.html">NYT 2013 Budget Proposal Graphic</a>,
which uses <a href="http://d3js.org/">d3.js</a> to bring
<a href="http://www.whitehouse.gov/omb/budget">Obama’s 2013 budget proposal</a>
to life as an interactive bubble chart.</p>

<p>I’d just started using <a href="https://www.mint.com/">Mint</a> for financial tracking, and this
seemed like an awesome way to visualize my personal spending patterns.
To help figure out the mechanics of the NYT visualization, I consulted
<a href="http://vallandingham.me/bubble_charts_in_d3.html">this article</a>
by <a href="http://vallandingham.me/">Jim Vallandingham</a>. He explains in detail how to create similar
visualizations using d3’s <a href="https://github.com/mbostock/d3/wiki/Force-Layout">force-directed layouts</a>, which model your
data as a set of particles moving about in space.</p>

<h3 id="importing-data">Importing Data</h3>

<p>Unlike my <a href="/blog/2012/10/22/dont-hate-cross-correlate/#quick-demo">previous</a> <a href="/blog/2012/10/17/fitbit-apis-crossfilter-and-d3/#quick-demo">visualizations</a>, I wanted this visualization
to allow you to play with your data. Enter the <a href="http://www.html5rocks.com/en/tutorials/file/dndfiles/">HTML5 File API</a>, which
allows access to files via JavaScript. First, I set up the drag-and-drop
listeners on <code>div#drop_zone</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Octopress bundles ender.js, which provides $() for DOM access; mootools</span>
</span><span class='line'><span class="cm"> * tries to play nice, so it won’t install its $() over that. I’m using</span>
</span><span class='line'><span class="cm"> * document.id() instead.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">dropZone</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">drop_zone</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">trapEvent</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">evt</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">evt</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">dropZone</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="err">‘</span><span class="nx">dragenter</span><span class="err">’</span><span class="p">,</span> <span class="nx">trapEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="nx">dropZone</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="err">‘</span><span class="nx">dragexit</span><span class="err">’</span><span class="p">,</span> <span class="nx">trapEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="nx">dropZone</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="err">‘</span><span class="nx">dragover</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">trapEvent</span><span class="p">(</span><span class="nx">evt</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// This makes a copy icon appear during the drag operation.</span>
</span><span class='line'>  <span class="nx">evt</span><span class="p">.</span><span class="nx">dataTransfer</span><span class="p">.</span><span class="nx">dropEffect</span> <span class="o">=</span> <span class="err">‘</span><span class="nx">copy</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="nx">dropZone</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="err">‘</span><span class="nx">drop</span><span class="err">’</span><span class="p">,</span> <span class="nx">handleFileSelect</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>dragenter</code>, <code>dragexit</code>, and <code>dragover</code> are analogous to <code>mouseenter</code>,
<code>mouseexit</code>, and <code>mouseover</code>. For those events, it suffices to call
<code>trapEvent()</code>, which prevents the browser’s default action from happening.
For instance, Chrome on Mac OS will just download the <code>transactions.csv</code> file
if you drag it into a browser tab, which is not what I want here.</p>

<p><code>drop</code> is the interesting event:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">handleFileSelect</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">trapEvent</span><span class="p">(</span><span class="nx">evt</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">evt</span><span class="p">.</span><span class="nx">dataTransfer</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// NOTE: you might want to filter out large or invalid files here.</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileReader</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">.</span><span class="nx">onloadstart</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lengthComputable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">progress</span><span class="err">’</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">hidden</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">progress_bar</span><span class="err">’</span><span class="p">).</span><span class="nx">set</span><span class="p">(</span><span class="err">‘</span><span class="nx">value</span><span class="err">’</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">progress_bar</span><span class="err">’</span><span class="p">).</span><span class="nx">set</span><span class="p">(</span><span class="err">‘</span><span class="nx">max</span><span class="err">’</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">total</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">.</span><span class="nx">onprogress</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lengthComputable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">progress_bar</span><span class="err">’</span><span class="p">).</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">loaded</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">caption</span><span class="err">’</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">hidden</span><span class="err">’</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">chart</span><span class="o">-</span><span class="nx">active</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">progress</span><span class="err">’</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">hidden</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">drop_zone</span><span class="err">’</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">hidden</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">chart</span><span class="err">’</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">chart</span><span class="o">-</span><span class="nx">active</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">buildChart</span><span class="p">(</span><span class="nx">d3</span><span class="p">.</span><span class="nx">csv</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">result</span><span class="p">));</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">.</span><span class="nx">readAsText</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This uses <code>FileReader.readAsText()</code> to read in the <code>transactions.csv</code> file,
with <code>d3.csv.parse()</code> for turning that CSV file into a sequence of JavaScript
objects representing the transactions. This parsing is triggered <code>onload</code>,
which fires once file I/O has completed.</p>

<p><code>onloadstart</code> and <code>onprogress</code> are used to monitor file I/O progress via the
<a href="http://www.useragentman.com/blog/2012/01/03/cross-browser-html5-progress-bars-in-depth/">HTML5 progress element</a> <code>document.id('progress_bar')</code>. Since
<code>transactions.csv</code> files are typically small, and since the “uploading” is
actually a client-local copy into browser memory, you’ll probably never see
that progress bar.</p>

<h3 id="grouping-transactions">Grouping Transactions</h3>

<p>I group the transactions by category:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">cs</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">data</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">tx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">tx</span><span class="p">[</span><span class="err">‘</span><span class="nx">Category</span><span class="err">’</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">c</span> <span class="k">in</span> <span class="nx">cs</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">amount</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">txs</span><span class="o">:</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">amount</span> <span class="o">+=</span> <span class="o">+</span><span class="p">(</span><span class="nx">tx</span><span class="p">[</span><span class="err">‘</span><span class="nx">Amount</span><span class="err">’</span><span class="p">]);</span>
</span><span class='line'>  <span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">txs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">tx</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>amount</code> stores the total amount; note the use of <code>+(tx['Amount'])</code> to convert
CSV string values into numbers. <code>txs</code> is used for the transaction list.</p>

<p>I then convert these into nodes to be used by
<code>d3.layout.force()</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">nodes</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">cs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">nodes</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">R</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">amount</span><span class="p">)),</span>
</span><span class='line'>    <span class="nx">category</span><span class="o">:</span> <span class="nx">c</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">amount</span><span class="o">:</span> <span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">amount</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">txs</span><span class="o">:</span> <span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">txs</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="defining-the-layout">Defining The Layout</h3>

<p>Before building the visualization itself, I define a color gradient based on
bubble radius, picking the colors using the excellent
<a href="http://colorschemedesigner.com/">Color Scheme Designer</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Rs</span> <span class="o">=</span> <span class="nx">nodes</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">minR</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">Rs</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">maxR</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">Rs</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fill</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="nx">minR</span><span class="p">,</span> <span class="nx">maxR</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="err">‘#</span><span class="mi">7</span><span class="nx">EFF77</span><span class="err">’</span><span class="p">,</span> <span class="err">‘#</span><span class="mi">067500</span><span class="err">’</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now on to the visualization. First, I need to create the <a href="https://developer.mozilla.org/en-US/docs/SVG">SVG element</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="mi">960</span><span class="p">,</span> <span class="nx">h</span> <span class="o">=</span> <span class="mi">480</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">vis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="err">‘#</span><span class="nx">chart</span><span class="err">’</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="err">‘</span><span class="nx">svg</span><span class="o">:</span><span class="nx">svg</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">width</span><span class="err">’</span><span class="p">,</span> <span class="nx">w</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">height</span><span class="err">’</span><span class="p">,</span> <span class="nx">h</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Next, I define the behavior and styling of the bubbles:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">vis</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="err">‘</span><span class="nx">circle</span><span class="p">.</span><span class="nx">node</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">nodes</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">enter</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="err">‘</span><span class="nx">svg</span><span class="o">:</span><span class="nx">circle</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="kr">class</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="nx">node</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">cx</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">cy</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">r</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="err">‘</span><span class="nx">fill</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">fill</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">);</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="err">‘</span><span class="nx">stroke</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">rgb</span><span class="p">(</span><span class="nx">fill</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">)).</span><span class="nx">darker</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="err">‘</span><span class="nx">stroke</span><span class="o">-</span><span class="nx">width</span><span class="err">’</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>fill(d.R)</code> uses the color gradient <code>fill</code> to make smaller bubbles lighter and
larger bubbles darker.</p>

<p>As for the force-directed layout, I start with some basic properties:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">force</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">layout</span><span class="p">.</span><span class="nx">force</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">nodes</span><span class="p">(</span><span class="nx">nodes</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">links</span><span class="p">([])</span>          <span class="c1">// no edges between bubbles!</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">size</span><span class="p">([</span><span class="nx">w</span><span class="p">,</span> <span class="nx">h</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">gravity</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>      <span class="c1">// controls speed at which bubbles seek the center</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">friction</span><span class="p">(</span><span class="mf">0.95</span><span class="p">);</span>    <span class="c1">// slows down motion</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="tick-handler">Tick Handler</h3>

<p><blockquote><p>force.tick(): Runs the force layout simulation one step.</p><footer><strong>Force Layout</strong> <cite><a href='https://github.com/mbostock/d3/wiki/Force-Layout#wiki-tick'>github.com/mbostock/d3/wiki/&hellip;</a></cite></footer></blockquote></p>

<p>Force-directed layouts model your data as a set of particles in space. Those
particles are subject to various forces:</p>

<ul>
  <li><strong>Gravity:</strong> in d3, this is actually an attractive force pulling particles
towards the center of the visualization.</li>
  <li><strong>Friction:</strong> this slows down movement.</li>
  <li><strong>Tension:</strong> if nodes are connected via links (edges), they will resist being
moved apart.</li>
  <li><strong>Charge:</strong> similar to electric charge, same-signed charges repel
and opposite-signed charges attract.</li>
</ul>

<p>A layout can describe some or all of these forces. Resolving the forces is a
simple iterative process:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>while (true) {
</span><span class='line'>  for (P in particles) {
</span><span class='line'>    F = [0, 0];
</span><span class='line'>    for (f in forcesActingOn(P)) {
</span><span class='line'>      F[0] += f[0]; F[1] += f[1];
</span><span class='line'>    }
</span><span class='line'>    applyForceTo(P, F);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In addition to the above forces, visualizations using <code>d3.layout.force()</code> can
define their own forces via the <code>ontick</code> handler. I use this to apply two
effects:</p>

<ul>
  <li><strong>Size Sorting:</strong> similar to <a href="http://en.wikipedia.org/wiki/Granular_convection">granular convection</a>,
larger bubbles will rise while smaller bubbles sink.</li>
  <li><strong>Collision Detection:</strong> I prevent bubbles from intersecting, since that
makes it easier to select them.</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">floatPoint</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="nx">minR</span><span class="p">,</span> <span class="nx">maxR</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="nx">h</span> <span class="o">*</span> <span class="mf">0.65</span><span class="p">,</span> <span class="nx">h</span> <span class="o">*</span> <span class="mf">0.35</span><span class="p">]);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">force</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="err">‘</span><span class="nx">tick</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// vertical size sorting</span>
</span><span class='line'>  <span class="nx">nodes</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">dy</span> <span class="o">=</span> <span class="nx">floatPoint</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">)</span> <span class="o">-</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">d</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="mf">0.25</span> <span class="o">*</span> <span class="nx">dy</span> <span class="o">*</span> <span class="nx">e</span><span class="p">.</span><span class="nx">alpha</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// collision detection</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">q</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">geom</span><span class="p">.</span><span class="nx">quadtree</span><span class="p">(</span><span class="nx">nodes</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">nodes</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">q</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">quad</span><span class="p">,</span> <span class="nx">x1</span><span class="p">,</span> <span class="nx">y1</span><span class="p">,</span> <span class="nx">x2</span><span class="p">,</span> <span class="nx">y2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">d2</span> <span class="o">=</span> <span class="nx">quad</span><span class="p">.</span><span class="nx">point</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">d2</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span><span class="nx">d2</span> <span class="o">!==</span> <span class="nx">d1</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">d2</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">y</span> <span class="o">=</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="nx">d2</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">L</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">*</span> <span class="nx">y</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">R</span> <span class="o">=</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">R</span> <span class="o">+</span> <span class="nx">d2</span><span class="p">.</span><span class="nx">R</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">L</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">R</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">L</span> <span class="o">=</span> <span class="p">(</span><span class="nx">L</span> <span class="o">-</span> <span class="nx">R</span><span class="p">)</span> <span class="o">/</span> <span class="nx">L</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">Lx</span> <span class="o">=</span> <span class="nx">L</span> <span class="o">*</span> <span class="nx">x</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">Ly</span> <span class="o">=</span> <span class="nx">L</span> <span class="o">*</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">d1</span><span class="p">.</span><span class="nx">x</span> <span class="o">-=</span> <span class="nx">Lx</span><span class="p">;</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">y</span> <span class="o">-=</span> <span class="nx">Ly</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">d2</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="nx">Lx</span><span class="p">;</span> <span class="nx">d2</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="nx">Ly</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">// This short-circuits visit() for quadtree nodes that can’t collide with</span>
</span><span class='line'>      <span class="c1">// d1, resulting in O(n log n) collision detection.</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>        <span class="nx">x1</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">(</span><span class="nx">d1</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">R</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="nx">x2</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="p">(</span><span class="nx">d1</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">R</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="nx">y1</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">(</span><span class="nx">d1</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">R</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="nx">y2</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="p">(</span><span class="nx">d1</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">R</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">node</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">cx</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">cy</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="alpha-and-size-sorting">Alpha and Size Sorting</h3>

<p>What’s <code>e.alpha</code>? This is described cryptically in the
<a href="https://github.com/mbostock/d3/wiki/Force-Layout#wiki-start">d3.js documentation</a>:</p>

<p><blockquote><p>Internally, the layout uses a cooling parameter alpha which controls the layout temperature: as the physical simulation converges on a stable layout, the temperature drops, causing nodes to move more slowly.</p><footer><strong>Force Layout</strong> <cite><a href='https://github.com/mbostock/d3/wiki/Force-Layout#wiki-start'>github.com/mbostock/d3/wiki/&hellip;</a></cite></footer></blockquote></p>

<p>A look at the <a href="https://github.com/mbostock/d3/blob/master/src/layout/force.js#L46">code for d3.layout.force()</a>
provides some insight into what’s happening here:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">force</span><span class="p">.</span><span class="nx">tick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// simulated annealing, basically</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="nx">alpha</span> <span class="o">*=</span> <span class="p">.</span><span class="mi">99</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="p">.</span><span class="mi">005</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">end</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="err">“</span><span class="nx">end</span><span class="err">”</span><span class="p">,</span> <span class="nx">alpha</span><span class="o">:</span> <span class="nx">alpha</span> <span class="o">=</span> <span class="mi">0</span><span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// …</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Let’s look at the size sorting code again:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">nodes</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">dy</span> <span class="o">=</span> <span class="nx">floatPoint</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">)</span> <span class="o">-</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">d</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="mf">0.25</span> <span class="o">*</span> <span class="nx">dy</span> <span class="o">*</span> <span class="nx">e</span><span class="p">.</span><span class="nx">alpha</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>floatPoint(d.R)</code> computes a “desired height” for the node <code>d</code>. The <code>d.y</code>
adjustment moves <code>d</code> towards that height, using <code>e.alpha</code> to slow down the
sorting adjustment as the layout “cools” into its final state.</p>

<h3 id="collision-detection">Collision Detection</h3>

<p>The collision detection code is cribbed from
<a href="http://mbostock.github.com/d3/talk/20111018/collision.html">this page</a>,
which is part of a <a href="http://mbostock.github.com/d3/talk/20111018/#0">talk</a>
given by <a href="http://bost.ocks.org/mike/">Mike Bostock</a> on d3.</p>

<h2 id="up-next">Up Next</h2>

<p>I’m currently working on a post for the <a href="http://quantifiedself.com/">main Quantified Self blog</a>,
in which I’m planning to feature another cool visualization for personal data.
Aside from that, I’m hoping to use an upcoming post to dissect my Mint data in
more detail. Keep posted!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Hate, Cross-Correlate]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/22/dont-hate-cross-correlate/"/>
    <updated>2012-10-22T13:41:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/22/dont-hate-cross-correlate</id>
    <content type="html"><![CDATA[<p>In this post, I discuss cross-correlation. Although commonly used in signal
processing, cross-correlation can be useful in a Quantified Self context.
I’ll present a bit of the mathematics behind cross-correlation, demonstrate
a quick example, and briefly explain where you might use this in analyzing
your personal data.</p>

<!-- more -->

<h2 id="the-inspiration">The Inspiration</h2>

<p>I was going through my <a href="http://reader.google.com">Google Reader</a> queue this morning and
came across <a href="http://vimeo.com/50329491">this talk</a> by <a href="http://www.linkedin.com/in/jeffzira">Jeff Zira</a>, a product manager at
<a href="http://www.lark.com/">Lark Technologies</a>. The talk asks a simple question:</p>

<p><blockquote><p>Do Jeff and his fiancée influence each other’s sleep patterns?</p></blockquote></p>

<p>He presents raw time-series sleep data collected using
<a href="http://www.lark.com/products/lark-life/experience">larklife</a>, then attempts to answer this question in a couple of
different ways. He first displays a <em>timeline visualization</em> of peak
overnight activity:</p>

<p><img src="https://lh6.googleusercontent.com/-nU3qiQKycow/UIbogGdHsGI/AAAAAAAAAHY/Ax23iCZB98M/s640/jeffzira-peak-vis.jpg"></p>

<p>Since his peaks often occur slightly after her peaks, he uses this as
evidence that she’s waking him up. He also shows the <em>difference signal</em>
between their sleep patterns, but finds this less than conclusive:</p>

<p><img src="https://lh4.googleusercontent.com/-GAskT1r-gP4/UIbogcHUqCI/AAAAAAAAAHc/XbCl5IvAves/s640/jeffzira-diff-vis.jpg"></p>

<p>After watching this talk, I immediately thought:</p>

<p><blockquote><p>Is there a more precise way to answer this question?</p></blockquote></p>

<h2 id="the-mathematics">The Mathematics</h2>

<p>Note that term <em>difference signal</em> above. Any time-series dataset is a signal,
which means the powerful tools of signal processing can be applied!</p>

<p>Let the sleep patterns of Jeff and his fiancée be the signals
$ S(\tau) $ and $ T(\tau) $ respectively. Let $ f(S(\tau), T(\tau)) $ be the
<em>similarity</em> between those signals. Ignoring (for now) the fact that $ f $
remains undefined, I’m looking for the <em>time shift</em> $ t $ that maximizes</p>

<script type="math/tex; mode=display">
f(S(\tau + t), T(\tau))
</script>

<p>(As a side note, the <em>difference signal</em> is a new signal
$ R(\tau) = S(\tau) - T(\tau) $.)</p>

<p>First, however, I need a reasonable <em>similarity function</em> $ f $. The answer
lies in <em>cross-correlation:</em></p>

<p><blockquote><p>In signal processing, cross-correlation is a measure of similarity of two waveforms as a function of a time-lag applied to one of them.</p><footer><strong>Wikipedia</strong> <cite><a href='http://en.wikipedia.org/wiki/Cross-correlation'>en.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote></p>

<p>Perfect! The core of cross-correlation is an integral that looks suspiciously
like <a href="http://en.wikipedia.org/wiki/Convolution">convolution</a>, except that we have a term $ T(\tau + t) $ instead
of $ T(\tau - t) $:</p>

<script type="math/tex; mode=display">
(S \star T)(t) = \int_{-\infty}^{\infty} S^{\ast}(\tau) T(\tau + t) \mathrm{d}\tau
</script>

<p>The desired $ t $ is the <em>global maximum</em> of this cross-correlation function.</p>

<p>Given two discrete periodic signals <code>S1</code>, <code>S2</code> of equal length, this
cross-correlation integral can easily be computed:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">crossCorrelation</span><span class="p">(</span><span class="nx">S1</span><span class="p">,</span> <span class="nx">S2</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">N</span> <span class="o">=</span> <span class="nx">S1</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">t</span> <span class="o">=</span> <span class="nx">t</span> <span class="o">%</span> <span class="nx">N</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">t</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span> <span class="o">+=</span> <span class="nx">N</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">tau</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">tau</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">N</span><span class="p">;</span> <span class="nx">tau</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">C</span> <span class="o">+=</span> <span class="nx">S1</span><span class="p">[</span><span class="nx">tau</span><span class="p">]</span> <span class="o">*</span> <span class="nx">S2</span><span class="p">[(</span><span class="nx">tau</span> <span class="o">+</span> <span class="nx">t</span><span class="p">)</span> <span class="o">%</span> <span class="nx">N</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">C</span> <span class="o">/</span> <span class="nx">N</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It can be hard to visualize what this is doing, though, so I’ve provided
a <a href="#quick-demo">quick demo</a> below.</p>

<h3 id="an-interactive-example">An Interactive Example</h3>

<p>If you’re viewing this on an RSS reader, check out the example
<a href="/blog/2012/10/22/dont-hate-cross-correlate/#quick-demo">on my blog</a>.</p>

<p>You can see the code for this demo <a href="https://github.com/candu/quantified-savagery-files/tree/master/Algorithms/cross-correlation">here</a>.</p>

<div id="quick-demo">
  <style type="text/css">
    #datasets {
      cursor: move;
    }
    
    #cross-correlation {
      margin-top: 10px;
    }
    
    path {
      stroke-width: 2px;
    }
    
    path.s1 {
      fill: rgba(210, 0, 0, 0.4);
    }
    
    path.s2 {
      fill: rgba(0, 0, 210, 0.4);
    }
    
    path.c {
      fill: rgba(126, 0, 210, 0.64);
    }
    
    line {
      stroke: rgba(64, 64, 64, 0.7);
      stroke-width: 1px;
    }
    
    line.t {
      stroke: rgba(32, 32, 32, 0.8);
      stroke-width: 2px;
    }
    
    #status {
      color: #909;
      font-family: "Menlo", monospace;
      padding-bottom: 10px;
    }
    
    #s1-picker {
      background-color: rgba(210, 0, 0, 0.7);
    }
    
    #s2-picker {
      background-color: rgba(0, 0, 210, 0.7);
    }  
  </style>
  <script src="http://candu.github.io/quantified-savagery-files/lib/js/ArrayUtils.js"></script>
  <script src="http://candu.github.io/quantified-savagery-files/lib/js/MathUtils.js"></script>
  <script src="http://candu.github.io/quantified-savagery-files/lib/js/third-party/mootools.js"></script>
  <script src="http://candu.github.io/quantified-savagery-files/lib/js/third-party/d3.js"></script>
  <script src="http://candu.github.io/quantified-savagery-files/Algorithms/cross-correlation/demo.js"></script>
  <div id="controls">
    <select id="s1-picker">
      <option value="sine" selected="">Sine</option>
      <option value="noise">Noise</option>
      <option value="spiky">Spiky</option>
      <option value="square">Square</option>
      <option value="triangle">Triangle</option>
    </select>
    <select id="s2-picker">
      <option value="sine" selected="">Sine</option>
      <option value="noise">Noise</option>
      <option value="spiky">Spiky</option>
      <option value="square">Square</option>
      <option value="triangle">Triangle</option>
    </select>
  </div>
  <div id="datasets"></div>
  <div id="cross-correlation"></div>
  <div id="status"></div>
</div>

<p>Use the select boxes to change the red and blue functions. Click and drag
on the chart at top to see how sliding the blue function affects the
cross-correlation. Try different combinations of functions and <em>see where
the cross-correlation is maximized!</em></p>

<h3 id="back-to-the-original-motivation">Back To The Original Motivation</h3>

<p>Given the two sleep signals $ S, T $ above, cross-correlation makes it
possible to answer these questions:</p>

<ul>
  <li>Who wakes up first? By how long?</li>
  <li>Accounting for the time shift in awakening, how closely do the sleep
patterns match?</li>
</ul>

<p>This gives a <em>more rigorous</em> sense of whether the peaks in nighttime activity
actually do coincide. It also identifies the person who wakes up first and
how much earlier they wake up.</p>

<p>While simply <em>looking at the data</em> can be very effective, rigorous analysis
has definite value if you plan to <em>carry out further experiments.</em> Armed with
cross-correlation data, you can answer questions like</p>

<p><blockquote><p>Okay, I switched to a separately-coiled mattress. How well does that prevent<br/>us from waking each other up?</p></blockquote></p>

<p>In general, <em>signal processing</em> techniques can be highly useful in examining
time-series data.</p>

<h2 id="up-next">Up Next</h2>

<p>This was a slight diversion from my plan to talk about
upcoming experiments, which I’ll return to in my next few posts. If you
just can’t wait, here’s a <em>quick summary:</em></p>

<ul>
  <li><strong>Persistent location tracking:</strong> by <em>constantly tracking my location</em>, I’ll
have an additional dataset to correlate against.</li>
  <li><strong>Diet:</strong> by <em>taking meal photos</em>, <em>tagging foods</em>, and <em>measuring
stress levels after meals</em>, I’ll get a better idea of how different
foods affect me.</li>
  <li><strong>Finances:</strong> by <em>tracking where Valkyrie and I spend our money</em>, we’ll
hopefully be able to better control our discretionary spending.</li>
  <li><strong>Loss Aversion:</strong> by <em>experimenting with tracking methods</em>, I’ll see if this
is something that can be meaningfully tracked over time.</li>
</ul>
]]></content>
  </entry>
  
</feed>
