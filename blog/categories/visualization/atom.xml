<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Visualization | Quantified Savagery]]></title>
  <link href="http://blog.savageevan.com/blog/categories/visualization/atom.xml" rel="self"/>
  <link href="http://blog.savageevan.com/"/>
  <updated>2012-12-21T00:48:51-05:00</updated>
  <id>http://blog.savageevan.com/</id>
  <author>
    <name><![CDATA[Evan Savage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Financial Tracking: Mint Bubbles]]></title>
    <link href="http://blog.savageevan.com/blog/2012/11/12/financial-tracking-mint-bubbles/"/>
    <updated>2012-11-12T07:00:00-05:00</updated>
    <id>http://blog.savageevan.com/blog/2012/11/12/financial-tracking-mint-bubbles</id>
    <content type="html"><![CDATA[<p>In this post I present Mint Bubbles, a <a href="http://www.nytimes.com/interactive/2012/02/13/us/politics/2013-budget-proposal-graphic.html">force-directed bubble chart</a>
visualization of exported Mint data. I explain how to use
<a href="http://en.wikipedia.org/wiki/Force-based_algorithms_(graph_drawing)">force-directed layouts</a> to produce awesome interactive visualizations
with <a href="http://d3js.org/">d3</a>, and also provide details on some of the specific tricks used
to create Mint Bubbles.</p>

<!-- more -->

<h2 id="getting-your-data">Getting Your Data</h2>

<p>Exporting your data from Mint is easy. Log into Mint and go to the
Transactions tab:</p>

<p><img src="https://lh6.googleusercontent.com/-oHWRFHUK35A/UKLVzn8tlDI/AAAAAAAAAM4/_2mADDMZ__M/s640/transactions-tab-select.jpg"></p>

<p>Scroll to the bottom pagination section. In barely-legible super-tiny
type at bottom right, there’s a link to export all your transactions:</p>

<p><img src="https://lh3.googleusercontent.com/-VSYonXZ14ns/UKLVz3M9eHI/AAAAAAAAAMs/Svbd25tzd3A/s800/transactions-export-link.jpg"></p>

<p>Clicking that link will download a file called <code>transactions.csv</code>:</p>

<p><img src="https://lh6.googleusercontent.com/-iwz7B_kEtF8/UKLV0RLGvZI/AAAAAAAAAM0/w3tqQ53CVao/s800/transactions-csv-download.jpg"></p>

<h2 id="mint-bubbles">Mint Bubbles</h2>

<p>If you’re viewing this on an RSS reader, check out the example
<a href="/blog/2012/11/12/financial-tracking-mint-bubbles/#quick-demo">on my blog</a>. You will need a browser that supports the
<a href="https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications">HTML5 File API</a>.</p>

<p>You can see the code for this demo <a href="https://github.com/candu/quantified-savagery-files/tree/master/Financial/mint-bubbles">here</a>.</p>

<p>To see a visualization of your data, drag the <code>transactions.csv</code> file from
Mint onto the <code>drag your data here</code> area below. You can also use
<a href="https://raw.github.com/candu/quantified-savagery-files/master/Financial/mint-bubbles/transactions.csv">my data</a> from the last three months or so.</p>

<div id="quick-demo">
  <style type="text/css">
    #quick-demo {
      line-height: 1;
    }

    #chart {
      height: 480px;
      width: 720px;
      margin: auto;
      margin-top: 32px;
      margin-bottom: 16px;
    }
    
    .chart-active {
      border: 1px solid #DFE2E1;
      background-color: #F7F7F7;
    }
    
    #drop_zone {
      display: table;
      border: 2px dashed #bbb;
      height: 100%;
      width: 100%;
      padding: 4px;
      cursor: pointer;
    }
    
    #drop_zone p {
      display: table-cell;
      vertical-align: middle;
      text-align: center;
      font-size: 150%;
      color: #7F7F7F;
    }
    
    .hidden {
      display: none !important;
    }
    
    circle.node {
      cursor: pointer;
    }
    
    circle.circle-active {
      fill: #36f !important;
      stroke: #03f !important;
    }
    
    #caption {
      width: 720px;
      margin: auto;
      text-align: center;
      min-height: 100%;
    }
    
    #total {
      font-size: 125%;
      color: #36f;
      padding: 4px;
      margin-bottom: 8px;
    }
    
    #prompt {
      font-size: 150%;
      color: #888;
      padding: 4px;
    }
    
    #transactions_table {
      width: 100%;
      margin-bottom: 8px;
    }
    
    #quick-demo th {
      font-weight: 500;
      padding-bottom: 4px;
    }

    #quick-demo th, #quick-demo td {
      text-align: center;
    }
  </style>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/lib/js/third-party/mootools.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/lib/js/third-party/d3.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/Financial/mint-bubbles/demo.js"></script>
  <div id="chart">
    <div id="drop_zone">
      <p>
        drop your data here
        <div id="progress" class="hidden">
          <progress id="progress_bar" />
        </div>
      </p>
    </div>
  </div>
  <div id="caption" class="hidden">
    <div id="prompt">
      click bubbles to see transaction details
    </div>
    <div id="total" class="hidden"></div>
    <div id="transactions" class="hidden">
      <table id="transactions_table">
        <thead>
          <tr>
            <th width="120px">Date</th>
            <th width="120px">Amount</th>
            <th width="480px">Description</th>
          </tr>
        </thead>
        <tbody id="transactions_tbody" />
      </table>
    </div>
  </div>
</div>

<h2 id="behind-the-bubbles">Behind The Bubbles</h2>

<h3 id="inspiration">Inspiration</h3>

<p>This visualization was inspired by the
<a href="http://www.nytimes.com/interactive/2012/02/13/us/politics/2013-budget-proposal-graphic.html">NYT 2013 Budget Proposal Graphic</a>,
which uses <a href="http://d3js.org/">d3.js</a> to bring
<a href="http://www.whitehouse.gov/omb/budget">Obama’s 2013 budget proposal</a>
to life as an interactive bubble chart.</p>

<p>I’d just started using <a href="https://www.mint.com/">Mint</a> for financial tracking, and this
seemed like an awesome way to visualize my personal spending patterns.
To help figure out the mechanics of the NYT visualization, I consulted
<a href="http://vallandingham.me/bubble_charts_in_d3.html">this article</a>
by <a href="http://vallandingham.me/">Jim Vallandingham</a>. He explains in detail how to create similar
visualizations using d3’s <a href="https://github.com/mbostock/d3/wiki/Force-Layout">force-directed layouts</a>, which model your
data as a set of particles moving about in space.</p>

<h3 id="importing-data">Importing Data</h3>

<p>Unlike my <a href="/blog/2012/10/22/dont-hate-cross-correlate/#quick-demo">previous</a> <a href="/blog/2012/10/17/fitbit-apis-crossfilter-and-d3/#quick-demo">visualizations</a>, I wanted this visualization
to allow you to play with your data. Enter the <a href="http://www.html5rocks.com/en/tutorials/file/dndfiles/">HTML5 File API</a>, which
allows access to files via JavaScript. First, I set up the drag-and-drop
listeners on <code>div#drop_zone</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Octopress bundles ender.js, which provides $() for DOM access; mootools</span>
</span><span class='line'><span class="cm"> * tries to play nice, so it won’t install its $() over that. I’m using</span>
</span><span class='line'><span class="cm"> * document.id() instead.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">dropZone</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">drop_zone</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">trapEvent</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">evt</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">evt</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">dropZone</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="err">‘</span><span class="nx">dragenter</span><span class="err">’</span><span class="p">,</span> <span class="nx">trapEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="nx">dropZone</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="err">‘</span><span class="nx">dragexit</span><span class="err">’</span><span class="p">,</span> <span class="nx">trapEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="nx">dropZone</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="err">‘</span><span class="nx">dragover</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">trapEvent</span><span class="p">(</span><span class="nx">evt</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// This makes a copy icon appear during the drag operation.</span>
</span><span class='line'>  <span class="nx">evt</span><span class="p">.</span><span class="nx">dataTransfer</span><span class="p">.</span><span class="nx">dropEffect</span> <span class="o">=</span> <span class="err">‘</span><span class="nx">copy</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="nx">dropZone</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="err">‘</span><span class="nx">drop</span><span class="err">’</span><span class="p">,</span> <span class="nx">handleFileSelect</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>dragenter</code>, <code>dragexit</code>, and <code>dragover</code> are analogous to <code>mouseenter</code>,
<code>mouseexit</code>, and <code>mouseover</code>. For those events, it suffices to call
<code>trapEvent()</code>, which prevents the browser’s default action from happening.
For instance, Chrome on Mac OS will just download the <code>transactions.csv</code> file
if you drag it into a browser tab, which is not what I want here.</p>

<p><code>drop</code> is the interesting event:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">handleFileSelect</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">trapEvent</span><span class="p">(</span><span class="nx">evt</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">evt</span><span class="p">.</span><span class="nx">dataTransfer</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// NOTE: you might want to filter out large or invalid files here.</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileReader</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">.</span><span class="nx">onloadstart</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lengthComputable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">progress</span><span class="err">’</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">hidden</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">progress_bar</span><span class="err">’</span><span class="p">).</span><span class="nx">set</span><span class="p">(</span><span class="err">‘</span><span class="nx">value</span><span class="err">’</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">progress_bar</span><span class="err">’</span><span class="p">).</span><span class="nx">set</span><span class="p">(</span><span class="err">‘</span><span class="nx">max</span><span class="err">’</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">total</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">.</span><span class="nx">onprogress</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lengthComputable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">progress_bar</span><span class="err">’</span><span class="p">).</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">loaded</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">caption</span><span class="err">’</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">hidden</span><span class="err">’</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">chart</span><span class="o">-</span><span class="nx">active</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">progress</span><span class="err">’</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">hidden</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">drop_zone</span><span class="err">’</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">hidden</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">chart</span><span class="err">’</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">chart</span><span class="o">-</span><span class="nx">active</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">buildChart</span><span class="p">(</span><span class="nx">d3</span><span class="p">.</span><span class="nx">csv</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">result</span><span class="p">));</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">.</span><span class="nx">readAsText</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This uses <code>FileReader.readAsText()</code> to read in the <code>transactions.csv</code> file,
with <code>d3.csv.parse()</code> for turning that CSV file into a sequence of JavaScript
objects representing the transactions. This parsing is triggered <code>onload</code>,
which fires once file I/O has completed.</p>

<p><code>onloadstart</code> and <code>onprogress</code> are used to monitor file I/O progress via the
<a href="http://www.useragentman.com/blog/2012/01/03/cross-browser-html5-progress-bars-in-depth/">HTML5 progress element</a> <code>document.id('progress_bar')</code>. Since
<code>transactions.csv</code> files are typically small, and since the “uploading” is
actually a client-local copy into browser memory, you’ll probably never see
that progress bar.</p>

<h3 id="grouping-transactions">Grouping Transactions</h3>

<p>I group the transactions by category:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">cs</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">data</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">tx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">tx</span><span class="p">[</span><span class="err">‘</span><span class="nx">Category</span><span class="err">’</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">c</span> <span class="k">in</span> <span class="nx">cs</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">amount</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">txs</span><span class="o">:</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">amount</span> <span class="o">+=</span> <span class="o">+</span><span class="p">(</span><span class="nx">tx</span><span class="p">[</span><span class="err">‘</span><span class="nx">Amount</span><span class="err">’</span><span class="p">]);</span>
</span><span class='line'>  <span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">txs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">tx</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>amount</code> stores the total amount; note the use of <code>+(tx['Amount'])</code> to convert
CSV string values into numbers. <code>txs</code> is used for the transaction list.</p>

<p>I then convert these into nodes to be used by
<code>d3.layout.force()</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">nodes</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">cs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">nodes</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">R</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">amount</span><span class="p">)),</span>
</span><span class='line'>    <span class="nx">category</span><span class="o">:</span> <span class="nx">c</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">amount</span><span class="o">:</span> <span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">amount</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">txs</span><span class="o">:</span> <span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">txs</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="defining-the-layout">Defining The Layout</h3>

<p>Before building the visualization itself, I define a color gradient based on
bubble radius, picking the colors using the excellent
<a href="http://colorschemedesigner.com/">Color Scheme Designer</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Rs</span> <span class="o">=</span> <span class="nx">nodes</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">minR</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">Rs</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">maxR</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">Rs</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fill</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="nx">minR</span><span class="p">,</span> <span class="nx">maxR</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="err">‘#</span><span class="mi">7</span><span class="nx">EFF77</span><span class="err">’</span><span class="p">,</span> <span class="err">‘#</span><span class="mi">067500</span><span class="err">’</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now on to the visualization. First, I need to create the <a href="https://developer.mozilla.org/en-US/docs/SVG">SVG element</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="mi">960</span><span class="p">,</span> <span class="nx">h</span> <span class="o">=</span> <span class="mi">480</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">vis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="err">‘#</span><span class="nx">chart</span><span class="err">’</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="err">‘</span><span class="nx">svg</span><span class="o">:</span><span class="nx">svg</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">width</span><span class="err">’</span><span class="p">,</span> <span class="nx">w</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">height</span><span class="err">’</span><span class="p">,</span> <span class="nx">h</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Next, I define the behavior and styling of the bubbles:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">vis</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="err">‘</span><span class="nx">circle</span><span class="p">.</span><span class="nx">node</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">nodes</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">enter</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="err">‘</span><span class="nx">svg</span><span class="o">:</span><span class="nx">circle</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="kr">class</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="nx">node</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">cx</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">cy</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">r</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="err">‘</span><span class="nx">fill</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">fill</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">);</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="err">‘</span><span class="nx">stroke</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">rgb</span><span class="p">(</span><span class="nx">fill</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">)).</span><span class="nx">darker</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="err">‘</span><span class="nx">stroke</span><span class="o">-</span><span class="nx">width</span><span class="err">’</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>fill(d.R)</code> uses the color gradient <code>fill</code> to make smaller bubbles lighter and
larger bubbles darker.</p>

<p>As for the force-directed layout, I start with some basic properties:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">force</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">layout</span><span class="p">.</span><span class="nx">force</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">nodes</span><span class="p">(</span><span class="nx">nodes</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">links</span><span class="p">([])</span>          <span class="c1">// no edges between bubbles!</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">size</span><span class="p">([</span><span class="nx">w</span><span class="p">,</span> <span class="nx">h</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">gravity</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>      <span class="c1">// controls speed at which bubbles seek the center</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">friction</span><span class="p">(</span><span class="mf">0.95</span><span class="p">);</span>    <span class="c1">// slows down motion</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="tick-handler">Tick Handler</h3>

<p><blockquote><p>force.tick(): Runs the force layout simulation one step.</p><footer><strong>Force Layout</strong> <cite><a href='https://github.com/mbostock/d3/wiki/Force-Layout#wiki-tick'>github.com/mbostock/d3/wiki/&hellip;</a></cite></footer></blockquote></p>

<p>Force-directed layouts model your data as a set of particles in space. Those
particles are subject to various forces:</p>

<ul>
  <li><strong>Gravity:</strong> in d3, this is actually an attractive force pulling particles
towards the center of the visualization.</li>
  <li><strong>Friction:</strong> this slows down movement.</li>
  <li><strong>Tension:</strong> if nodes are connected via links (edges), they will resist being
moved apart.</li>
  <li><strong>Charge:</strong> similar to electric charge, same-signed charges repel
and opposite-signed charges attract.</li>
</ul>

<p>A layout can describe some or all of these forces. Resolving the forces is a
simple iterative process:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>while (true) {
</span><span class='line'>  for (P in particles) {
</span><span class='line'>    F = [0, 0];
</span><span class='line'>    for (f in forcesActingOn(P)) {
</span><span class='line'>      F[0] += f[0]; F[1] += f[1];
</span><span class='line'>    }
</span><span class='line'>    applyForceTo(P, F);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In addition to the above forces, visualizations using <code>d3.layout.force()</code> can
define their own forces via the <code>ontick</code> handler. I use this to apply two
effects:</p>

<ul>
  <li><strong>Size Sorting:</strong> similar to <a href="http://en.wikipedia.org/wiki/Granular_convection">granular convection</a>,
larger bubbles will rise while smaller bubbles sink.</li>
  <li><strong>Collision Detection:</strong> I prevent bubbles from intersecting, since that
makes it easier to select them.</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">floatPoint</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="nx">minR</span><span class="p">,</span> <span class="nx">maxR</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="nx">h</span> <span class="o">*</span> <span class="mf">0.65</span><span class="p">,</span> <span class="nx">h</span> <span class="o">*</span> <span class="mf">0.35</span><span class="p">]);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">force</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="err">‘</span><span class="nx">tick</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// vertical size sorting</span>
</span><span class='line'>  <span class="nx">nodes</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">dy</span> <span class="o">=</span> <span class="nx">floatPoint</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">)</span> <span class="o">-</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">d</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="mf">0.25</span> <span class="o">*</span> <span class="nx">dy</span> <span class="o">*</span> <span class="nx">e</span><span class="p">.</span><span class="nx">alpha</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// collision detection</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">q</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">geom</span><span class="p">.</span><span class="nx">quadtree</span><span class="p">(</span><span class="nx">nodes</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">nodes</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">q</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">quad</span><span class="p">,</span> <span class="nx">x1</span><span class="p">,</span> <span class="nx">y1</span><span class="p">,</span> <span class="nx">x2</span><span class="p">,</span> <span class="nx">y2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">d2</span> <span class="o">=</span> <span class="nx">quad</span><span class="p">.</span><span class="nx">point</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">d2</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span><span class="nx">d2</span> <span class="o">!==</span> <span class="nx">d1</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">d2</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">y</span> <span class="o">=</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="nx">d2</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">L</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">*</span> <span class="nx">y</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">R</span> <span class="o">=</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">R</span> <span class="o">+</span> <span class="nx">d2</span><span class="p">.</span><span class="nx">R</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">L</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">R</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">L</span> <span class="o">=</span> <span class="p">(</span><span class="nx">L</span> <span class="o">-</span> <span class="nx">R</span><span class="p">)</span> <span class="o">/</span> <span class="nx">L</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">Lx</span> <span class="o">=</span> <span class="nx">L</span> <span class="o">*</span> <span class="nx">x</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">Ly</span> <span class="o">=</span> <span class="nx">L</span> <span class="o">*</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">d1</span><span class="p">.</span><span class="nx">x</span> <span class="o">-=</span> <span class="nx">Lx</span><span class="p">;</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">y</span> <span class="o">-=</span> <span class="nx">Ly</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">d2</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="nx">Lx</span><span class="p">;</span> <span class="nx">d2</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="nx">Ly</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">// This short-circuits visit() for quadtree nodes that can’t collide with</span>
</span><span class='line'>      <span class="c1">// d1, resulting in O(n log n) collision detection.</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>        <span class="nx">x1</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">(</span><span class="nx">d1</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">R</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="nx">x2</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="p">(</span><span class="nx">d1</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">R</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="nx">y1</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">(</span><span class="nx">d1</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">R</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="nx">y2</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="p">(</span><span class="nx">d1</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">R</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">node</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">cx</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">cy</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="alpha-and-size-sorting">Alpha and Size Sorting</h3>

<p>What’s <code>e.alpha</code>? This is described cryptically in the
<a href="https://github.com/mbostock/d3/wiki/Force-Layout#wiki-start">d3.js documentation</a>:</p>

<p><blockquote><p>Internally, the layout uses a cooling parameter alpha which controls the layout temperature: as the physical simulation converges on a stable layout, the temperature drops, causing nodes to move more slowly.</p><footer><strong>Force Layout</strong> <cite><a href='https://github.com/mbostock/d3/wiki/Force-Layout#wiki-start'>github.com/mbostock/d3/wiki/&hellip;</a></cite></footer></blockquote></p>

<p>A look at the <a href="https://github.com/mbostock/d3/blob/master/src/layout/force.js#L46">code for d3.layout.force()</a>
provides some insight into what’s happening here:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">force</span><span class="p">.</span><span class="nx">tick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// simulated annealing, basically</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="nx">alpha</span> <span class="o">*=</span> <span class="p">.</span><span class="mi">99</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="p">.</span><span class="mi">005</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">end</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="err">“</span><span class="nx">end</span><span class="err">”</span><span class="p">,</span> <span class="nx">alpha</span><span class="o">:</span> <span class="nx">alpha</span> <span class="o">=</span> <span class="mi">0</span><span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// …</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Let’s look at the size sorting code again:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">nodes</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">dy</span> <span class="o">=</span> <span class="nx">floatPoint</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">)</span> <span class="o">-</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">d</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="mf">0.25</span> <span class="o">*</span> <span class="nx">dy</span> <span class="o">*</span> <span class="nx">e</span><span class="p">.</span><span class="nx">alpha</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>floatPoint(d.R)</code> computes a “desired height” for the node <code>d</code>. The <code>d.y</code>
adjustment moves <code>d</code> towards that height, using <code>e.alpha</code> to slow down the
sorting adjustment as the layout “cools” into its final state.</p>

<h3 id="collision-detection">Collision Detection</h3>

<p>The collision detection code is cribbed from
<a href="http://mbostock.github.com/d3/talk/20111018/collision.html">this page</a>,
which is part of a <a href="http://mbostock.github.com/d3/talk/20111018/#0">talk</a>
given by <a href="http://bost.ocks.org/mike/">Mike Bostock</a> on d3.</p>

<h2 id="up-next">Up Next</h2>

<p>I’m currently working on a post for the <a href="http://quantifiedself.com/">main Quantified Self blog</a>,
in which I’m planning to feature another cool visualization for personal data.
Aside from that, I’m hoping to use an upcoming post to dissect my Mint data in
more detail. Keep posted!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Hate, Cross-Correlate]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/22/dont-hate-cross-correlate/"/>
    <updated>2012-10-22T13:41:00-04:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/22/dont-hate-cross-correlate</id>
    <content type="html"><![CDATA[<p>In this post, I discuss cross-correlation. Although commonly used in signal
processing, cross-correlation can be useful in a Quantified Self context.
I’ll present a bit of the mathematics behind cross-correlation, demonstrate
a quick example, and briefly explain where you might use this in analyzing
your personal data.</p>

<!-- more -->

<h2 id="the-inspiration">The Inspiration</h2>

<p>I was going through my <a href="http://reader.google.com">Google Reader</a> queue this morning and
came across <a href="http://vimeo.com/50329491">this talk</a> by <a href="http://www.linkedin.com/in/jeffzira">Jeff Zira</a>, a product manager at
<a href="http://www.lark.com/">Lark Technologies</a>. The talk asks a simple question:</p>

<p><blockquote><p>Do Jeff and his fiancée influence each other’s sleep patterns?</p></blockquote></p>

<p>He presents raw time-series sleep data collected using
<a href="http://www.lark.com/products/lark-life/experience">larklife</a>, then attempts to answer this question in a couple of
different ways. He first displays a <em>timeline visualization</em> of peak
overnight activity:</p>

<p><img src="https://lh6.googleusercontent.com/-nU3qiQKycow/UIbogGdHsGI/AAAAAAAAAHY/Ax23iCZB98M/s640/jeffzira-peak-vis.jpg"></p>

<p>Since his peaks often occur slightly after her peaks, he uses this as
evidence that she’s waking him up. He also shows the <em>difference signal</em>
between their sleep patterns, but finds this less than conclusive:</p>

<p><img src="https://lh4.googleusercontent.com/-GAskT1r-gP4/UIbogcHUqCI/AAAAAAAAAHc/XbCl5IvAves/s640/jeffzira-diff-vis.jpg"></p>

<p>After watching this talk, I immediately thought:</p>

<p><blockquote><p>Is there a more precise way to answer this question?</p></blockquote></p>

<h2 id="the-mathematics">The Mathematics</h2>

<p>Note that term <em>difference signal</em> above. Any time-series dataset is a signal,
which means the powerful tools of signal processing can be applied!</p>

<p>Let the sleep patterns of Jeff and his fiancée be the signals
$ S(\tau) $ and $ T(\tau) $ respectively. Let $ f(S(\tau), T(\tau)) $ be the
<em>similarity</em> between those signals. Ignoring (for now) the fact that $ f $
remains undefined, I’m looking for the <em>time shift</em> $ t $ that maximizes</p>

<script type="math/tex; mode=display">
f(S(\tau + t), T(\tau))
</script>

<p>(As a side note, the <em>difference signal</em> is a new signal
$ R(\tau) = S(\tau) - T(\tau) $.)</p>

<p>First, however, I need a reasonable <em>similarity function</em> $ f $. The answer
lies in <em>cross-correlation:</em></p>

<p><blockquote><p>In signal processing, cross-correlation is a measure of similarity of two waveforms as a function of a time-lag applied to one of them.</p><footer><strong>Wikipedia</strong> <cite><a href='http://en.wikipedia.org/wiki/Cross-correlation'>en.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote></p>

<p>Perfect! The core of cross-correlation is an integral that looks suspiciously
like <a href="http://en.wikipedia.org/wiki/Convolution">convolution</a>, except that we have a term $ T(\tau + t) $ instead
of $ T(\tau - t) $:</p>

<script type="math/tex; mode=display">
(S \star T)(t) = \int_{-\infty}^{\infty} S^{\ast}(\tau) T(\tau + t) \mathrm{d}\tau
</script>

<p>The desired $ t $ is the <em>global maximum</em> of this cross-correlation function.</p>

<p>Given two discrete periodic signals <code>S1</code>, <code>S2</code> of equal length, this
cross-correlation integral can easily be computed:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">crossCorrelation</span><span class="p">(</span><span class="nx">S1</span><span class="p">,</span> <span class="nx">S2</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">N</span> <span class="o">=</span> <span class="nx">S1</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">t</span> <span class="o">=</span> <span class="nx">t</span> <span class="o">%</span> <span class="nx">N</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">t</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span> <span class="o">+=</span> <span class="nx">N</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">tau</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">tau</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">N</span><span class="p">;</span> <span class="nx">tau</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">C</span> <span class="o">+=</span> <span class="nx">S1</span><span class="p">[</span><span class="nx">tau</span><span class="p">]</span> <span class="o">*</span> <span class="nx">S2</span><span class="p">[(</span><span class="nx">tau</span> <span class="o">+</span> <span class="nx">t</span><span class="p">)</span> <span class="o">%</span> <span class="nx">N</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">C</span> <span class="o">/</span> <span class="nx">N</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It can be hard to visualize what this is doing, though, so I’ve provided
a <a href="#quick-demo">quick demo</a> below.</p>

<h3 id="an-interactive-example">An Interactive Example</h3>

<p>If you’re viewing this on an RSS reader, check out the example
<a href="/blog/2012/10/22/dont-hate-cross-correlate/#quick-demo">on my blog</a>.</p>

<p>You can see the code for this demo <a href="https://github.com/candu/quantified-savagery-files/tree/master/Algorithms/cross-correlation">here</a>.</p>

<div id="quick-demo">
  <style type="text/css">
    #datasets {
      cursor: move;
    }
    
    #cross-correlation {
      margin-top: 10px;
    }
    
    path {
      stroke-width: 2px;
    }
    
    path.s1 {
      fill: rgba(210, 0, 0, 0.4);
    }
    
    path.s2 {
      fill: rgba(0, 0, 210, 0.4);
    }
    
    path.c {
      fill: rgba(126, 0, 210, 0.64);
    }
    
    line {
      stroke: rgba(64, 64, 64, 0.7);
      stroke-width: 1px;
    }
    
    line.t {
      stroke: rgba(32, 32, 32, 0.8);
      stroke-width: 2px;
    }
    
    #status {
      color: #909;
      font-family: "Menlo", monospace;
      padding-bottom: 10px;
    }
    
    #s1-picker {
      background-color: rgba(210, 0, 0, 0.7);
    }
    
    #s2-picker {
      background-color: rgba(0, 0, 210, 0.7);
    }  
  </style>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/lib/js/ArrayUtils.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/lib/js/MathUtils.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/lib/js/third-party/mootools.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/lib/js/third-party/d3.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/Algorithms/cross-correlation/demo.js"></script>
  <div id="controls">
    <select id="s1-picker">
      <option value="sine" selected="">Sine</option>
      <option value="noise">Noise</option>
      <option value="spiky">Spiky</option>
      <option value="square">Square</option>
      <option value="triangle">Triangle</option>
    </select>
    <select id="s2-picker">
      <option value="sine" selected="">Sine</option>
      <option value="noise">Noise</option>
      <option value="spiky">Spiky</option>
      <option value="square">Square</option>
      <option value="triangle">Triangle</option>
    </select>
  </div>
  <div id="datasets"></div>
  <div id="cross-correlation"></div>
  <div id="status"></div>
</div>

<p>Use the select boxes to change the red and blue functions. Click and drag
on the chart at top to see how sliding the blue function affects the
cross-correlation. Try different combinations of functions and <em>see where
the cross-correlation is maximized!</em></p>

<h3 id="back-to-the-original-motivation">Back To The Original Motivation</h3>

<p>Given the two sleep signals $ S, T $ above, cross-correlation makes it
possible to answer these questions:</p>

<ul>
  <li>Who wakes up first? By how long?</li>
  <li>Accounting for the time shift in awakening, how closely do the sleep
patterns match?</li>
</ul>

<p>This gives a <em>more rigorous</em> sense of whether the peaks in nighttime activity
actually do coincide. It also identifies the person who wakes up first and
how much earlier they wake up.</p>

<p>While simply <em>looking at the data</em> can be very effective, rigorous analysis
has definite value if you plan to <em>carry out further experiments.</em> Armed with
cross-correlation data, you can answer questions like</p>

<p><blockquote><p>Okay, I switched to a separately-coiled mattress. How well does that prevent<br/>us from waking each other up?</p></blockquote></p>

<p>In general, <em>signal processing</em> techniques can be highly useful in examining
time-series data.</p>

<h2 id="up-next">Up Next</h2>

<p>This was a slight diversion from my plan to talk about
upcoming experiments, which I’ll return to in my next few posts. If you
just can’t wait, here’s a <em>quick summary:</em></p>

<ul>
  <li><strong>Persistent location tracking:</strong> by <em>constantly tracking my location</em>, I’ll
have an additional dataset to correlate against.</li>
  <li><strong>Diet:</strong> by <em>taking meal photos</em>, <em>tagging foods</em>, and <em>measuring
stress levels after meals</em>, I’ll get a better idea of how different
foods affect me.</li>
  <li><strong>Finances:</strong> by <em>tracking where Valkyrie and I spend our money</em>, we’ll
hopefully be able to better control our discretionary spending.</li>
  <li><strong>Loss Aversion:</strong> by <em>experimenting with tracking methods</em>, I’ll see if this
is something that can be meaningfully tracked over time.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fitbit: APIs, crossfilter, and d3.js]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/17/fitbit-apis-crossfilter-and-d3/"/>
    <updated>2012-10-17T08:30:00-04:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/17/fitbit-apis-crossfilter-and-d3</id>
    <content type="html"><![CDATA[<p>In this post, I present
<a href="https://github.com/candu/fitbit-crossfilter">fitbit-crossfilter</a>, which uses
the <a href="http://dev.fitbit.com/">Fitbit API</a>, <a href="http://square.github.com/crossfilter/">crossfilter</a> and <a href="http://d3js.org/">d3.js</a>
to provide an interactive visualization for exploratory analysis.</p>

<!-- more -->

<h2 id="the-inspiration">The Inspiration</h2>

<p>It was early April 2012. By this point, I’d been through a stint of pen-and-paper
self-tracking for <a href="/blog/2012/10/03/panic/">panic recovery</a>.
I’d <a href="/blog/2012/10/16/fitbit-my-brief-experience/">just received my Fitbit in the mail</a>. </p>

<p>Earlier that year, I applied to the <a href="http://www.eecs.berkeley.edu/Gradadm/">EECS PhD program at UC Berkeley</a> with
<a href="https://docs.google.com/document/d/10PupOF0RLa54o6y9_xBGnj7VbjtQNPab0-HdoVfT6gA/edit">this statement of purpose</a>. I was fascinated by this idea that <em>pervasive
gameplay really could make us all better</em>, that somewhere beyond the rat wheel
of gamification was hidden a Shangri-La of game-driven awesome.</p>

<p>That unfortunately didn’t pan out, and I was left with the age-old question:</p>

<p><blockquote><p>What do I do with this idea?</p></blockquote></p>

<p>It was around this time that, in a moment of exquisite
digital serendipity, <a href="http://www.meetup.com/">Meetup</a> suggested I check out the
<a href="http://www.meetup.com/quantifiedself/">Bay Area Quantified Self Meetup Group</a>.</p>

<p>Quantified Self? <a href="/blog/2012/10/02/welcome-to-quantified-savagery/">What’s that?</a>. As I explored the group page, I felt
a rush of clarity: <em>this was exactly what I’d been doing!</em> There’s a whole
community of people turning their lives into games in the name of
self-betterment!</p>

<p>I bit the bullet and forked over hard cash to sign up for
<a href="http://www.meetup.com/quantifiedself/events/58370532/">QS Show&amp;Tell #25</a> at the
<a href="http://goo.gl/maps/fn8H4">California College of the Arts</a>. It was everything I’d hoped for.
One presenter dissected 30 years of medical data and correlated it with
his marital status. Another showed off a cyclist threat detection system
cobbled together by mounting a webcam and sonar unit to his handlebars.
There was a <em>rich vein of inquiry into awesome here.</em> I was hooked.</p>

<p><a href="http://www.beaugunderson.com/">Beau Gunderson</a> of
<a href="https://singly.com/">Singly</a> presented <a href="https://github.com/beaugunderson/zeo-crossfilter">zeo-crossfilter</a>.
That was the turning point. I saw what he had done and said</p>

<p><blockquote><p>Hey, I can build that!</p></blockquote></p>

<p>And so <a href="https://github.com/candu/fitbit-crossfilter">fitbit-crossfilter</a> was born.</p>

<h2 id="the-tools">The Tools</h2>

<p>As mentioned, <a href="https://github.com/candu/fitbit-crossfilter">fitbit-crossfilter</a> is a mashup between
the <a href="http://dev.fitbit.com/">Fitbit API</a>,
<a href="http://square.github.com/crossfilter/">crossfilter</a>,
and <a href="http://d3js.org/">d3.js</a>.
I’ll go over each part with examples.</p>

<h3 id="fitbit-api">Fitbit API</h3>

<p>The Fitbit API uses <a href="http://oauth.net/">OAuth</a> for authentication. If you’ve never
confronted OAuth before, it can be confusing. To compound the confusion, <em>every
API provider seems to do it slightly differently.</em> The
<a href="https://wiki.fitbit.com/display/API/OAuth+Authentication+in+the+Fitbit+API">official Fitbit docs</a> are opaque, the
<a href="http://tools.ietf.org/html/rfc5849">OAuth specs</a> are even more opaque, and
the <a href="http://apis.io/Fitbit">unofficial apis.io listing</a> is just wrong:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -X GET -u ‘&lt;username&gt;:&lt;password&gt;<span class="err">&#39;</span> http://api.fitbit.com/1/user/-/profile.json 2&amp;gt;/dev/null | jsonpp
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;errors&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;errorType&quot;</span>: <span class="s2">&quot;oauth&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;fieldName&quot;</span>: <span class="s2">&quot;n/a&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;No Authorization header provided in the request. Each call to Fitbit API should be OAuth signed&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></password></username></p>

<p>I turned to <a href="https://github.com/simplegeo/python-oauth2">oauth2</a>, a Python library that makes it easier to carry out
this handshake. First, we get a <em>temporary access token:</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c"># Fill in your app parameters here.</span>
</span><span class='line'><span class="n">FITBIT_APP_KEY</span> <span class="o">=</span> <span class="err">‘</span><span class="o">&lt;</span><span class="n">app</span> <span class="n">key</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span><span class="s">&#39;</span>
</span><span class='line'><span class="n">FITBIT_APP_SECRET</span> <span class="o">=</span> <span class="s">&#39;&lt;app secret=&quot;&quot;&gt;&#39;</span><span class="o">&lt;/</span><span class="n">app</span><span class="o">&gt;&lt;/</span><span class="n">app</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">oauth2</span>
</span><span class='line'><span class="n">consumer</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Consumer</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">FITBIT_APP_KEY</span><span class="p">,</span> <span class="n">secret</span><span class="o">=</span><span class="n">FITBIT_APP_SECRET</span><span class="p">)</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">consumer</span><span class="p">)</span>
</span><span class='line'><span class="n">resp</span><span class="p">,</span> <span class="n">content</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="err">‘</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">api</span><span class="o">.</span><span class="n">fitbit</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">oauth</span><span class="o">/</span><span class="n">request_token</span><span class="p">,</span> <span class="err">‘</span><span class="n">GET</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="n">token</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Token</span><span class="o">.</span><span class="n">from_string</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'><span class="c"># NOTE: the auth URL uses www.fitbit.com as the domain, NOT api.fitbit.com</span>
</span><span class='line'><span class="n">auth_url</span> <span class="o">=</span> <span class="err">‘</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">fitbit</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">oauth</span><span class="o">/</span><span class="n">authorize</span><span class="err">?</span><span class="n">oauth_token</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="err">’</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">token</span><span class="o">.</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">auth_url</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we need an <a href="http://wiki.oauth.net/w/page/12238555/Signed%20Callback%20URLs">OAuth verifier</a>. This will be used to retrieve the real
access credentials. Visit <code>auth_url</code> in your browser,
log into Fitbit, and click Allow. You’ll be redirected to the OAuth callback
specified in your app. Use the value of the <code>oauth_verifier</code> GET param on your
<code>token</code> from before to keep going:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">token</span><span class="o">.</span><span class="n">set_verifier</span><span class="p">(</span><span class="err">‘</span><span class="o">&lt;</span><span class="n">oauth_verifier</span><span class="o">&gt;</span><span class="s">&#39;)</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">consumer</span><span class="p">,</span> <span class="n">token</span><span class="p">)</span>
</span><span class='line'><span class="n">resp</span><span class="p">,</span> <span class="n">content</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="s">&#39;http://api.fitbit.com/oauth/access_token&#39;</span><span class="p">,</span> <span class="s">&#39;POST&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">access_token</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Token</span><span class="o">.</span><span class="n">from_string</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></oauth_verifier></p>

<p>With this, we can now <em>retrieve useful information:</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">request_url</span> <span class="o">=</span> <span class="err">‘</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">api</span><span class="o">.</span><span class="n">fitbit</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="mi">1</span><span class="o">/</span><span class="n">user</span><span class="o">/-/</span><span class="n">profile</span><span class="o">.</span><span class="n">json</span><span class="err">’</span>
</span><span class='line'><span class="n">oauth_request</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Request</span><span class="o">.</span><span class="n">from_consumer_and_token</span><span class="p">(</span><span class="n">consumer</span><span class="p">,</span> <span class="n">token</span><span class="o">=</span><span class="n">access_token</span><span class="p">,</span> <span class="n">http_url</span><span class="o">=</span><span class="n">request_url</span><span class="p">)</span>
</span><span class='line'><span class="c"># Despite what the docs say, you need to generate a plaintext signature.</span>
</span><span class='line'><span class="n">oauth_request</span><span class="o">.</span><span class="n">sign_request</span><span class="p">(</span><span class="n">oauth2</span><span class="o">.</span><span class="n">SignatureMethod_PLAINTEXT</span><span class="p">(),</span> <span class="n">consumer</span><span class="p">,</span> <span class="n">access_token</span><span class="p">)</span>
</span><span class='line'><span class="n">headers</span> <span class="o">=</span> <span class="n">oauth_request</span><span class="o">.</span><span class="n">to_header</span><span class="p">(</span><span class="n">realm</span><span class="o">=</span><span class="err">’</span><span class="n">api</span><span class="o">.</span><span class="n">fitbit</span><span class="o">.</span><span class="n">com</span><span class="err">’</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">httplib</span>
</span><span class='line'><span class="n">connection</span> <span class="o">=</span> <span class="n">httplib</span><span class="o">.</span><span class="n">HTTPSConnection</span><span class="p">(</span><span class="err">‘</span><span class="n">api</span><span class="o">.</span><span class="n">fitbit</span><span class="o">.</span><span class="n">com</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="n">connection</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="err">‘</span><span class="n">GET</span><span class="err">’</span><span class="p">,</span> <span class="n">request_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'><span class="n">resp</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I encountered a few difficulties in figuring this out:</p>

<ul>
  <li>For the authorize step, you need to use <code>www.fitbit.com</code> as the URL domain.
<code>api.fitbit.com</code> will NOT work.</li>
  <li>You need to <em>sign all requests with the access token.</em></li>
  <li>No, <code>oauth2.SignatureMethod_HMAC_SHA1</code> will <strong>NOT</strong> work. Yes, they explicitly
claim to use HMAC-SHA1 in the documentation. Don’t believe everything you
read. Use <a href="http://oauth.net/core/1.0/#anchor35">plaintext signatures</a> instead.</li>
  <li>Fitbit expects both the URI and Authorization header to be set, but
<code>oauth2</code> will only set <strong>ONE</strong> of them properly.
See <a href="https://github.com/candu/fitbit-crossfilter/commit/1d094cecaa6c78bc8d5c295a797d96b7e1687493">this commit message</a>
for more details.</li>
</ul>

<p>You can see the full implementation <a href="https://github.com/candu/fitbit-crossfilter/blob/master/fitbit_crossfilter/foo/lib/fitbit.py">here</a>, along with
<a href="https://github.com/candu/fitbit-crossfilter/blob/master/fitbit_crossfilter/foo/views/__init__.py">an example of its use</a>.</p>

<h3 id="crossfilter">crossfilter</h3>

<p>Square’s <a href="http://square.github.com/crossfilter/">crossfilter</a> is a JavaScript library for efficiently performing
<em>multidimensional range queries.</em> I’ve included an interactive example
<a href="#quick-demo">below</a>.</p>

<p>crossfilter uses two types of objects to <em>represent a multidimensional dataset:</em></p>

<ul>
  <li><strong>dimension:</strong> a map function that returns totally-ordered <em>dimension values</em>
(e.g. numbers, dates);</li>
  <li><strong>group:</strong> a reduce function on those dimension values.</li>
</ul>

<p>The <em>totally-ordered</em> part is essential, since that makes it possible to
perform range queries. A quick code snippet might help explain this further:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">L</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">N</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">M</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">L</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">i</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">M</span> <span class="o">*</span> <span class="p">(</span><span class="nx">N</span> <span class="o">-</span> <span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="nx">N</span><span class="p">)]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">crossfilter</span><span class="p">(</span><span class="nx">L</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">d0</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">g0</span> <span class="o">=</span> <span class="nx">d0</span><span class="p">.</span><span class="nx">group</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">d1</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">g1</span> <span class="o">=</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">group</span><span class="p">();</span>
</span><span class='line'><span class="nx">d0</span><span class="p">.</span><span class="nx">filterRange</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>At this point, we can <em>inspect the dimensions and groups</em> to understand the
effect of <code>filterRange()</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">d1</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="kc">Infinity</span><span class="p">))</span>
</span><span class='line'><span class="err">‘</span><span class="p">[[</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">6</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">]]</span><span class="err">’</span>
</span><span class='line'><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">g1</span><span class="p">.</span><span class="nx">all</span><span class="p">())</span>
</span><span class='line'><span class="err">‘</span><span class="p">[{</span><span class="err">“</span><span class="nx">key</span><span class="err">”</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="err">”</span><span class="nx">value</span><span class="err">”</span><span class="o">:</span><span class="mi">3</span><span class="p">},{</span><span class="err">“</span><span class="nx">key</span><span class="err">”</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="err">”</span><span class="nx">value</span><span class="err">”</span><span class="o">:</span><span class="mi">2</span><span class="p">}]</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note that the range <code>[3, 8]</code> is actually interpreted as the semi-open interval
$ [3, 8) $. Note also that the elements of <code>g1.all()</code> are of the form
<code>{key: k, value: v}</code> where <code>v</code> is the number of elements <code>x</code> with
<code>3 &lt;= x[0] &amp;&amp; x[0] &lt; 8 &amp;&amp; x[1] == k</code>.</p>

<h3 id="d3js">d3.js</h3>

<p><blockquote><p>D3.js is a JavaScript library for manipulating documents based on data.</p><footer><strong>D3.js</strong> <cite><a href='http://d3js.org/'>d3js.org/&hellip;</a></cite></footer></blockquote></p>

<p>Using HTML, SVG, CSS, and JavaScript, you can build some pretty stunning
visualizations.
Again, check out the interactive example <a href="#quick-demo">below</a>. For more
examples, the <a href="https://github.com/mbostock/d3/wiki/Gallery">D3 Gallery</a> is
many kinds of awesome.</p>

<h3 id="a-quick-demo">A Quick Demo</h3>

<div id="quick-demo">
  <style type="text/css">
    .chart {
      display: inline-block;
      height: 151px;
      margin-bottom: 20px;
    }
    
    .reset {
      margin-left: 1em;
      font-size: smaller;
    }
    
    .background.bar {
      fill: #ccc;
    }
    
    .foreground.bar {
      fill: steelblue;
    }
    
    .axis path, .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }
    
    .axis text {
      font: 10px sans-serif;
    }
    
    .brush rect.extent {
      fill: steelblue;
      fill-opacity: .125;
    }
    
    .brush .resize path {
      fill: #eee;
      stroke: #666;
    }

    #chartA {
      width: 610px;
    }
    
    #chartB {
      width: 610px;
    }
  </style>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/Panic/fitbit-crossfilter/crossfilter.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/Panic/fitbit-crossfilter/d3.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/Panic/fitbit-crossfilter/chart.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/Panic/fitbit-crossfilter/demo.js"></script>
  <div id="charts">
    <div id="chartA" class="chart">
      <div class="title">A</div>
    </div>
    <div id="chartB" class="chart">
      <div class="title">B</div>
    </div>
  </div>
</div>

<p>If you’re viewing this through an RSS reader, the above demo won’t show
correctly. You can view it <a href="/blog/2012/10/17/fitbit-apis-crossfilter-and-d3#quick-demo">on my blog</a>.</p>

<h2 id="insights-from-my-data">Insights From My Data</h2>

<p>You can see the live dashboard <a href="http://fitbit.savageevan.com/">here</a>. Some of the highlights:</p>

<ul>
  <li>During this tracking period, I was <em>most active during the 8-10 am and 6-9 pm
timeslots.</em> (The former was my morning walk to the employee shuttle; the
latter was the evening walk back plus <a href="http://soccerfours.com/">Soccer Fours</a>.</li>
  <li>The more sleep I get, the more bipolar my exercise habits become.</li>
  <li>Unlike Beau Gunderson, I’m not seeing a correlation between number of times
awoken and duration of sleep.</li>
  <li>There is, however, a clear positive correlation between steps per minute
and calories burned per minute, as expected.</li>
</ul>

<p>Again, you can play around with the dashboard <a href="http://fitbit.savageevan.com/">here</a>
to find patterns in my Fitbit data.</p>

<h2 id="how-to-use-fitbit-crossfilter">How To Use fitbit-crossfilter</h2>

<p>I’ve placed my live fitbit-crossfilter dashboard into demo mode, but <em>you can
fetch and view your data as follows.</em></p>

<p>First, you will need a Fitbit app <em>with Partner API access</em>; see
<a href="https://wiki.fitbit.com/display/API/Fitbit+Partner+API">this page</a> for more details on setting that up. Use the following
application settings:</p>

<ul>
  <li><strong>Application Type:</strong> Website</li>
  <li><strong>Callback URL:</strong> <code>http://localhost:9001/oauth</code></li>
  <li><strong>Default Access Type:</strong> Read-Only</li>
</ul>

<p>Now copy <code>settings.py.nopasswd</code> to create your settings file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cp settings.py.nopasswd settings.py
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Edit the bottom of <code>settings.py</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">SYNC_ENABLED</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'><span class="n">DEFAULT_USER</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'><span class="n">FITBIT_CONSUMER_KEY</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">your</span> <span class="n">app</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">key</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">FITBIT_CONSUMER_SECRET</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">your</span> <span class="n">app</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">secret</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></your></your></p>

<p>Start the server, login, and sync your data:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python manage.py runserver 9001
</span><span class='line'><span class="c"># visit localhost:9001/login in the browser to do the OAuth handshake</span>
</span><span class='line'><span class="c"># visit localhost:9001/sync-user-data in the browser to sync data</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When the syncing completes, you’ll be redirected to your dashboard.</p>
]]></content>
  </entry>
  
</feed>
