<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Location | Quantified Savagery]]></title>
  <link href="http://blog.savageevan.com/blog/categories/location/atom.xml" rel="self"/>
  <link href="http://blog.savageevan.com/"/>
  <updated>2012-12-21T00:48:51-05:00</updated>
  <id>http://blog.savageevan.com/</id>
  <author>
    <name><![CDATA[Evan Savage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Persistent Location Tracking: Looking For A Few Good Data Points]]></title>
    <link href="http://blog.savageevan.com/blog/2012/11/02/persistent-location-tracking-looking-for-a-few-good-data-points/"/>
    <updated>2012-11-02T16:38:00-04:00</updated>
    <id>http://blog.savageevan.com/blog/2012/11/02/persistent-location-tracking-looking-for-a-few-good-data-points</id>
    <content type="html"><![CDATA[<p>In this post, I revisit the question of whether Google Latitude meets my
persistent location tracking needs. In <a href="/blog/2012/10/29/persistent-location-tracking-picking-the-right-tool/">my previous post</a>, I compared
Google Latitude to InstaMapper and concluded that the latter is too
battery-intensive. By looking at maps and base-level insights from the data,
I suggest that Google Latitude optimizes for battery life at the expense of
data quality.</p>

<!-- more -->

<h2 id="exhibit-a-some-maps">Exhibit A: Some Maps</h2>

<p>I started gathering data on Oct. 3, 2012:</p>

<p><img src="https://lh5.googleusercontent.com/-kyl-kUDWe_M/UJgVi3pls3I/AAAAAAAAALg/zGsaBfNzY7s/s640/map-monthly.jpg"></p>

<p>Since then, <a href="http://www.eecs.berkeley.edu/~valkyrie/">Valkyrie Savage</a> and I have travelled to Boston and Chicago.
Our stopover in Phoenix is clearly visible at this scale. You can barely make
out our day trip to <a href="http://goo.gl/maps/rLfNu">Mount Monadnock, NH</a> over near Boston. Here’s a
closer look at that trip:</p>

<p><img src="https://lh4.googleusercontent.com/-YJQip0zWnxQ/UJgVlFc_7pI/AAAAAAAAAMA/DjlCRjxouzo/s640/map-monadnock-trip.jpg"></p>

<p>Ouch. The data is <em>noisy in some areas, sparse in others.</em> It’s fairly clear that
we took Hwy 2 over, but <em>some of the GPS readings are miles off.</em> Let’s zoom in
on that hike:</p>

<p><img src="https://lh5.googleusercontent.com/-bg3DxaZTe6k/UJgVlqpW7ZI/AAAAAAAAAMI/t2Kn3hrhWJM/s640/map-monadnock-hike.jpg"></p>

<p>Only five data points actually lie within the park/mountain boundaries. That’s
<em>five data points for a four-hour hike.</em> Our Boston data is somewhat more
accurate:</p>

<p><img src="https://lh3.googleusercontent.com/-6RFwbwjBEtI/UJgVmQk1KCI/AAAAAAAAAMQ/-Nhyp0LtoLw/s640/map-monadnock-boston.jpg"></p>

<p>Still, the red line cuts through city blocks with reckless abandon. Either 
we’re flying, or we’re packing some incredibly efficient demolition equipment.</p>

<p>Here’s the map for one of my more itinerant Bay Area days:</p>

<p><img src="https://lh5.googleusercontent.com/-xNNR5dnNV44/UJgVj3SZAEI/AAAAAAAAALw/6KvtDZYWel0/s640/map-busy-day.jpg"></p>

<p>I cycled to a doctor’s appointment, visited
<a href="http://bid.berkeley.edu/">BiD</a> to hear <a href="http://research.microsoft.com/en-us/people/marycz/">Mary Czerwinski</a> speak about emotion tracking, worked
from <a href="http://goo.gl/maps/z7EuA">home</a> for a bit, went into San Francisco to meet up with
<a href="http://www.linkedin.com/in/levpopov">Lev Popov</a>, and finally dragged myself home again.</p>

<p>The BART ride into San Francisco is understandably sparse: most of it is
separated from cell towers and GPS satellites by rock and/or water.</p>

<p>Most of my travel is on foot, by bike, or via public transit. Not content
with the Mount Monadnock hike data, I tried another quick drive up into
<a href="http://goo.gl/maps/zk3AD">Tilden</a>:</p>

<p><img src="https://lh5.googleusercontent.com/-MCZ55KYjgcE/UJgVjNWQ0FI/AAAAAAAAALo/pibM6xiJmUE/s640/map-drive-test.jpg"></p>

<p>Google Latitude captured <em>just four points during the 20-minute drive.</em></p>

<h2 id="exhibit-b-some-analysis">Exhibit B: Some Analysis</h2>

<p>You can see the code for this analysis
<a href="https://github.com/candu/quantified-savagery-files/tree/master/Location/kml">here</a>
and <a href="https://github.com/candu/quantified-savagery-files/tree/master/Location/api">here</a>.</p>

<p>After trudging through several lackluster map views, I’m left with a
nagging impression:</p>

<p><blockquote><p>This data isn’t that useful.</p></blockquote></p>

<p>This impression deserves further analysis, so I grab the KML to answer some
of my questions. First off: <em>how often is Google Latitude checking my location?</em></p>

<p><img src="https://lh5.googleusercontent.com/-A7we5G7pYIw/UJb-xhCk_oI/AAAAAAAAAKk/O7ZwpxF_uQs/s640/timings-frequency.jpg"></p>

<p><em>About every two minutes.</em> GPS is a <a href="/blog/2012/10/29/persistent-location-tracking-picking-the-right-tool/">huge battery drain</a>;
increasing the time between updates can help by allowing the GPS radio to
enter an idle state. <em>How are those location readings scheduled?</em></p>

<p><img src="https://lh6.googleusercontent.com/-PMYu61X440I/UJb-yCEbuBI/AAAAAAAAAKs/umbJNuuVfo0/s640/timings-second-histogram.jpg"></p>

<p>Google Latitude really likes spacing its readings out by a <em>whole number of
minutes.</em></p>

<p><em>How accurate is the data?</em> The KML doesn’t provide <a href="http://en.wikipedia.org/wiki/Dilution_of_precision_(GPS)">accuracy estimates</a>
for its locations. Fortunately, the <a href="https://developers.google.com/latitude/">Google Latitude API</a> does, so
I retrieve my data using <a href="https://github.com/candu/quantified-savagery-files/blob/master/Location/api/scrape.py">this script</a> and look at the accuracy readings:</p>

<p><img src="https://lh3.googleusercontent.com/-p5senVUtgqM/UJb-ybk3zEI/AAAAAAAAAK0/qUvLSvog15E/s640/accuracy-histogram.jpg"></p>

<p>Actually, <em>the readings have fairly high accuracy.</em> Only 7% of readings have a
reported error radius greater than 100m.</p>

<p>The maps above suggest that location readings are less accurate while
travelling at high speed. Is that true? The API provides speed estimates
for some readings, but this data is kind of sparse:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python speed.py &lt; history.api 
</span><span class='line'>found 7429 speed values among 20898 readings</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I try a different method: the <a href="http://mathforum.org/library/drmath/view/51879.html">Haversine distance formula</a>, which
gives me the distance between two points on the Earth’s surface:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">haversineDistance</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">):</span>
</span><span class='line'>  <span class="err">“””</span>
</span><span class='line'>  <span class="n">Distance</span> <span class="p">(</span><span class="ow">in</span> <span class="n">meters</span><span class="p">)</span> <span class="n">between</span> <span class="n">two</span> <span class="n">Locations</span><span class="o">.</span> <span class="n">Uses</span> <span class="n">the</span> <span class="n">Haversine</span> <span class="n">formula</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">See</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">movable</span><span class="o">-</span><span class="nb">type</span><span class="o">.</span><span class="n">co</span><span class="o">.</span><span class="n">uk</span><span class="o">/</span><span class="n">scripts</span><span class="o">/</span><span class="n">latlong</span><span class="o">.</span><span class="n">html</span> <span class="k">for</span> <span class="n">corresponding</span>
</span><span class='line'>  <span class="n">JavaScript</span> <span class="n">implementation</span><span class="o">.</span>
</span><span class='line'>  <span class="err">“””</span>
</span><span class='line'>  <span class="c"># Earth’s radius in meters</span>
</span><span class='line'>  <span class="n">R</span> <span class="o">=</span> <span class="mi">6371009</span>
</span><span class='line'>  <span class="n">dLat</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="n">B</span><span class="o">.</span><span class="n">lat</span> <span class="o">-</span> <span class="n">A</span><span class="o">.</span><span class="n">lat</span><span class="p">)</span>
</span><span class='line'>  <span class="n">dLon</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="n">B</span><span class="o">.</span><span class="n">lng</span> <span class="o">-</span> <span class="n">A</span><span class="o">.</span><span class="n">lng</span><span class="p">)</span>
</span><span class='line'>  <span class="n">lat1</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="n">A</span><span class="o">.</span><span class="n">lat</span><span class="p">)</span>
</span><span class='line'>  <span class="n">lat2</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="n">B</span><span class="o">.</span><span class="n">lat</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sLat</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">dLat</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sLon</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">dLon</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="n">sLat</span> <span class="o">*</span> <span class="n">sLat</span> <span class="o">+</span> <span class="n">sLon</span> <span class="o">*</span> <span class="n">sLon</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">lat1</span><span class="p">)</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">lat2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">c</span> <span class="o">=</span> <span class="mf">2.0</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">atan2</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">a</span><span class="p">))</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">R</span> <span class="o">*</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I use this distance formula to get a plot of accuracy versus travelling speed:</p>

<p><img src="https://lh5.googleusercontent.com/-ba4lES16aCU/UJb-ytwI4OI/AAAAAAAAAK8/-OZvTHzgZjk/s144/accuracy-vs-speed.jpg"></p>

<p><em>No clear correlation here</em>; there are low-quality readings at both low and high
speeds. There are several possible explanations:</p>

<ul>
  <li><strong>Confirmation bias:</strong> I mistakenly extrapolated a small handful of
low-quality readings taken at high speeds to a general pattern.</li>
  <li><strong>Misinterpretation:</strong> Some of the Mount Monadnock readings look way off;
perhaps the error radius doesn’t mean what I think it does.</li>
  <li><strong>Different location sources:</strong> Location accuracy is
<a href="http://en.wikipedia.org/wiki/Dilution_of_precision_(GPS)">relatively well-defined</a> for GPS, but I’m not sure what happens when
cell towers or WiFi access points are incorporated into location fixes.</li>
  <li><strong>Longer sampling interval:</strong> Maybe Google Latitude assumes that precise
location tracking is less important when driving.</li>
</ul>

<p>To test this last hypothesis, I also <em>plot sampling interval versus speed:</em></p>

<p><img src="https://lh5.googleusercontent.com/-__3m3z_oQfQ/UJcC4GeNhyI/AAAAAAAAALQ/HI6XQdHjtns/s640/timings-vs-speed.jpg"></p>

<p>Nothing conclusive there.</p>

<h2 id="conclusion">Conclusion</h2>

<p><em>The problem appears to be sampling frequency.</em> To reduce battery usage, <em>Google
Latitude polls about once every two minutes.</em> While it has some mechanism for
polling more often in periods of high activity, it’s unclear how that works.</p>

<p>Reliance on fixes from cell towers and WiFi may be reducing location quality
in more remote areas. Testing this hypothesis is difficult: how do you
quantify remote? One possibility is to compute nearest-neighbor distance
against <a href="http://www.maxmind.com/en/worldcities">a database of cities</a>. Another confounding factor is the
reliability of those <code>accuracy</code> values. Improving upon that would likely
involve manual labelling.</p>

<h2 id="why-do-this">Why Do This?</h2>

<p><blockquote><p>Accuracy is not binary.</p></blockquote></p>

<p>In Quantified Self applications, we <em>use personal data to drive changes in our
lives.</em> We put a lot of trust in the accuracy and relevance of that data, and
<em>we extend that trust to the tools and services that collect it.</em>
We trust <a href="http://www.fitbit.com/">Fitbit</a> to track our fitness.
We trust <a href="http://www.myzeo.com/sleep/">Zeo</a> to improve our sleep.
We trust <a href="http://www.lumosity.com/">Lumosity</a> to train our perception and attentiveness.</p>

<p>In giving so much trust to these tools, we sometimes forget that <em>data are not
infallible.</em>
<a href="http://www.pbs.org/wgbh/aso/databank/entries/dp27un.html">Physics guarantees</a> that there is no such thing as perfect data. <em>All
data contain error.</em> As a system consisting of geosynchronous satellites that
travel at relativistically significant speeds and beam data
through our multilayered atmosphere to tiny chip radios sandwiched between
layers of dense circuitry, GPS is understandably <a href="http://www.kowoma.de/en/gps/errors.htm">error-prone.</a>
When your chosen tools and services add noise on top of that, it’s reasonable
to ask:</p>

<p><blockquote><p>How much trust should I place in the output?</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persistent Location Tracking: Picking The Right Tool]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/29/persistent-location-tracking-picking-the-right-tool/"/>
    <updated>2012-10-29T18:37:00-04:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/29/persistent-location-tracking-picking-the-right-tool</id>
    <content type="html"><![CDATA[<p>In this post, I compare Google Latitude and InstaMapper, two popular services
for persistent location tracking. I walk through installation and data
extraction via API for each service, then provide some subjective first
impressions as to which one better suits my location-tracking needs.</p>

<!-- more -->

<h2 id="evaluating-tools">Evaluating Tools</h2>

<p>As the ecosystem of self-tracking tools <a href="http://quantifiedself.com/2011/03/the-state-of-quantified-self-a-year-of-growth/">grows exponentially</a>,
choosing the right tool is becoming an increasingly daunting task.
To add to the complexity of this decision, self-tracking tools are
<em>highly personal.</em></p>

<p><blockquote><p>How do I pick the best tool for me?</p></blockquote></p>

<p>This question is far from monolithic:</p>

<ul>
  <li>Do I want <strong>manual</strong> or <strong>automatic</strong> tracking?
    <ul>
      <li>How much <em>time and effort</em> am I willing to spend on self-tracking?</li>
      <li>Is a hybrid <em>automatic plus manual annotation</em> approach workable?</li>
    </ul>
  </li>
  <li>Do I want <strong>persistent</strong> tracking?
    <ul>
      <li><em>All day?</em> Or only at predetermined times?</li>
      <li><em>Every day?</em> What if I’m on vacation?</li>
    </ul>
  </li>
  <li>Do I want <strong>raw data access?</strong>
    <ul>
      <li>How do I want to access that data? Through <em>Excel CSV files?</em>
Via a <em>developer-friendly API?</em></li>
      <li>What <em>granularity</em> do I want? Sub-second? Daily?</li>
      <li>What <em>parameters</em> do I want? For location, is <code>(lat, long)</code> enough?
Do I want <em>altitude</em> as well? GPS fix <em>accuracy?</em></li>
    </ul>
  </li>
</ul>

<p>Without a <em>searchable database of self-tracking tools</em>, these questions can be
difficult to answer. The main <a href="http://quantifiedself.com/">Quantified Self website</a> includes a
<a href="http://quantifiedself.com/guide/">Guide to Self-Tracking Tools</a>, but their implementation is subject to
criticism:</p>

<p><blockquote><p>In a report to RWJF, Project Director Alexandra C. Carmichael noted that the guide was more a catalog of tools than a useful manual for people wanting to choose and use these tools.</p><footer><strong>Robert Wood Johnson Foundation</strong> <cite><a href='http://www.rwjf.org/content/dam/farm/reports/program_results_reports/2012/rwjf400733'>www.rwjf.org/content/dam/farm/&hellip;</a></cite></footer></blockquote></p>

<p>This is a point worth repeating. Simply listing tools is <em>not enough</em>; a
database of tools <em>must answer these basic questions</em> to be useful. A quick
search on the Guide for <a href="http://quantifiedself.com/guide/tag/location">location-related tools</a>
comes up short:</p>

<p><img src="https://lh6.googleusercontent.com/-1r1swg9oBxo/UJA_is6HMSI/AAAAAAAAAIQ/zoiBG4fRAPU/s640/qs-guide-location-apps.jpg"></p>

<p>Why is <a href="http://moodpanda.com/">MoodPanda</a> listed? I suppose it must location-tag mood entries,
but <em>that isn’t made explicit in the description.</em>
<a href="http://www.momentoapp.com/">Momento</a> makes a bit more sense, but it’s primarily a journalling app.
<a href="https://foursquare.com/">Foursquare</a> is definitely location-based, but anyone unfamiliar with
it <em>must read its description closely</em> to realize that it relies on
manual check-ins.</p>

<p>In lieu of a useful tool database, the only effective option is direct
evaluation. By investigating two popular location tracking tools, I’ll
demonstrate how such an evaluation might be carried out.</p>

<h2 id="the-tools">The Tools</h2>

<h3 id="google-latitude">Google Latitude</h3>

<p>Google Latitude bills itself primarily as a social location sharing service:</p>

<p><img src="https://lh5.googleusercontent.com/-ZGGebfguFEk/UJA_hShHXRI/AAAAAAAAAH4/kziP-01pI_g/s800/banner-glatitude.jpg"></p>

<p>Social capacities aside, the <a href="https://maps.google.com/locationhistory/b/0">Location History</a>
functionality can be used as a persistent location-tracking tool.</p>

<h3 id="instamapper">InstaMapper</h3>

<p>I first heard of InstaMapper from
<a href="http://vimeo.com/8545134">Ted Power’s talk on geo-tracking</a>. Unlike Google
Latitude, InstaMapper focuses more on personal tracking:</p>

<p><img src="https://lh4.googleusercontent.com/-dOIGJWcJ7uc/UJA_h8QM2FI/AAAAAAAAAIA/0owDXIrD6Ro/s800/banner-instamapper.jpg"></p>

<h3 id="the-criteria">The Criteria</h3>

<p>My ideal location tracking tool is:</p>

<ul>
  <li><strong>Android-compatible:</strong> It should work with my <a href="www.razr.com/RAZR-M">RAZR M</a> running
<a href="http://www.android.com/about/ice-cream-sandwich/">Android 4.0.4 (Ice Cream Sandwich)</a>.</li>
  <li><strong>Battery-friendly:</strong> It should allow me to go at least a day <em>without
recharging.</em></li>
  <li><strong>Automatic:</strong> It should track my location <em>without requiring check-ins</em>
or other manual input.</li>
  <li><strong>Persistent:</strong> It should track my location <em>constantly.</em></li>
  <li><strong>Fine-grained:</strong> It should be capable of <em>per-minute resolution or better.</em></li>
  <li><strong>Developer-friendly:</strong> It should <em>provide an API</em> for fetching location
history, and the data offered through that API should be <em>as complete as
possible.</em></li>
</ul>

<p>Both tools are <em>Android-compatible</em>, <em>automatic</em>, and <em>persistent</em> already,
which narrows down the list of criteria to evaluate.</p>

<h2 id="installation">Installation</h2>

<h3 id="google-latitude-1">Google Latitude</h3>

<p>Enabling automatic location tracking on Android requires <em>only a single
setting change:</em></p>

<p><img src="https://lh4.googleusercontent.com/-lGwyff6IKAQ/UJA_jzsY3CI/AAAAAAAAAIw/qgFZr8kT1xE/s288/install-glatitude-step1.jpg">
<img src="https://lh5.googleusercontent.com/-v-7rvy4kAk4/UJA_kbfLddI/AAAAAAAAAI4/MLzFAjPXgR8/s288/install-glatitude-step2.jpg">
<img src="https://lh3.googleusercontent.com/-rooAhkMibWg/UJA_kjz8o1I/AAAAAAAAAJA/sCnrK_yNHbE/s288/install-glatitude-step3.jpg">
<img src="https://lh5.googleusercontent.com/-8jz3N_5HkUA/UJA_k6mNTAI/AAAAAAAAAJI/qerZyoCzXbo/s288/install-glatitude-step4.jpg"></p>

<h3 id="instamapper-1">InstaMapper</h3>

<p>I followed the Android installation directions <a href="http://www.instamapper.com/android_howto.html">here</a>.
After you <a href="https://www.instamapper.com/fe?page=register">register for an InstaMapper account</a>, you install
InstaMapper’s <a href="https://play.google.com/store/apps/details?id=com.instamapper.gpstracker&amp;hl=en">GPS Tracker app</a>:</p>

<p><img src="https://lh5.googleusercontent.com/-FJZ7CxlpWSE/UJA_lDw4OVI/AAAAAAAAAJQ/pCreIS9emn0/s288/install-instamapper-step1.jpg"></p>

<h3 id="comparison">Comparison</h3>

<p>Both tools are easily installed, but <em>Google Latitude</em> wins on simplicity. This
is unsurprising, as Google Latitude comes pre-installed.</p>

<h2 id="data-export">Data Export</h2>

<h3 id="google-latitude-2">Google Latitude</h3>

<p>To export data from the Location History dashboard, click on <em>Export KML</em>
under the calendar widget:</p>

<p><img src="https://lh3.googleusercontent.com/-N_E7GC01k3I/UJA_lY310cI/AAAAAAAAAJY/B6qCcqCAPm0/s800/export-glatitude.jpg"></p>

<h3 id="instamapper-2">InstaMapper</h3>

<p>Head to the <em>data page</em> for your device:</p>

<p><img src="https://lh4.googleusercontent.com/-WiPRLpRcC9Q/UJA_l7UA-cI/AAAAAAAAAJg/ienRb1xYY2o/s400/export-instamapper-step1.jpg">
<img src="https://lh4.googleusercontent.com/-kvWTFuAZoJ8/UJA_mK_zsbI/AAAAAAAAAJk/aG-iJs2Sfp8/s400/export-instamapper-step2.jpg"></p>

<p>Here’s where this process gets weird. To export your data, you first have to
<em>define a track:</em></p>

<p><img src="https://lh3.googleusercontent.com/-0j8AdUIinoU/UJA_msnEnLI/AAAAAAAAAKM/LfOZOnEyOJA/s400/export-instamapper-step3.jpg">
<img src="https://lh5.googleusercontent.com/-aiXmPGeKOxo/UJA_nRZr93I/AAAAAAAAAJ0/wWNddc34ZXo/s400/export-instamapper-step4.jpg">
<img src="https://lh6.googleusercontent.com/-tgipa_V9TfU/UJA_ncU8LeI/AAAAAAAAAJ8/2HIvGJ_ycfY/s400/export-instamapper-step5.jpg"></p>

<p>Once the track is created, you can <em>visit the Track Manager</em> to
export your track data in a variety of formats:</p>

<p><img src="https://lh6.googleusercontent.com/-OyteTDJcqYk/UJA_n7L2QvI/AAAAAAAAAKE/tvEkdMbB-Ik/s400/export-instamapper-step6.jpg">
<img src="https://lh5.googleusercontent.com/-e52trEcnN0I/UJA_ob4XGgI/AAAAAAAAAKI/REcryQodFq0/s400/export-instamapper-step7.jpg"></p>

<h3 id="comparison-1">Comparison</h3>

<p>This one goes to <em>Google Latitude</em>. Aside from the terrible UI flow,
InstaMapper has some other problems:</p>

<ul>
  <li>The <code>accuracy</code> field is missing, making it harder to <em>filter out noisy
readings.</em></li>
  <li>As stated in the <a href="http://www.instamapper.com/faq.html">InstaMapper FAQ</a>,
data access is <em>limited to the
previous 30 days or 100 000 locations.</em></li>
</ul>

<h2 id="api-fetching">API Fetching</h2>

<h3 id="tailers-and-streams">Tailers and Streams</h3>

<p>Many real-time APIs provide <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> endpoints for fetching
time-bounded chunks of data:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://www.googleapis.com/latitude/v1/location?key=INSERT-YOUR-KEY&amp;min-time=1111&amp;max-time=2222&amp;max-results=10</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>By keeping track of a <code>since</code> time to fetch after, we can easily turn this
into a stream:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">request</span><span class="p">(</span><span class="n">since</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># TODO: actually fetch data</span>
</span><span class='line'>  <span class="k">pass</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">sleep</span><span class="p">(</span><span class="n">since</span><span class="p">,</span> <span class="n">freq</span><span class="p">):</span>
</span><span class='line'>  <span class="n">elapsed</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">since</span>
</span><span class='line'>  <span class="n">wait</span> <span class="o">=</span> <span class="n">freq</span> <span class="o">-</span> <span class="n">elapsed</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">wait</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">wait</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">poll</span><span class="p">(</span><span class="n">freq</span><span class="p">):</span>
</span><span class='line'>  <span class="n">since</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sleep</span><span class="p">(</span><span class="n">since</span><span class="p">,</span> <span class="n">freq</span><span class="p">)</span>
</span><span class='line'>    <span class="n">locations</span> <span class="o">=</span> <span class="n">request</span><span class="p">(</span><span class="n">since</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">locations</span><span class="p">:</span>
</span><span class='line'>      <span class="k">continue</span>
</span><span class='line'>    <span class="n">doSomething</span><span class="p">(</span><span class="n">locations</span><span class="p">)</span>
</span><span class='line'>    <span class="n">since</span> <span class="o">=</span> <span class="n">locations</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">timestamp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This pattern is often referred to as a <em>tailer.</em> Why? Suppose we have a simple
implementation of <code>doSomething()</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">doSomething</span><span class="p">(</span><span class="n">locations</span><span class="p">):</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">location</span> <span class="ow">in</span> <span class="n">locations</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">location</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This prints out locations as they are received, similar to UNIX <code>tail -F</code>. By
adjusting <code>freq</code> I can make different real-time guarantees, although at some
point the upstream API will start throttling my requests.</p>

<h3 id="google-latitude-3">Google Latitude</h3>

<p>You can see a working tailer implementation <a href="https://github.com/candu/quantified-savagery-files/blob/master/Location/tail_glatitude.py">here</a>.</p>

<p>To access the <a href="https://developers.google.com/latitude/">Google Latitude API</a>, you first need to
<a href="https://code.google.com/apis/console/b/0/">register an application</a>. This gives you the necessary
parameters <code>YOUR_KEY</code>, <code>YOUR_SECRET</code> for stepping through the OAuth flow.</p>

<p>With the Python library <a href="http://code.google.com/p/google-api-python-client/wiki/OAuth2Client">oauthclient2</a>, retrieving OAuth credentials is
relatively painless:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">oauth2client.client</span> <span class="kn">import</span> <span class="n">OAuth2WebServerFlow</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">oauth2client.file</span> <span class="kn">import</span> <span class="n">Storage</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">oauth2client.tools</span> <span class="kn">import</span> <span class="n">run</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">getCredentials</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">secret</span><span class="p">):</span>
</span><span class='line'>  <span class="n">flow</span> <span class="o">=</span> <span class="n">OAuth2WebServerFlow</span><span class="p">(</span>
</span><span class='line'>    <span class="n">client_id</span><span class="o">=</span><span class="n">key</span><span class="p">,</span>
</span><span class='line'>    <span class="n">client_secret</span><span class="o">=</span><span class="n">secret</span><span class="p">,</span>
</span><span class='line'>    <span class="n">scope</span><span class="o">=</span><span class="err">’</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">googleapis</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">auth</span><span class="o">/</span><span class="n">latitude</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">best</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>    <span class="n">redirect_uri</span><span class="o">=</span><span class="err">’</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8080</span><span class="o">/</span><span class="n">oauth2callback</span><span class="err">’</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="n">storage</span> <span class="o">=</span> <span class="n">Storage</span><span class="p">(</span><span class="err">‘</span><span class="o">.</span><span class="n">creds</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">run</span><span class="p">(</span><span class="n">flow</span><span class="p">,</span> <span class="n">storage</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>oauth2client.tools.run()</code> invokes a browser window and starts an HTTP server
to receive the OAuth callback. With the credentials, we can <em>make a signed API
request:</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">httplib2</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">since</span><span class="p">):</span>
</span><span class='line'>  <span class="n">http</span> <span class="o">=</span> <span class="n">httplib2</span><span class="o">.</span><span class="n">Http</span><span class="p">()</span>
</span><span class='line'>  <span class="n">credentials</span> <span class="o">=</span> <span class="n">getCredentials</span><span class="p">(</span><span class="n">YOUR_KEY</span><span class="p">,</span> <span class="n">YOUR_SECRET</span><span class="p">)</span>
</span><span class='line'>  <span class="n">credentials</span><span class="o">.</span><span class="n">authorize</span><span class="p">(</span><span class="n">http</span><span class="p">)</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="err">‘</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">googleapis</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">latitude</span><span class="o">/</span><span class="n">v1</span><span class="o">/</span><span class="n">location</span><span class="err">?</span><span class="o">%</span><span class="n">s</span><span class="err">’</span> <span class="o">%</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlencode</span><span class="p">({</span>
</span><span class='line'>    <span class="err">‘</span><span class="nb">max</span><span class="o">-</span><span class="n">results</span><span class="err">’</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>    <span class="err">‘</span><span class="nb">min</span><span class="o">-</span><span class="n">time</span><span class="err">’</span><span class="p">:</span> <span class="n">since</span><span class="p">,</span>
</span><span class='line'>    <span class="err">‘</span><span class="nb">max</span><span class="o">-</span><span class="n">time</span><span class="err">’</span><span class="p">:</span> <span class="n">since</span> <span class="o">+</span> <span class="mi">10</span> <span class="o">*</span> <span class="p">(</span><span class="mi">15</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">),</span>
</span><span class='line'>    <span class="err">‘</span><span class="n">granularity</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">best</span><span class="err">’</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="n">resp</span><span class="p">,</span> <span class="n">content</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="err">‘</span><span class="n">error</span><span class="err">’</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="err">‘</span><span class="n">data</span><span class="err">’</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="err">‘</span><span class="n">items</span><span class="err">’</span><span class="p">,</span> <span class="p">[])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There are some minor details:</p>

<ul>
  <li>The API <em>uses milliseconds for its timestamps</em>, so my <code>since</code> values take
this into account.</li>
  <li>Without <code>max-time</code>, the API <em>returns the most recent</em> <code>max-results</code> locations.
I supply a 150-second window.</li>
  <li>If there are no locations within the given time range, the API <strong>does not</strong>
populate <code>data['data']['items']</code>. I use <code>get()</code> to work around the resulting
<code>KeyError</code>.</li>
  <li>In the event of an error, the API populates <code>data['error']</code>. I use <code>None</code> as
a <em>sentinel value</em> to indicate that an error has occurred.</li>
</ul>

<h3 id="instamapper-3">InstaMapper</h3>

<p>You can see a working tailer implementation <a href="https://github.com/candu/quantified-savagery-files/blob/master/Location/tail_instamapper.py">here</a>.</p>

<p>InstaMapper doesn’t use OAuth; instead, it uses a unique key
<code>YOUR_KEY</code> that is passed as a GET parameter to the REST API:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">httplib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">since</span><span class="p">):</span>
</span><span class='line'>  <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">‘</span><span class="n">action</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">getPositions</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>    <span class="err">‘</span><span class="n">key</span><span class="err">’</span><span class="p">:</span> <span class="n">YOUR_KEY</span><span class="p">,</span>
</span><span class='line'>    <span class="err">‘</span><span class="n">num</span><span class="err">’</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>    <span class="err">‘</span><span class="n">from_ts</span><span class="err">’</span><span class="p">:</span> <span class="n">since</span><span class="p">,</span>
</span><span class='line'>    <span class="err">‘</span><span class="n">format</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">json</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="err">‘</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">instamapper</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">api</span><span class="err">?</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span><span class="err">’</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">APIHOST</span><span class="p">,</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlencode</span><span class="p">(</span><span class="n">params</span><span class="p">))</span>
</span><span class='line'>  <span class="n">conn</span> <span class="o">=</span> <span class="n">httplib</span><span class="o">.</span><span class="n">HTTPConnection</span><span class="p">(</span><span class="err">‘</span><span class="n">www</span><span class="o">.</span><span class="n">instamapper</span><span class="o">.</span><span class="n">com</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="err">‘</span><span class="n">GET</span><span class="err">’</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>  <span class="n">resp</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">resp</span><span class="o">.</span><span class="n">status</span> <span class="o">!=</span> <span class="mi">200</span><span class="p">:</span>
</span><span class='line'>    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="err">‘</span><span class="n">HTTP</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span> <span class="p">{</span><span class="mi">1</span><span class="p">}</span><span class="err">’</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">status</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">reason</span><span class="p">))</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="err">‘</span><span class="n">positions</span><span class="err">’</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="comparison-2">Comparison</h3>

<p>Although InstaMapper’s API is arguably simpler to use, I’ll award this one to
<em>Google Latitude:</em></p>

<ul>
  <li><strong>Security:</strong> InstaMapper uses unencrypted HTTP GET requests, so anyone
running a <a href="http://www.wireshark.org/">packet sniffer</a> on my network has <em>complete access to my
location data.</em> Google Latitude uses HTTPS and OAuth. No contest.</li>
  <li><strong>Support:</strong> I can <em>leverage the community of Google API users</em> to help resolve
any issues I encounter.</li>
  <li><strong>Data:</strong> again, InstaMapper is <em>missing location accuracy.</em></li>
  <li><strong>Request Volume:</strong> InstaMapper permits one request every 10 seconds. Google
Latitude allows 1 000 000 requests per day, or <em>one request every 0.0864
seconds.</em></li>
</ul>

<h2 id="battery-usage">Battery Usage</h2>

<p>To find out how battery-friendly the two Android apps are, I <em>check the
Battery Manager:</em></p>

<p><img src="https://lh6.googleusercontent.com/-B246p7a_vbg/UJA_i7iGdyI/AAAAAAAAAIU/Q6U6hLdc2hg/s288/battery-overview.jpg">
<img src="https://lh5.googleusercontent.com/-X6ClOm7t-8s/UJA_jVwjgrI/AAAAAAAAAIk/V1lOfjmpO2o/s288/battery-maps.jpg">
<img src="https://lh5.googleusercontent.com/-r7N176E75z0/UJA_jdJfs_I/AAAAAAAAAIg/XQnPc0Q2lgY/s288/battery-gps-tracker.jpg"></p>

<h3 id="comparison-3">Comparison</h3>

<p><em>Google Latitude</em> wins this one as well. InstaMapper keeps the GPS radio
running almost constantly, whereas Google Latitude manages to sip radio
access. I’m guessing that it uses WiFi, cell towers, and other non-GPS sources
where possible.</p>

<p>Without these power consumption improvements, InstaMapper’s GPS Tracker <em>uses
an order of magnitude more energy</em> than Google Latitude. Ouch.</p>

<h2 id="first-impressions">First Impressions</h2>

<p>After a day of persistent location tracking with both Google Latitude and
InstaMapper, <em>Google Latitude wins hands-down.</em> It’s <em>easy to install</em>, it
provides <em>simple and secure data access</em> via <code>oauth2client</code>, and it <em>preserves
battery life nicely.</em></p>
]]></content>
  </entry>
  
</feed>
