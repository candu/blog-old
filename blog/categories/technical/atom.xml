<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technical | Quantified Savagery]]></title>
  <link href="http://blog.savageevan.com/blog/categories/technical/atom.xml" rel="self"/>
  <link href="http://blog.savageevan.com/"/>
  <updated>2013-10-10T15:30:30-07:00</updated>
  <id>http://blog.savageevan.com/</id>
  <author>
    <name><![CDATA[Evan Savage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Applying Genetic Research To My 23andMe Data]]></title>
    <link href="http://blog.savageevan.com/blog/2013/02/07/applying-genetic-research-to-my-23andme-data/"/>
    <updated>2013-02-07T16:29:00-08:00</updated>
    <id>http://blog.savageevan.com/blog/2013/02/07/applying-genetic-research-to-my-23andme-data</id>
    <content type="html"><![CDATA[<p>To calculate your risk of various diseases, 23andMe scours the medical research
literature for studies that correlate incidence rates for those diseases with
mutations at specific locations in the human genome. The locations where these
mutations commonly occur are referred to as single-nucleotide polymorphisms, or
<a href="http://en.wikipedia.org/wiki/Single-nucleotide_polymorphism">SNPs</a>.</p>

<p>In this post, I show how I applied the findings of <a href="http://www.nature.com/npp/journal/v33/n12/full/npp200817a.html">this study about caffeine-induced anxiety</a>
to discover more about myself. I have no genetic research background
whatsoever, and my knowledge of genetics is minimal, so it’s amazing that
this is slowly becoming accessible to a wider audience.</p>

<!-- more -->

<h2 id="the-genetic-culprit">The Genetic Culprit</h2>

<p>From the study abstract:</p>

<p><blockquote><p>At the 150 mg dose of caffeine, we found a significant association between caffeine-induced anxiety (Visual Analog Scales, VAS) and ADORA2A rs5751876 (1976C/T), rs2298383 (intron 1a) and rs4822492 (3′-flank), and DRD2 rs1110976 (intron 6).</p><footer><strong>Neuropsychopharmacology</strong> <cite><a href='http://www.nature.com/npp/journal/v33/n12/full/npp200817a.html'>www.nature.com/npp/journal/v33/&hellip;</a></cite></footer></blockquote></p>

<p>The SNPs <code>rs5751876</code>, <code>rs2298383</code>, <code>rs4822492</code>, and a few others are claimed
here to relate to caffeine-induced anxiety. Reading further,
<a href="http://www.nature.com/npp/journal/v33/n12/fig_tab/npp200817f4.html#figure-title">Figure 4</a> and <a href="http://www.nature.com/npp/journal/v33/n12/fig_tab/npp200817t4.html#figure-title">Figure 5</a> show <em>which variations are
correlated with higher anxiety.</em> Here’s a quick summary of the
high-anxiety variations listed in those figures:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rs5751876: T/T (vs. C/C, C/T)
</span><span class='line'>rs2298383: C/C (vs. T/T, C/T)
</span><span class='line'>rs4822492: C/C (vs. G/G, G/C)
</span><span class='line'>rs1110976: G/G (vs. G/-)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Armed with this information, I can check my own genome for variations at those
SNPs.</p>

<h2 id="checking-my-genome">Checking My Genome</h2>

<p>In the appendix of <a href="http://blog.savageevan.com/blog/2013/02/04/the-behavioral-economics-of-23andme-results/">this blog post</a>,
I discuss how to retrieve your genetic data from the 23andMe API. I followed
those directions with two changes:</p>

<ul>
  <li>I used the authorization scope <code>genomes</code>;</li>
  <li>I accessed the API endpoint <code>https://api.23andme.com/1/genomes/&lt;id&gt;</code>, where
<code>&lt;id&gt;</code> is my internal ID. This ID is returned with every response from their
API.</li>
</ul>

<p>I downloaded the genomic data as <code>genome.json</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl https://api.23andme.com/1/genomes/&lt;id>/ -H "Authorization: Bearer &lt;access_token>" &gt; genome.json</span></code></pre></td></tr></table></div></figure></notextile></div></access_token></id></p>

<p>To help extract the specific SNPs listed above, I wrote
<a href="https://github.com/candu/quantified-savagery-files/blob/master/Genetics/extractSNP.py">a quick Python script</a>.
Running it, I get my results:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python extractSNP.py rs5751876 rs2298383 rs4822492 rs1110976 &lt; genome.json
</span><span class='line'>rs5751876       TT
</span><span class='line'>rs2298383       CC</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>23andMe doesn’t provide data on the <code>rs4822492</code> or <code>rs1110976</code> SNPs, but I can
see that <em>I have the high-anxiety variations</em> at <code>rs5751876</code> and <code>rs2298383</code>.</p>

<p>The script uses 23andMe’s <a href="https://api.23andme.com/res/txt/snps.data">SNP list</a>,
which identifies the locations of all SNPs that they look for. The first time
you run <code>extractSNP.py</code>, it will generate an index of all 23andMe SNPs in
<code>.snps-index</code> to make subsequent runs faster. Once you have your <code>genome.json</code>
data and have built the <code>.snps-index</code> index, <em>you can look up any SNP or group
of SNPs in about a second.</em></p>

<h2 id="summary">Summary</h2>

<p>To apply genetic research findings to your genomic data:</p>

<ul>
  <li>Use the process described in <a href="http://blog.savageevan.com/blog/2013/02/04/the-behavioral-economics-of-23andme-results/">this blog post</a>
with scope <code>genomes</code> and API endpoint <code>https://api.23andme.com/1/genomes/&lt;id&gt;</code>
to download your genetic data. Save it as <code>genome.json</code>.</li>
  <li>Download <a href="https://github.com/candu/quantified-savagery-files/blob/master/Genetics/extractSNP.py">my script</a>
into the same folder as <code>genome.json</code>.</li>
  <li>Find a paper, journal article, etc. that mentions specific SNPs
(those funny <code>rsXXX</code> or <code>iXXX</code> numbers).</li>
  <li>Run <code>python extractSNP.py rsXXX &lt; genome.json</code> to search for those SNPs in
your genome.</li>
</ul>

<h2 id="caveats">Caveats</h2>

<p>This is still a highly manual process, and you’ll need some familiarity
with the command line to pull it off. We haven’t quite reached the
promised near-future where the deepest insights about our personal
genetics are easily available.</p>

<p>23andMe’s data is incomplete: they only had two of the four listed SNPs.
That said, it’s far better than nothing!</p>

<p>Also, there’s room for skepticism regarding the underlying research. Only
102 participants took part, all of European-American descent. The subjects
all had stated caffeine intake levels of less than 300mg per day, or about
3 cups’ worth - that’s a pretty wide range of potential tolerances. Subjects
rated their anxiety on a subjective scale. The researchers also took
measurements of heart rate and blood pressure, but did not incorporate that
data into the anxiety rankings.</p>

<p>No single study is perfect. For more reliable results, you’ll want 
to dig up findings that are supported by multiple studies.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Behavioral Economics of 23AndMe Results]]></title>
    <link href="http://blog.savageevan.com/blog/2013/02/04/the-behavioral-economics-of-23andme-results/"/>
    <updated>2013-02-04T10:20:00-08:00</updated>
    <id>http://blog.savageevan.com/blog/2013/02/04/the-behavioral-economics-of-23andme-results</id>
    <content type="html"><![CDATA[<p>Over the holidays, I received a 23andMe genetic testing kit as a gift. In
this post, I’ll take a look at my results through the lens of prospect
theory, which aims to quantify our perception of risk. 23andMe results
estimate your lifetime likelihood of various medical conditions, making them
a great dataset for testing out these concepts in behavioral economics.</p>

<!-- more -->

<h2 id="prospect-theory-a-quick-example">Prospect Theory: A Quick Example</h2>

<p>Suppose I offer you a bet. I flip a fair coin once. Heads, you
gain \$ 1000; tails, you lose \$ 900. Do you take the bet? Probability
dictates that you should, since you would expect to come out
$ (1000 - 900) / 2 = 50 $ dollars ahead.</p>

<p>If you’re like most people, though, you have a <em>powerful aversion</em> to losing
\$ 900. This aversion is powerful enough that you’ll decline the bet. This
only makes sense if losing \$ 900 has a greater negative value than the positive
value of gaining \$ 1000. In other words, your perception of value is
<em>non-linear</em>. This perception underpins many real-world bets that
make little sense from an expected utility standpoint:</p>

<ul>
  <li><em>Insurance:</em> the buyer takes a small certain loss to avoid the risk of an
uncertain and potentially large loss;</li>
  <li><em>Security:</em> the property owner takes a small certain loss to reduce the
risk of an uncertain and potentially large loss;</li>
  <li><em>Lotteries:</em> the ticket holder takes a small certain loss to try for an
extremely unlikely but massive gain.</li>
</ul>

<p><a href="http://www.princeton.edu/~kahneman/docs/Publications/prospect_theory.pdf">Prospect theory</a> creates a mathematical framework for understanding our
perceptions of value and risk. It’s an awesome paper with highly
approachable mathematics. Definitely recommended reading for anyone
interested in economics, game theory, and the like.</p>

<h2 id="my-disease-risk">My Disease Risk</h2>

<p>Among other things, 23andMe can estimate your lifetime risk of various
diseases. This information is divided into three categories according to
whether your risk is highly elevated, highly decreased, or roughly typical:</p>

<p><img src="https://lh4.googleusercontent.com/-xccLcJ7-CqU/URBE7QF2tCI/AAAAAAAAATs/sFewavaz6P4/s640/23andme_elevated_risk.jpg">
<img src="https://lh4.googleusercontent.com/-D7AY4foE6Qs/URBE8FA3lBI/AAAAAAAAAT0/x76tZ9J5HP0/s640/23andme_decreased_risk.jpg">
<img src="https://lh4.googleusercontent.com/-HU05eMXwI4M/URBE89TEu0I/AAAAAAAAAT8/MihVGsTQkLQ/s640/23andme_typical_risk.jpg"></p>

<p>Within each category, the diseases are ordered by decreasing confidence
rating, then by decreasing absolute risk. The different confidence levels
are as follows:</p>

<ol>
  <li><em>Preliminary Research:</em> fewer than 100 people studied</li>
  <li><em>Preliminary Research:</em> fewer than 750 people studied </li>
  <li><em>Preliminary Research:</em> a single study with 750+ participants</li>
  <li><em>Established Research:</em> multiple studies with 750+ participants</li>
</ol>

<p>The 23andMe dashboard doesn’t show estimated risk for lower-confidence
findings, but I can fetch that information through their <a href="https://api.23andme.com/">API</a>.</p>

<p>Armed with my raw risk data, I can now play around with a pair of alternative
disease rankings. As an anchoring point, here’s my disease ranking by
absolute risk:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python risksort.py risk &lt; risks.json
</span><span class='line'> 1                                            Obesity 0.5701
</span><span class='line'> 2                             Coronary Heart Disease 0.5464
</span><span class='line'> 3                                Atrial Fibrillation 0.3392
</span><span class='line'> 4                                    Prostate Cancer 0.2602
</span><span class='line'> 5                   Age-related Macular Degeneration 0.2459
</span><span class='line'> 6                                    Type 2 Diabetes 0.1969
</span><span class='line'> 7                             Venous Thromboembolism 0.1279
</span><span class='line'> 8                                        Lung Cancer 0.0823
</span><span class='line'> 9                                          Psoriasis 0.0708
</span><span class='line'>10                                         Gallstones 0.0618
</span><span class='line'>11                                Alzheimer’s Disease 0.0493
</span><span class='line'>12                                  Colorectal Cancer 0.0417
</span><span class='line'>13                             Chronic Kidney Disease 0.0356
</span><span class='line'>14                               Rheumatoid Arthritis 0.0300
</span><span class='line'>15                             Restless Legs Syndrome 0.0245
</span><span class='line'>16                               Exfoliation Glaucoma 0.0217
</span><span class='line'>17                                           Melanoma 0.0216
</span><span class='line'>18                                    Type 1 Diabetes 0.0137
</span><span class='line'>19                                Parkinson’s Disease 0.0109
</span><span class='line'>20                                 Ulcerative Colitis 0.0066
</span><span class='line'>21                                 Multiple Sclerosis 0.0047
</span><span class='line'>22          Esophageal Squamous Cell Carcinoma (ESCC) 0.0043
</span><span class='line'>23     Stomach Cancer (Gastric Cardia Adenocarcinoma) 0.0028
</span><span class='line'>24                                    Crohn’s Disease 0.0016
</span><span class='line'>25                                   Bipolar Disorder 0.0015
</span><span class='line'>26                                     Celiac Disease 0.0005
</span><span class='line'>27               Scleroderma (Limited Cutaneous Type) 0.0005
</span><span class='line'>28                          Primary Biliary Cirrhosis 0.0004
</span><span class='line'>29                                      Breast Cancer 0.0000
</span><span class='line'>30               Lupus (Systemic Lupus Erythematosus) 0.0000</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The alternative ranking metric code can be found <a href="https://github.com/candu/quantified-savagery-files/blob/master/Genetics/risksort.py">here</a>.</p>

<h3 id="relative-risk-sorting">Relative-Risk Sorting</h3>

<p>An obvious ranking metric is relative risk, which is already provided in
the disease listing.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python risksort.py relative_risk &lt; risks.json
</span><span class='line'> 1                   Age-related Macular Degeneration 3.7542
</span><span class='line'> 2                               Exfoliation Glaucoma 2.8933
</span><span class='line'> 3                                   Bipolar Disorder 1.5000
</span><span class='line'> 4                                    Prostate Cancer 1.4593
</span><span class='line'> 5                                 Multiple Sclerosis 1.3824
</span><span class='line'> 6                                    Type 1 Diabetes 1.3431
</span><span class='line'> 7                               Rheumatoid Arthritis 1.2605
</span><span class='line'> 8                             Restless Legs Syndrome 1.2500
</span><span class='line'> 9                                Atrial Fibrillation 1.2494
</span><span class='line'>10     Stomach Cancer (Gastric Cardia Adenocarcinoma) 1.2174
</span><span class='line'>11          Esophageal Squamous Cell Carcinoma (ESCC) 1.1944
</span><span class='line'>12                             Coronary Heart Disease 1.1665
</span><span class='line'>13                             Venous Thromboembolism 1.0365
</span><span class='line'>14                             Chronic Kidney Disease 1.0349
</span><span class='line'>15                                        Lung Cancer 0.9728
</span><span class='line'>16                                            Obesity 0.8926
</span><span class='line'>17                                         Gallstones 0.8766
</span><span class='line'>18                                 Ulcerative Colitis 0.8571
</span><span class='line'>19                                    Type 2 Diabetes 0.7656
</span><span class='line'>20                                           Melanoma 0.7552
</span><span class='line'>21                                  Colorectal Cancer 0.7500
</span><span class='line'>22               Scleroderma (Limited Cutaneous Type) 0.7143
</span><span class='line'>23                                Alzheimer’s Disease 0.6885
</span><span class='line'>24                                Parkinson’s Disease 0.6770
</span><span class='line'>25                                          Psoriasis 0.6238
</span><span class='line'>26                          Primary Biliary Cirrhosis 0.5000
</span><span class='line'>27                                     Celiac Disease 0.4167
</span><span class='line'>28                                    Crohn’s Disease 0.3019
</span><span class='line'>29                                      Breast Cancer 0.0000
</span><span class='line'>30               Lupus (Systemic Lupus Erythematosus) 0.0000</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="perceived-relative-risk-sorting">Perceived Relative-Risk Sorting</h3>

<p>In prospect theory, a probability $ p $ has perceived weight $ w(p) $.
In <a href="http://psych.fullerton.edu/mBIRNBAUM/psych466/articles/Tversky_Kahneman_JRU_92.pdf">Advances in Prospect Theory: Cumulative Representation of Uncertainty</a>,
Tversky and Kahneman fit $ w $ to observed results for subjects evaluating
bets similar to the one listed above:</p>

<p><img src="https://lh6.googleusercontent.com/-5qE_0uX1hdI/URBE9pc7ViI/AAAAAAAAAUE/Y-zgLP8Yp-8/s400/prospect_positive_graph.jpg">
<img src="https://lh3.googleusercontent.com/-UWfKR_J2RBs/URBE-Dj67nI/AAAAAAAAAUM/CpO_z7VnPbM/s400/prospect_negative_graph.jpg"></p>

<p>The corresponding equations are</p>

<script type="math/tex; mode=display">
w^+(p) = \frac{p^{0.61}}{(p^{0.61} + (1-p)^{0.61})^{\frac{1}{0.61}}}
</script>

<p>for positive prospects and</p>

<script type="math/tex; mode=display">
w^-(p) = \frac{p^{0.69}}{(p^{0.69} + (1-p)^{0.69})^{\frac{1}{0.69}}}
</script>

<p>for negative prospects. If my risk is $ p_0 $ and the general risk is $ p $,
I can define my perceived relative risk as</p>

<script type="math/tex; mode=display">
r = \frac{w^+(p_0)}{w^+(p)}
</script>

<p>if $ p_0 &lt; p $ (I consider decreased risk as a positive prospect!) and</p>

<script type="math/tex; mode=display">
r = \frac{w^-(p_0)}{w^-(p)}
</script>

<p>otherwise. The resulting rankings are pretty close to ordinary relative
risk, but not identical:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ diff &lt;(python risksort.py relative_risk &lt; risks.json | cut -c-53) &lt;(python risksort.py perceived_relative_risk &lt; risks.json | cut -c-53)
</span><span class='line'>13,14c13,14
</span><span class='line'>&lt; 13                             Venous Thromboembolism
</span><span class='line'>&lt; 14                             Chronic Kidney Disease
</span><span class='line'>—
</span><span class='line'>&gt; 13                             Chronic Kidney Disease
</span><span class='line'>&gt; 14                             Venous Thromboembolism
</span><span class='line'>16,17c16,17
</span><span class='line'>&lt; 16                                            Obesity
</span><span class='line'>&lt; 17                                         Gallstones
</span><span class='line'>—
</span><span class='line'>&gt; 16                                         Gallstones
</span><span class='line'>&gt; 17                                            Obesity
</span><span class='line'>20,23c20,23
</span><span class='line'>&lt; 20                                           Melanoma
</span><span class='line'>&lt; 21                                  Colorectal Cancer
</span><span class='line'>&lt; 22               Scleroderma (Limited Cutaneous Type)
</span><span class='line'>&lt; 23                                Alzheimer’s Disease
</span><span class='line'>—
</span><span class='line'>&gt; 20                                  Colorectal Cancer
</span><span class='line'>&gt; 21                                           Melanoma
</span><span class='line'>&gt; 22                                Alzheimer’s Disease
</span><span class='line'>&gt; 23               Scleroderma (Limited Cutaneous Type)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The difference is due to distortion of small probabilities.</p>

<h2 id="further-ideas">Further Ideas</h2>

<p>So far, I’ve only used the probability weighting functions from prospect
theory. I could also assign values to each disease:</p>

<ul>
  <li><em>Financial:</em> how much does this disease cost to treat on average?</li>
  <li><em>Reduced Life Expectancy:</em> how many years of potential life do these
diseases claim on average?</li>
  <li><em>Lifestyle:</em> how much impact would this have on my highly active lifestyle?
On others who might have to support me? </li>
</ul>

<p>This is definitely morbid, but it’s also potentially worthwhile. After all,
insurance companies make <em>very detailed estimates of our risk.</em> They will
certainly incorporate genetic data into their models as soon as it’s legal to
do so. If we want to make more informed decisions in situations involving risk,
from medical insurance to lottery tickets, it helps to understand how we
value different outcomes.</p>

<h2 id="appendix-how-to-use-the-23andme-api">Appendix: How To Use The 23andMe API</h2>

<p>The 23andMe API is actually quite easy to use, and their <a href="https://api.23andme.com/docs/authentication/">documentation</a>
is excellent. Nevertheless, I’ll list the flow I went through to get my
genetic disease risk data. If you’re unfamiliar with <a href="http://oauth.net/2/">OAuth 2.0</a>,
the Google API docs include <a href="https://developers.google.com/accounts/docs/OAuth2">this primer</a> complete with cute stick
figure diagrams.</p>

<p>First, I log into the API console and create an app.
This gives me the <code>client_id</code> and <code>client_secret</code> parameters I need to
initiate the flow. Looking at the <a href="https://api.23andme.com/docs/reference/">23andMe API reference</a>, I see that I need
permissions under the <code>analyses</code> scope, so I request that by visiting</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://api.23andme.com/authorize/?redirect_uri=http://localhost:5000/receive_code/&amp;response_type=code&amp;client_id=&lt;client_id>&amp;scope=analyses</span></code></pre></td></tr></table></div></figure></notextile></div></client_id></p>

<p>in the browser. I’m redirected to</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost:5000/receive_code/?code=&lt;code></span></code></pre></td></tr></table></div></figure></notextile></div></code></p>

<p>which gives me the auth code I need to request a token:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl https://api.23andme.com/token/ \
</span><span class='line'>  -d client_id=&lt;client_id> \
</span><span class='line'>  -d client_secret=&lt;client_secret> \
</span><span class='line'>  -d code=&lt;code> \
</span><span class='line'>  -d grant_type=authorization_code \
</span><span class='line'>  -d "redirect_uri=http://localhost:5000/receive_code/" \
</span><span class='line'>  -d scope=analyses &gt; token.json
</span><span class='line'>$ jsonpp token.json
</span><span class='line'>{
</span><span class='line'>  "access_token": "&lt;access_token>"
</span><span class='line'>  "token_type": "bearer",
</span><span class='line'>  "expires_in": 86400,
</span><span class='line'>  "refresh_token": "&lt;refresh_token>"
</span><span class='line'>  "scope": "analyses"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></refresh_token></access_token></code></client_secret></client_id></p>

<p>Finally, I use my shiny new <code>access_token</code> to get my genetic risk data:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl https://api.23andme.com/1/risks/ \
</span><span class='line'>  -H “Authorization: Bearer &lt;access_token>" &gt; risks.json
</span><span class='line'>$ jsonpp risks.json | head
</span><span class='line'>[
</span><span class='line'>  {
</span><span class='line'>    "id": "6d2de403675a0d07",
</span><span class='line'>    "risks": [
</span><span class='line'>      {
</span><span class='line'>        "description": "Atrial Fibrillation",
</span><span class='line'>        "risk": 0.3392,
</span><span class='line'>        "population_risk": 0.2715,
</span><span class='line'>        "report_id": "atrialfib"
</span><span class='line'>      },</span></code></pre></td></tr></table></div></figure></notextile></div></access_token></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I'll Look Like In 50 Years]]></title>
    <link href="http://blog.savageevan.com/blog/2013/01/31/what-ill-look-like-in-50-years/"/>
    <updated>2013-01-31T12:43:00-08:00</updated>
    <id>http://blog.savageevan.com/blog/2013/01/31/what-ill-look-like-in-50-years</id>
    <content type="html"><![CDATA[<p>I spent a few weeks in the not-so-frozen Canadian northlands over the winter
holidays. While there, I had the chance to visit an old childhood favorite:
the <a href="http://ontariosciencecentre.ca/">Ontario Science Centre</a>, six floors of science-based awesomeness.
One of their current exhibits, the <a href="http://ontariosciencecentre.ca/aging/">Amazing Aging Machine</a>, uses a
computer vision software package called <a href="http://aprilage.com/">APRIL</a> to predict how your
face will change over the next 50 years.</p>

<p>In this post, I explore my results from that exhibit alongside a customized
aging I performed using the <a href="http://www.aprilage.com/AprilAPI_V2.pdf">APRIL API</a>.</p>

<!-- more -->

<h2 id="present-me">Present Me</h2>

<p>It’s not the most flattering photo, but here I am at 26:</p>

<p><img src="https://lh4.googleusercontent.com/-8qaAivSLFrI/UQrbKiU3JZI/AAAAAAAAARY/9e7IvKZUB00/s288/aging1.jpg"></p>

<h2 id="future-me">Future Me</h2>

<h3 id="take-one-amazing-aging-machine">Take One: Amazing Aging Machine</h3>

<p>First, my face balloons out massively:</p>

<p><img src="https://lh4.googleusercontent.com/-LCFkNNtDiJg/UQrbKwGOIQI/AAAAAAAAARg/SS9o98axBtU/s288/aging2.jpg"></p>

<p>Next, my cheek bones set downwards:</p>

<p><img src="https://lh5.googleusercontent.com/-VZhuI1uOVQk/UQrbLTKdBXI/AAAAAAAAARo/LHKV6cGEBGA/s288/aging3.jpg">
<img src="https://lh6.googleusercontent.com/-aNcc-FC_4yk/UQrbL53IPpI/AAAAAAAAARs/DRf3ySCxPs4/s288/aging4.jpg"></p>

<p>Finally, my face leans up and wrinkles a tiny bit:</p>

<p><img src="https://lh6.googleusercontent.com/-F8xBzpDWsM4/UQrbMUOukwI/AAAAAAAAAR0/cRqPDd_wYPM/s288/aging5.jpg"></p>

<h3 id="take-two-april-api">Take Two: APRIL API</h3>

<p>For this run, I had access to the raw aging metadata, so I could see
exactly how old APRIL thought I was at each point in the aging sequence.</p>

<p>From 26 to 28, there’s not much change:</p>

<p><img src="https://lh6.googleusercontent.com/-u36fDGLeI0Y/UQrbNrKtZyI/AAAAAAAAASE/NQSn0Y5uCng/s288/age28.jpg"></p>

<p>Then, by age 35, my face elongates slightly:</p>

<p><img src="https://lh4.googleusercontent.com/-cRxKskiAyos/UQrbOiA_OjI/AAAAAAAAASM/GBFlRfZtXnc/s288/age35.jpg"></p>

<p>I while away the next couple of decades in relative facial stasis. The
most pronounced change is in my skin, which pales gradually with age:</p>

<p><img src="https://lh6.googleusercontent.com/-gYCoSmKbBDw/UQrbO46gohI/AAAAAAAAASY/X8RoWKpGT_8/s288/age47.jpg">
<img src="https://lh6.googleusercontent.com/-dWkaa-neumY/UQrbPgkBVtI/AAAAAAAAASg/ebWh4i14qYk/s288/age55.jpg"></p>

<p>Finally, age catches up with me, and I wrinkle into a haunted
septuagenarian:</p>

<p><img src="https://lh5.googleusercontent.com/-JNBO6QMu-Xg/UQrbP9uzUUI/AAAAAAAAASo/Dj43_1l46Zo/s288/age61.jpg">
<img src="https://lh4.googleusercontent.com/-w7zx8Ql3PnM/UQrbQO2pqVI/AAAAAAAAASw/9HJrW1EUz2c/s288/age67.jpg">
<img src="https://lh5.googleusercontent.com/-RNgo0CglAjs/UQrbQtlY69I/AAAAAAAAAS0/OXD8Yqf63og/s288/age72.jpg"></p>

<p>A few changes, each very minor, contribute to my forlorn expression over
these last three photos.</p>

<ul>
  <li>The <em>eyes get slightly rounder</em>, as though they’re welling up.</li>
  <li><em>Wrinkling above the eyes</em> gives the impression of a furrowed brow.</li>
  <li>The face <em>elongates yet again</em>, creating a drawn expression.</li>
  <li>As part of the elongation of the face, the <em>mouth corners sag downwards</em>
into the merest hint of a frown.</li>
</ul>

<p>Note the lack of deep forehead and upper nose creases which normally
accompany the furrowed brow expression. The mere suggestion of it on the eyes
is enough to trigger our expression recognition! It’s amazing how sensitive
we are to minute variations in facial muscle position.</p>

<h3 id="summary">Summary</h3>

<p>These images provide two divergent visions for my distant future:</p>

<p><img src="https://lh6.googleusercontent.com/-F8xBzpDWsM4/UQrbMUOukwI/AAAAAAAAAR0/cRqPDd_wYPM/s288/aging5.jpg">
<img src="https://lh5.googleusercontent.com/-RNgo0CglAjs/UQrbQtlY69I/AAAAAAAAAS0/OXD8Yqf63og/s288/age72.jpg"></p>

<p>For comparison, here’s my father in his late 50s, looking quite a bit happier:</p>

<p><img src="http://farm4.staticflickr.com/3177/2828216200_5846e31c4a_z.jpg"></p>

<h2 id="why-were-those-so-different">Why Were Those So Different?</h2>

<p><blockquote><p>…the machine uses state-of-the-art aging software developed in partnership with Aprilage Development Inc. of Toronto to add decades to the faces of 8-12 year olds.</p><footer><strong>The Amazing Aging Machine</strong> <cite><a href='http://ontariosciencecentre.ca/aging/'>ontariosciencecentre.ca/aging/&hellip;</a></cite></footer></blockquote></p>

<p>The Amazing Aging Machine is calibrated for ages 8-12, likely to match 
the Ontario Science Centre’s target demographic. (Sadly, I couldn’t find
detailed visitor demographic data!) In my case, this creates an awkward
puffy look: it’s applying changes in facial structure through adolescence,
when much of our bone growth occurs.</p>

<p>By contrast, the APRIL API asks for your current age, allowing it to more
correctly calibrate its models. As a result, the second set of faces exhibits
relatively little change in shape.</p>

<h2 id="what-do-i-get-out-of-this">What Do I Get Out Of This?</h2>

<p>Although my face is unlikely to match either of these faces at 72, this
experiment provides some insight into how our faces change with age. After
all, the APRIL face aging models are based on real face data. They represent
a sort of statistical average of the aging process.</p>

<p>Also, I get the vaguely warm feeling that comes with having contributed to our
<a href="http://vimeo.com/29052688">collective intelligence</a>. I provided APRIL
with a real age-labelled face, which will likely be used to help train future
models.</p>

<h2 id="appendix-how-to-use-the-april-api">Appendix: How To Use The APRIL API</h2>

<p>For the more technically-minded, I’ve provided a quick walkthrough of the
API aging pipeline. For all the gritty details, consult the <a href="http://www.aprilage.com/AprilAPI_V2.pdf">API docs</a>.</p>

<p>Before starting, I highly recommend installing a tool like <a href="https://github.com/jmhodges/jsonpp">jsonpp</a>;
it makes it much easier to read API results.</p>

<p>The first step is manual: you need to register at <a href="http://www.ageme.com/">ageme.com</a>, then
click the confirmation link in your email.</p>

<p><img src="https://lh5.googleusercontent.com/-wuu_sRDb7qQ/UQrtRmoofNI/AAAAAAAAATE/l7CAexc1_ZY/s400/ageme_register.jpg"></p>

<p>The next step is uploading an image, but let’s check first that the API
works by retrieving our user info:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://www.ageme.com/AprilAPI/users/savage.evan@gmail.com/userInfo
</span><span class='line'>{“result_code”:0,”message”:”Unauthorized”}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Oops! We haven’t authenticated ourselves. The Authorization header uses a
brain-dead and highly insecure <code>base64</code> encoding:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -c “import base64; print base64.encodestring(‘username:password’)”
</span><span class='line'>dXNlcm5hbWU6cGFzc3dvcmQ=</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(Obviously this isn’t my real username/password. Substitute yours above and
use the resulting <code>base64</code>-encoded string in the <code>Authorization</code> headers
below. I’ll use this bogus value to illustrate the flow.)</p>

<p>With the correct header, we can try fetching the user info again:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H “Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=” http://www.ageme.com/AprilAPI/users/savage.evan@gmail.com/userInfo | jsonpp 
</span><span class='line'>{
</span><span class='line'>  “uri”: “http://www.ageme.com/AprilAPI/users/savage.evan@gmail.com”,
</span><span class='line'>  “email”: “savage.evan@gmail.com”,
</span><span class='line'>  “tokens”: 0,
</span><span class='line'>  “numOfAgings”: 1,
</span><span class='line'>  “role”: “user”
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Great! Now we can POST an image to the uploading endpoint with <code>curl</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -F ‘filename=aging1.jpg’ -F ‘image=@/Users/candu/Desktop/aging1.jpg’ -H “Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=” http://www.ageme.com/AprilAPI/images</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Another manual step: before proceeding, you’ll need to purchase a token on
the <a href="http://www.ageme.com/">ageme.com</a> site. At time of writing, this cost $3.99; I looked for
active promotion codes, but couldn’t find any.</p>

<p><img src="https://lh6.googleusercontent.com/-co9vyFu4uJQ/UQrtSM1T8mI/AAAAAAAAATM/8ozrK3aiGjk/s400/ageme_buytokens.jpg"></p>

<p>With your aging token purchased, you can now create an aging document. This
lets APRIL know your age and ethnicity, which helps it to select the
appropriate models for your particular aging sequence. It also identifies the
starting image of that sequence via the <code>imageId</code> returned during image upload.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H ‘Content-Type: application/json’ -d ‘{“document”: {“gender”: “male”, “age”: 26, “name”: “Evan”, “ethnicity”: “Caucasian”}, “imageId”: 2371944}}’ -H “Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=” http://www.ageme.com/AprilAPI/documents</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We’re ready to run the aging process. There’s a single method <code>detectMatchAge</code>
for performing all three steps, but I’ll break it down into the component
steps here:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X POST -H “Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=” http://www.ageme.com/AprilAPI/users/savage.evan@gmail.com/documents/2371973/pointDetection
</span><span class='line'>$ while true; do curl -H “Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=” http://www.ageme.com/AprilAPI/users/savage.evan@gmail.com/documents/2371973/status; done
</span><span class='line'>$ curl -X POST -H “Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=” http://www.ageme.com/AprilAPI/users/savage.evan@gmail.com/documents/2371973/match
</span><span class='line'>$ while true; do curl -H “Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=” http://www.ageme.com/AprilAPI/users/savage.evan@gmail.com/documents/2371973/status; done
</span><span class='line'>$ curl -H ‘Content-Type: application/json’ -d ‘{“sequenceType”: “Max72”, “sequences”: [{“smoking”: 0, “sunExposure”: 0, “multiplier”: 1}]}’ -H “Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=” http://www.ageme.com/AprilAPI/users/savage.evan@gmail.com/documents/2371973/aging
</span><span class='line'>$ while true; do curl -H “Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=” http://www.ageme.com/AprilAPI/users/savage.evan@gmail.com/documents/2371973/status; done</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note the <code>while</code> loops, which wait for each step to complete. Once all steps
are completed, we retrieve the aging results:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H “Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=” http://www.ageme.com/AprilAPI/users/savage.evan@gmail.com/documents/2371973/results &gt; aging_results.json
</span><span class='line'>$ cat aging_results.json | jsonpp | head -15
</span><span class='line'>[
</span><span class='line'>  {
</span><span class='line'>    “uri”: “http://www.ageme.com/AprilAPI/users/savage.evan@gmail.com/documents/2371973/results/76647”,
</span><span class='line'>    “status”: “done”,
</span><span class='line'>    “sequenceType”: “Max72”,
</span><span class='line'>    “sequences”: [
</span><span class='line'>      {
</span><span class='line'>        “smoking”: 0.0,
</span><span class='line'>        “sunExposure”: 0.0,
</span><span class='line'>        “multiplier”: 1.0,
</span><span class='line'>        “images”: [
</span><span class='line'>          {
</span><span class='line'>            “age”: 26,
</span><span class='line'>            “uri”: “http://www.ageme.com/AprilAPI/images/IhLAo8Sp”
</span><span class='line'>          },</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally, I wrote a bit of <a href="https://github.com/candu/quantified-savagery-files/blob/master/Aging/fetch_aging.py">Python glue</a> to fetch the URLs and name
them by age:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'><span class="n">images</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="err">‘</span><span class="n">sequences</span><span class="err">’</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="err">‘</span><span class="n">images</span><span class="err">’</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">image</span> <span class="ow">in</span> <span class="n">images</span><span class="p">:</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">image</span><span class="p">[</span><span class="err">‘</span><span class="n">uri</span><span class="err">’</span><span class="p">])</span>
</span><span class='line'>  <span class="n">path</span> <span class="o">=</span> <span class="err">‘</span><span class="n">age</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="n">jpg</span><span class="err">’</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">image</span><span class="p">[</span><span class="err">‘</span><span class="n">age</span><span class="err">’</span><span class="p">])</span>
</span><span class='line'>  <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="err">‘</span><span class="n">w</span><span class="err">’</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">url</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>With this, we can fetch the images:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python fetch_aging.py &lt; aging_results.json</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And that’s it! Most of the process uses <code>curl</code>, with minimal leaning
on Python for its <code>base64</code> module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Financial Tracking: Mint Bubbles]]></title>
    <link href="http://blog.savageevan.com/blog/2012/11/12/financial-tracking-mint-bubbles/"/>
    <updated>2012-11-12T07:00:00-08:00</updated>
    <id>http://blog.savageevan.com/blog/2012/11/12/financial-tracking-mint-bubbles</id>
    <content type="html"><![CDATA[<p>In this post I present Mint Bubbles, a <a href="http://www.nytimes.com/interactive/2012/02/13/us/politics/2013-budget-proposal-graphic.html">force-directed bubble chart</a>
visualization of exported Mint data. I explain how to use
<a href="http://en.wikipedia.org/wiki/Force-based_algorithms_(graph_drawing)">force-directed layouts</a> to produce awesome interactive visualizations
with <a href="http://d3js.org/">d3</a>, and also provide details on some of the specific tricks used
to create Mint Bubbles.</p>

<!-- more -->

<h2 id="getting-your-data">Getting Your Data</h2>

<p>Exporting your data from Mint is easy. Log into Mint and go to the
Transactions tab:</p>

<p><img src="https://lh6.googleusercontent.com/-oHWRFHUK35A/UKLVzn8tlDI/AAAAAAAAAM4/_2mADDMZ__M/s640/transactions-tab-select.jpg"></p>

<p>Scroll to the bottom pagination section. In barely-legible super-tiny
type at bottom right, there’s a link to export all your transactions:</p>

<p><img src="https://lh3.googleusercontent.com/-VSYonXZ14ns/UKLVz3M9eHI/AAAAAAAAAMs/Svbd25tzd3A/s800/transactions-export-link.jpg"></p>

<p>Clicking that link will download a file called <code>transactions.csv</code>:</p>

<p><img src="https://lh6.googleusercontent.com/-iwz7B_kEtF8/UKLV0RLGvZI/AAAAAAAAAM0/w3tqQ53CVao/s800/transactions-csv-download.jpg"></p>

<h2 id="mint-bubbles">Mint Bubbles</h2>

<p>If you’re viewing this on an RSS reader, check out the example
<a href="/blog/2012/11/12/financial-tracking-mint-bubbles/#quick-demo">on my blog</a>. You will need a browser that supports the
<a href="https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications">HTML5 File API</a>.</p>

<p>You can see the code for this demo <a href="https://github.com/candu/quantified-savagery-files/tree/master/Financial/mint-bubbles">here</a>.</p>

<p>To see a visualization of your data, drag the <code>transactions.csv</code> file from
Mint onto the <code>drag your data here</code> area below. You can also use
<a href="http://candu.github.io/quantified-savagery-files/Financial/mint-bubbles/transactions.csv">my data</a> from the last three months or so.</p>

<div id="quick-demo">
  <style type="text/css">
    #quick-demo {
      line-height: 1;
    }

    #chart {
      height: 480px;
      width: 720px;
      margin: auto;
      margin-top: 32px;
      margin-bottom: 16px;
    }
    
    .chart-active {
      border: 1px solid #DFE2E1;
      background-color: #F7F7F7;
    }
    
    #drop_zone {
      display: table;
      border: 2px dashed #bbb;
      height: 100%;
      width: 100%;
      padding: 4px;
      cursor: pointer;
    }
    
    #drop_zone p {
      display: table-cell;
      vertical-align: middle;
      text-align: center;
      font-size: 150%;
      color: #7F7F7F;
    }
    
    .hidden {
      display: none !important;
    }
    
    circle.node {
      cursor: pointer;
    }
    
    circle.circle-active {
      fill: #36f !important;
      stroke: #03f !important;
    }
    
    #caption {
      width: 720px;
      margin: auto;
      text-align: center;
      min-height: 100%;
    }
    
    #total {
      font-size: 125%;
      color: #36f;
      padding: 4px;
      margin-bottom: 8px;
    }
    
    #prompt {
      font-size: 150%;
      color: #888;
      padding: 4px;
    }
    
    #transactions_table {
      width: 100%;
      margin-bottom: 8px;
    }
    
    #quick-demo th {
      font-weight: 500;
      padding-bottom: 4px;
    }

    #quick-demo th, #quick-demo td {
      text-align: center;
    }
  </style>
  <script src="http://candu.github.io/quantified-savagery-files/lib/js/third-party/mootools.js"></script>
  <script src="http://candu.github.io/quantified-savagery-files/lib/js/third-party/d3.js"></script>
  <script src="http://candu.github.io/quantified-savagery-files/Financial/mint-bubbles/demo.js"></script>
  <div id="chart">
    <div id="drop_zone">
      <p>
        drop your data here
        <div id="progress" class="hidden">
          <progress id="progress_bar" />
        </div>
      </p>
    </div>
  </div>
  <div id="caption" class="hidden">
    <div id="prompt">
      click bubbles to see transaction details
    </div>
    <div id="total" class="hidden"></div>
    <div id="transactions" class="hidden">
      <table id="transactions_table">
        <thead>
          <tr>
            <th width="120px">Date</th>
            <th width="120px">Amount</th>
            <th width="480px">Description</th>
          </tr>
        </thead>
        <tbody id="transactions_tbody" />
      </table>
    </div>
  </div>
</div>

<h2 id="behind-the-bubbles">Behind The Bubbles</h2>

<h3 id="inspiration">Inspiration</h3>

<p>This visualization was inspired by the
<a href="http://www.nytimes.com/interactive/2012/02/13/us/politics/2013-budget-proposal-graphic.html">NYT 2013 Budget Proposal Graphic</a>,
which uses <a href="http://d3js.org/">d3.js</a> to bring
<a href="http://www.whitehouse.gov/omb/budget">Obama’s 2013 budget proposal</a>
to life as an interactive bubble chart.</p>

<p>I’d just started using <a href="https://www.mint.com/">Mint</a> for financial tracking, and this
seemed like an awesome way to visualize my personal spending patterns.
To help figure out the mechanics of the NYT visualization, I consulted
<a href="http://vallandingham.me/bubble_charts_in_d3.html">this article</a>
by <a href="http://vallandingham.me/">Jim Vallandingham</a>. He explains in detail how to create similar
visualizations using d3’s <a href="https://github.com/mbostock/d3/wiki/Force-Layout">force-directed layouts</a>, which model your
data as a set of particles moving about in space.</p>

<h3 id="importing-data">Importing Data</h3>

<p>Unlike my <a href="/blog/2012/10/22/dont-hate-cross-correlate/#quick-demo">previous</a> <a href="/blog/2012/10/17/fitbit-apis-crossfilter-and-d3/#quick-demo">visualizations</a>, I wanted this visualization
to allow you to play with your data. Enter the <a href="http://www.html5rocks.com/en/tutorials/file/dndfiles/">HTML5 File API</a>, which
allows access to files via JavaScript. First, I set up the drag-and-drop
listeners on <code>div#drop_zone</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Octopress bundles ender.js, which provides $() for DOM access; mootools</span>
</span><span class='line'><span class="cm"> * tries to play nice, so it won’t install its $() over that. I’m using</span>
</span><span class='line'><span class="cm"> * document.id() instead.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">dropZone</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">drop_zone</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">trapEvent</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">evt</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">evt</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">dropZone</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="err">‘</span><span class="nx">dragenter</span><span class="err">’</span><span class="p">,</span> <span class="nx">trapEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="nx">dropZone</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="err">‘</span><span class="nx">dragexit</span><span class="err">’</span><span class="p">,</span> <span class="nx">trapEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="nx">dropZone</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="err">‘</span><span class="nx">dragover</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">trapEvent</span><span class="p">(</span><span class="nx">evt</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// This makes a copy icon appear during the drag operation.</span>
</span><span class='line'>  <span class="nx">evt</span><span class="p">.</span><span class="nx">dataTransfer</span><span class="p">.</span><span class="nx">dropEffect</span> <span class="o">=</span> <span class="err">‘</span><span class="nx">copy</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="nx">dropZone</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="err">‘</span><span class="nx">drop</span><span class="err">’</span><span class="p">,</span> <span class="nx">handleFileSelect</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>dragenter</code>, <code>dragexit</code>, and <code>dragover</code> are analogous to <code>mouseenter</code>,
<code>mouseexit</code>, and <code>mouseover</code>. For those events, it suffices to call
<code>trapEvent()</code>, which prevents the browser’s default action from happening.
For instance, Chrome on Mac OS will just download the <code>transactions.csv</code> file
if you drag it into a browser tab, which is not what I want here.</p>

<p><code>drop</code> is the interesting event:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">handleFileSelect</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">trapEvent</span><span class="p">(</span><span class="nx">evt</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">evt</span><span class="p">.</span><span class="nx">dataTransfer</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// NOTE: you might want to filter out large or invalid files here.</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileReader</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">.</span><span class="nx">onloadstart</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lengthComputable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">progress</span><span class="err">’</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">hidden</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">progress_bar</span><span class="err">’</span><span class="p">).</span><span class="nx">set</span><span class="p">(</span><span class="err">‘</span><span class="nx">value</span><span class="err">’</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">progress_bar</span><span class="err">’</span><span class="p">).</span><span class="nx">set</span><span class="p">(</span><span class="err">‘</span><span class="nx">max</span><span class="err">’</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">total</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">.</span><span class="nx">onprogress</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lengthComputable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">progress_bar</span><span class="err">’</span><span class="p">).</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">loaded</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">caption</span><span class="err">’</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">hidden</span><span class="err">’</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">chart</span><span class="o">-</span><span class="nx">active</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">progress</span><span class="err">’</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">hidden</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">drop_zone</span><span class="err">’</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">hidden</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="err">‘</span><span class="nx">chart</span><span class="err">’</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="err">‘</span><span class="nx">chart</span><span class="o">-</span><span class="nx">active</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">buildChart</span><span class="p">(</span><span class="nx">d3</span><span class="p">.</span><span class="nx">csv</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">result</span><span class="p">));</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">.</span><span class="nx">readAsText</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This uses <code>FileReader.readAsText()</code> to read in the <code>transactions.csv</code> file,
with <code>d3.csv.parse()</code> for turning that CSV file into a sequence of JavaScript
objects representing the transactions. This parsing is triggered <code>onload</code>,
which fires once file I/O has completed.</p>

<p><code>onloadstart</code> and <code>onprogress</code> are used to monitor file I/O progress via the
<a href="http://www.useragentman.com/blog/2012/01/03/cross-browser-html5-progress-bars-in-depth/">HTML5 progress element</a> <code>document.id('progress_bar')</code>. Since
<code>transactions.csv</code> files are typically small, and since the “uploading” is
actually a client-local copy into browser memory, you’ll probably never see
that progress bar.</p>

<h3 id="grouping-transactions">Grouping Transactions</h3>

<p>I group the transactions by category:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">cs</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">data</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">tx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">tx</span><span class="p">[</span><span class="err">‘</span><span class="nx">Category</span><span class="err">’</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">c</span> <span class="k">in</span> <span class="nx">cs</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">amount</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">txs</span><span class="o">:</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">amount</span> <span class="o">+=</span> <span class="o">+</span><span class="p">(</span><span class="nx">tx</span><span class="p">[</span><span class="err">‘</span><span class="nx">Amount</span><span class="err">’</span><span class="p">]);</span>
</span><span class='line'>  <span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">txs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">tx</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>amount</code> stores the total amount; note the use of <code>+(tx['Amount'])</code> to convert
CSV string values into numbers. <code>txs</code> is used for the transaction list.</p>

<p>I then convert these into nodes to be used by
<code>d3.layout.force()</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">nodes</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">cs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">nodes</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">R</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">amount</span><span class="p">)),</span>
</span><span class='line'>    <span class="nx">category</span><span class="o">:</span> <span class="nx">c</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">amount</span><span class="o">:</span> <span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">amount</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">txs</span><span class="o">:</span> <span class="nx">cs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">txs</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="defining-the-layout">Defining The Layout</h3>

<p>Before building the visualization itself, I define a color gradient based on
bubble radius, picking the colors using the excellent
<a href="http://colorschemedesigner.com/">Color Scheme Designer</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Rs</span> <span class="o">=</span> <span class="nx">nodes</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">minR</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">Rs</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">maxR</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">Rs</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fill</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="nx">minR</span><span class="p">,</span> <span class="nx">maxR</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="err">‘#</span><span class="mi">7</span><span class="nx">EFF77</span><span class="err">’</span><span class="p">,</span> <span class="err">‘#</span><span class="mi">067500</span><span class="err">’</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now on to the visualization. First, I need to create the <a href="https://developer.mozilla.org/en-US/docs/SVG">SVG element</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="mi">960</span><span class="p">,</span> <span class="nx">h</span> <span class="o">=</span> <span class="mi">480</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">vis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="err">‘#</span><span class="nx">chart</span><span class="err">’</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="err">‘</span><span class="nx">svg</span><span class="o">:</span><span class="nx">svg</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">width</span><span class="err">’</span><span class="p">,</span> <span class="nx">w</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">height</span><span class="err">’</span><span class="p">,</span> <span class="nx">h</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Next, I define the behavior and styling of the bubbles:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">vis</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="err">‘</span><span class="nx">circle</span><span class="p">.</span><span class="nx">node</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">nodes</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">enter</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="err">‘</span><span class="nx">svg</span><span class="o">:</span><span class="nx">circle</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="kr">class</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="nx">node</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">cx</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">cy</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">r</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="err">‘</span><span class="nx">fill</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">fill</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">);</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="err">‘</span><span class="nx">stroke</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">rgb</span><span class="p">(</span><span class="nx">fill</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">)).</span><span class="nx">darker</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="err">‘</span><span class="nx">stroke</span><span class="o">-</span><span class="nx">width</span><span class="err">’</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>fill(d.R)</code> uses the color gradient <code>fill</code> to make smaller bubbles lighter and
larger bubbles darker.</p>

<p>As for the force-directed layout, I start with some basic properties:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">force</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">layout</span><span class="p">.</span><span class="nx">force</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">nodes</span><span class="p">(</span><span class="nx">nodes</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">links</span><span class="p">([])</span>          <span class="c1">// no edges between bubbles!</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">size</span><span class="p">([</span><span class="nx">w</span><span class="p">,</span> <span class="nx">h</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">gravity</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>      <span class="c1">// controls speed at which bubbles seek the center</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">friction</span><span class="p">(</span><span class="mf">0.95</span><span class="p">);</span>    <span class="c1">// slows down motion</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="tick-handler">Tick Handler</h3>

<p><blockquote><p>force.tick(): Runs the force layout simulation one step.</p><footer><strong>Force Layout</strong> <cite><a href='https://github.com/mbostock/d3/wiki/Force-Layout#wiki-tick'>github.com/mbostock/d3/wiki/&hellip;</a></cite></footer></blockquote></p>

<p>Force-directed layouts model your data as a set of particles in space. Those
particles are subject to various forces:</p>

<ul>
  <li><strong>Gravity:</strong> in d3, this is actually an attractive force pulling particles
towards the center of the visualization.</li>
  <li><strong>Friction:</strong> this slows down movement.</li>
  <li><strong>Tension:</strong> if nodes are connected via links (edges), they will resist being
moved apart.</li>
  <li><strong>Charge:</strong> similar to electric charge, same-signed charges repel
and opposite-signed charges attract.</li>
</ul>

<p>A layout can describe some or all of these forces. Resolving the forces is a
simple iterative process:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>while (true) {
</span><span class='line'>  for (P in particles) {
</span><span class='line'>    F = [0, 0];
</span><span class='line'>    for (f in forcesActingOn(P)) {
</span><span class='line'>      F[0] += f[0]; F[1] += f[1];
</span><span class='line'>    }
</span><span class='line'>    applyForceTo(P, F);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In addition to the above forces, visualizations using <code>d3.layout.force()</code> can
define their own forces via the <code>ontick</code> handler. I use this to apply two
effects:</p>

<ul>
  <li><strong>Size Sorting:</strong> similar to <a href="http://en.wikipedia.org/wiki/Granular_convection">granular convection</a>,
larger bubbles will rise while smaller bubbles sink.</li>
  <li><strong>Collision Detection:</strong> I prevent bubbles from intersecting, since that
makes it easier to select them.</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">floatPoint</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="nx">minR</span><span class="p">,</span> <span class="nx">maxR</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="nx">h</span> <span class="o">*</span> <span class="mf">0.65</span><span class="p">,</span> <span class="nx">h</span> <span class="o">*</span> <span class="mf">0.35</span><span class="p">]);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">force</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="err">‘</span><span class="nx">tick</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// vertical size sorting</span>
</span><span class='line'>  <span class="nx">nodes</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">dy</span> <span class="o">=</span> <span class="nx">floatPoint</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">)</span> <span class="o">-</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">d</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="mf">0.25</span> <span class="o">*</span> <span class="nx">dy</span> <span class="o">*</span> <span class="nx">e</span><span class="p">.</span><span class="nx">alpha</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// collision detection</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">q</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">geom</span><span class="p">.</span><span class="nx">quadtree</span><span class="p">(</span><span class="nx">nodes</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">nodes</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">q</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">quad</span><span class="p">,</span> <span class="nx">x1</span><span class="p">,</span> <span class="nx">y1</span><span class="p">,</span> <span class="nx">x2</span><span class="p">,</span> <span class="nx">y2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">d2</span> <span class="o">=</span> <span class="nx">quad</span><span class="p">.</span><span class="nx">point</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">d2</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span><span class="nx">d2</span> <span class="o">!==</span> <span class="nx">d1</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">d2</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">y</span> <span class="o">=</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="nx">d2</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">L</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">*</span> <span class="nx">y</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">R</span> <span class="o">=</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">R</span> <span class="o">+</span> <span class="nx">d2</span><span class="p">.</span><span class="nx">R</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">L</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">R</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">L</span> <span class="o">=</span> <span class="p">(</span><span class="nx">L</span> <span class="o">-</span> <span class="nx">R</span><span class="p">)</span> <span class="o">/</span> <span class="nx">L</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">Lx</span> <span class="o">=</span> <span class="nx">L</span> <span class="o">*</span> <span class="nx">x</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">Ly</span> <span class="o">=</span> <span class="nx">L</span> <span class="o">*</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">d1</span><span class="p">.</span><span class="nx">x</span> <span class="o">-=</span> <span class="nx">Lx</span><span class="p">;</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">y</span> <span class="o">-=</span> <span class="nx">Ly</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">d2</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="nx">Lx</span><span class="p">;</span> <span class="nx">d2</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="nx">Ly</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">// This short-circuits visit() for quadtree nodes that can’t collide with</span>
</span><span class='line'>      <span class="c1">// d1, resulting in O(n log n) collision detection.</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>        <span class="nx">x1</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">(</span><span class="nx">d1</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">R</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="nx">x2</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="p">(</span><span class="nx">d1</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">R</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="nx">y1</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">(</span><span class="nx">d1</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">R</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="nx">y2</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="p">(</span><span class="nx">d1</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">R</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">node</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">cx</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="err">‘</span><span class="nx">cy</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="alpha-and-size-sorting">Alpha and Size Sorting</h3>

<p>What’s <code>e.alpha</code>? This is described cryptically in the
<a href="https://github.com/mbostock/d3/wiki/Force-Layout#wiki-start">d3.js documentation</a>:</p>

<p><blockquote><p>Internally, the layout uses a cooling parameter alpha which controls the layout temperature: as the physical simulation converges on a stable layout, the temperature drops, causing nodes to move more slowly.</p><footer><strong>Force Layout</strong> <cite><a href='https://github.com/mbostock/d3/wiki/Force-Layout#wiki-start'>github.com/mbostock/d3/wiki/&hellip;</a></cite></footer></blockquote></p>

<p>A look at the <a href="https://github.com/mbostock/d3/blob/master/src/layout/force.js#L46">code for d3.layout.force()</a>
provides some insight into what’s happening here:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">force</span><span class="p">.</span><span class="nx">tick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// simulated annealing, basically</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="nx">alpha</span> <span class="o">*=</span> <span class="p">.</span><span class="mi">99</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="p">.</span><span class="mi">005</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">end</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="err">“</span><span class="nx">end</span><span class="err">”</span><span class="p">,</span> <span class="nx">alpha</span><span class="o">:</span> <span class="nx">alpha</span> <span class="o">=</span> <span class="mi">0</span><span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// …</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Let’s look at the size sorting code again:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">nodes</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">dy</span> <span class="o">=</span> <span class="nx">floatPoint</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">R</span><span class="p">)</span> <span class="o">-</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">d</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="mf">0.25</span> <span class="o">*</span> <span class="nx">dy</span> <span class="o">*</span> <span class="nx">e</span><span class="p">.</span><span class="nx">alpha</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>floatPoint(d.R)</code> computes a “desired height” for the node <code>d</code>. The <code>d.y</code>
adjustment moves <code>d</code> towards that height, using <code>e.alpha</code> to slow down the
sorting adjustment as the layout “cools” into its final state.</p>

<h3 id="collision-detection">Collision Detection</h3>

<p>The collision detection code is cribbed from
<a href="http://mbostock.github.com/d3/talk/20111018/collision.html">this page</a>,
which is part of a <a href="http://mbostock.github.com/d3/talk/20111018/#0">talk</a>
given by <a href="http://bost.ocks.org/mike/">Mike Bostock</a> on d3.</p>

<h2 id="up-next">Up Next</h2>

<p>I’m currently working on a post for the <a href="http://quantifiedself.com/">main Quantified Self blog</a>,
in which I’m planning to feature another cool visualization for personal data.
Aside from that, I’m hoping to use an upcoming post to dissect my Mint data in
more detail. Keep posted!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persistent Location Tracking: Looking For A Few Good Data Points]]></title>
    <link href="http://blog.savageevan.com/blog/2012/11/02/persistent-location-tracking-looking-for-a-few-good-data-points/"/>
    <updated>2012-11-02T16:38:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/11/02/persistent-location-tracking-looking-for-a-few-good-data-points</id>
    <content type="html"><![CDATA[<p>In this post, I revisit the question of whether Google Latitude meets my
persistent location tracking needs. In <a href="/blog/2012/10/29/persistent-location-tracking-picking-the-right-tool/">my previous post</a>, I compared
Google Latitude to InstaMapper and concluded that the latter is too
battery-intensive. By looking at maps and base-level insights from the data,
I suggest that Google Latitude optimizes for battery life at the expense of
data quality.</p>

<!-- more -->

<h2 id="exhibit-a-some-maps">Exhibit A: Some Maps</h2>

<p>I started gathering data on Oct. 3, 2012:</p>

<p><img src="https://lh5.googleusercontent.com/-kyl-kUDWe_M/UJgVi3pls3I/AAAAAAAAALg/zGsaBfNzY7s/s640/map-monthly.jpg"></p>

<p>Since then, <a href="http://www.eecs.berkeley.edu/~valkyrie/">Valkyrie Savage</a> and I have travelled to Boston and Chicago.
Our stopover in Phoenix is clearly visible at this scale. You can barely make
out our day trip to <a href="http://goo.gl/maps/rLfNu">Mount Monadnock, NH</a> over near Boston. Here’s a
closer look at that trip:</p>

<p><img src="https://lh4.googleusercontent.com/-YJQip0zWnxQ/UJgVlFc_7pI/AAAAAAAAAMA/DjlCRjxouzo/s640/map-monadnock-trip.jpg"></p>

<p>Ouch. The data is <em>noisy in some areas, sparse in others.</em> It’s fairly clear that
we took Hwy 2 over, but <em>some of the GPS readings are miles off.</em> Let’s zoom in
on that hike:</p>

<p><img src="https://lh5.googleusercontent.com/-bg3DxaZTe6k/UJgVlqpW7ZI/AAAAAAAAAMI/t2Kn3hrhWJM/s640/map-monadnock-hike.jpg"></p>

<p>Only five data points actually lie within the park/mountain boundaries. That’s
<em>five data points for a four-hour hike.</em> Our Boston data is somewhat more
accurate:</p>

<p><img src="https://lh3.googleusercontent.com/-6RFwbwjBEtI/UJgVmQk1KCI/AAAAAAAAAMQ/-Nhyp0LtoLw/s640/map-monadnock-boston.jpg"></p>

<p>Still, the red line cuts through city blocks with reckless abandon. Either 
we’re flying, or we’re packing some incredibly efficient demolition equipment.</p>

<p>Here’s the map for one of my more itinerant Bay Area days:</p>

<p><img src="https://lh5.googleusercontent.com/-xNNR5dnNV44/UJgVj3SZAEI/AAAAAAAAALw/6KvtDZYWel0/s640/map-busy-day.jpg"></p>

<p>I cycled to a doctor’s appointment, visited
<a href="http://bid.berkeley.edu/">BiD</a> to hear <a href="http://research.microsoft.com/en-us/people/marycz/">Mary Czerwinski</a> speak about emotion tracking, worked
from <a href="http://goo.gl/maps/z7EuA">home</a> for a bit, went into San Francisco to meet up with
<a href="http://www.linkedin.com/in/levpopov">Lev Popov</a>, and finally dragged myself home again.</p>

<p>The BART ride into San Francisco is understandably sparse: most of it is
separated from cell towers and GPS satellites by rock and/or water.</p>

<p>Most of my travel is on foot, by bike, or via public transit. Not content
with the Mount Monadnock hike data, I tried another quick drive up into
<a href="http://goo.gl/maps/zk3AD">Tilden</a>:</p>

<p><img src="https://lh5.googleusercontent.com/-MCZ55KYjgcE/UJgVjNWQ0FI/AAAAAAAAALo/pibM6xiJmUE/s640/map-drive-test.jpg"></p>

<p>Google Latitude captured <em>just four points during the 20-minute drive.</em></p>

<h2 id="exhibit-b-some-analysis">Exhibit B: Some Analysis</h2>

<p>You can see the code for this analysis
<a href="https://github.com/candu/quantified-savagery-files/tree/master/Location/kml">here</a>
and <a href="https://github.com/candu/quantified-savagery-files/tree/master/Location/api">here</a>.</p>

<p>After trudging through several lackluster map views, I’m left with a
nagging impression:</p>

<p><blockquote><p>This data isn’t that useful.</p></blockquote></p>

<p>This impression deserves further analysis, so I grab the KML to answer some
of my questions. First off: <em>how often is Google Latitude checking my location?</em></p>

<p><img src="https://lh5.googleusercontent.com/-A7we5G7pYIw/UJb-xhCk_oI/AAAAAAAAAKk/O7ZwpxF_uQs/s640/timings-frequency.jpg"></p>

<p><em>About every two minutes.</em> GPS is a <a href="/blog/2012/10/29/persistent-location-tracking-picking-the-right-tool/">huge battery drain</a>;
increasing the time between updates can help by allowing the GPS radio to
enter an idle state. <em>How are those location readings scheduled?</em></p>

<p><img src="https://lh6.googleusercontent.com/-PMYu61X440I/UJb-yCEbuBI/AAAAAAAAAKs/umbJNuuVfo0/s640/timings-second-histogram.jpg"></p>

<p>Google Latitude really likes spacing its readings out by a <em>whole number of
minutes.</em></p>

<p><em>How accurate is the data?</em> The KML doesn’t provide <a href="http://en.wikipedia.org/wiki/Dilution_of_precision_(GPS)">accuracy estimates</a>
for its locations. Fortunately, the <a href="https://developers.google.com/latitude/">Google Latitude API</a> does, so
I retrieve my data using <a href="https://github.com/candu/quantified-savagery-files/blob/master/Location/api/scrape.py">this script</a> and look at the accuracy readings:</p>

<p><img src="https://lh3.googleusercontent.com/-p5senVUtgqM/UJb-ybk3zEI/AAAAAAAAAK0/qUvLSvog15E/s640/accuracy-histogram.jpg"></p>

<p>Actually, <em>the readings have fairly high accuracy.</em> Only 7% of readings have a
reported error radius greater than 100m.</p>

<p>The maps above suggest that location readings are less accurate while
travelling at high speed. Is that true? The API provides speed estimates
for some readings, but this data is kind of sparse:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python speed.py &lt; history.api 
</span><span class='line'>found 7429 speed values among 20898 readings</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I try a different method: the <a href="http://mathforum.org/library/drmath/view/51879.html">Haversine distance formula</a>, which
gives me the distance between two points on the Earth’s surface:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">haversineDistance</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">):</span>
</span><span class='line'>  <span class="err">“””</span>
</span><span class='line'>  <span class="n">Distance</span> <span class="p">(</span><span class="ow">in</span> <span class="n">meters</span><span class="p">)</span> <span class="n">between</span> <span class="n">two</span> <span class="n">Locations</span><span class="o">.</span> <span class="n">Uses</span> <span class="n">the</span> <span class="n">Haversine</span> <span class="n">formula</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">See</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">movable</span><span class="o">-</span><span class="nb">type</span><span class="o">.</span><span class="n">co</span><span class="o">.</span><span class="n">uk</span><span class="o">/</span><span class="n">scripts</span><span class="o">/</span><span class="n">latlong</span><span class="o">.</span><span class="n">html</span> <span class="k">for</span> <span class="n">corresponding</span>
</span><span class='line'>  <span class="n">JavaScript</span> <span class="n">implementation</span><span class="o">.</span>
</span><span class='line'>  <span class="err">“””</span>
</span><span class='line'>  <span class="c"># Earth’s radius in meters</span>
</span><span class='line'>  <span class="n">R</span> <span class="o">=</span> <span class="mi">6371009</span>
</span><span class='line'>  <span class="n">dLat</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="n">B</span><span class="o">.</span><span class="n">lat</span> <span class="o">-</span> <span class="n">A</span><span class="o">.</span><span class="n">lat</span><span class="p">)</span>
</span><span class='line'>  <span class="n">dLon</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="n">B</span><span class="o">.</span><span class="n">lng</span> <span class="o">-</span> <span class="n">A</span><span class="o">.</span><span class="n">lng</span><span class="p">)</span>
</span><span class='line'>  <span class="n">lat1</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="n">A</span><span class="o">.</span><span class="n">lat</span><span class="p">)</span>
</span><span class='line'>  <span class="n">lat2</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="n">B</span><span class="o">.</span><span class="n">lat</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sLat</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">dLat</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sLon</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">dLon</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="n">sLat</span> <span class="o">*</span> <span class="n">sLat</span> <span class="o">+</span> <span class="n">sLon</span> <span class="o">*</span> <span class="n">sLon</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">lat1</span><span class="p">)</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">lat2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">c</span> <span class="o">=</span> <span class="mf">2.0</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">atan2</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">a</span><span class="p">))</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">R</span> <span class="o">*</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I use this distance formula to get a plot of accuracy versus travelling speed:</p>

<p><img src="https://lh5.googleusercontent.com/-ba4lES16aCU/UJb-ytwI4OI/AAAAAAAAAK8/-OZvTHzgZjk/s144/accuracy-vs-speed.jpg"></p>

<p><em>No clear correlation here</em>; there are low-quality readings at both low and high
speeds. There are several possible explanations:</p>

<ul>
  <li><strong>Confirmation bias:</strong> I mistakenly extrapolated a small handful of
low-quality readings taken at high speeds to a general pattern.</li>
  <li><strong>Misinterpretation:</strong> Some of the Mount Monadnock readings look way off;
perhaps the error radius doesn’t mean what I think it does.</li>
  <li><strong>Different location sources:</strong> Location accuracy is
<a href="http://en.wikipedia.org/wiki/Dilution_of_precision_(GPS)">relatively well-defined</a> for GPS, but I’m not sure what happens when
cell towers or WiFi access points are incorporated into location fixes.</li>
  <li><strong>Longer sampling interval:</strong> Maybe Google Latitude assumes that precise
location tracking is less important when driving.</li>
</ul>

<p>To test this last hypothesis, I also <em>plot sampling interval versus speed:</em></p>

<p><img src="https://lh5.googleusercontent.com/-__3m3z_oQfQ/UJcC4GeNhyI/AAAAAAAAALQ/HI6XQdHjtns/s640/timings-vs-speed.jpg"></p>

<p>Nothing conclusive there.</p>

<h2 id="conclusion">Conclusion</h2>

<p><em>The problem appears to be sampling frequency.</em> To reduce battery usage, <em>Google
Latitude polls about once every two minutes.</em> While it has some mechanism for
polling more often in periods of high activity, it’s unclear how that works.</p>

<p>Reliance on fixes from cell towers and WiFi may be reducing location quality
in more remote areas. Testing this hypothesis is difficult: how do you
quantify remote? One possibility is to compute nearest-neighbor distance
against <a href="http://www.maxmind.com/en/worldcities">a database of cities</a>. Another confounding factor is the
reliability of those <code>accuracy</code> values. Improving upon that would likely
involve manual labelling.</p>

<h2 id="why-do-this">Why Do This?</h2>

<p><blockquote><p>Accuracy is not binary.</p></blockquote></p>

<p>In Quantified Self applications, we <em>use personal data to drive changes in our
lives.</em> We put a lot of trust in the accuracy and relevance of that data, and
<em>we extend that trust to the tools and services that collect it.</em>
We trust <a href="http://www.fitbit.com/">Fitbit</a> to track our fitness.
We trust <a href="http://www.myzeo.com/sleep/">Zeo</a> to improve our sleep.
We trust <a href="http://www.lumosity.com/">Lumosity</a> to train our perception and attentiveness.</p>

<p>In giving so much trust to these tools, we sometimes forget that <em>data are not
infallible.</em>
<a href="http://www.pbs.org/wgbh/aso/databank/entries/dp27un.html">Physics guarantees</a> that there is no such thing as perfect data. <em>All
data contain error.</em> As a system consisting of geosynchronous satellites that
travel at relativistically significant speeds and beam data
through our multilayered atmosphere to tiny chip radios sandwiched between
layers of dense circuitry, GPS is understandably <a href="http://www.kowoma.de/en/gps/errors.htm">error-prone.</a>
When your chosen tools and services add noise on top of that, it’s reasonable
to ask:</p>

<p><blockquote><p>How much trust should I place in the output?</p></blockquote></p>
]]></content>
  </entry>
  
</feed>
