<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Panic | Quantified Savagery]]></title>
  <link href="http://blog.savageevan.com/blog/categories/panic/atom.xml" rel="self"/>
  <link href="http://blog.savageevan.com/"/>
  <updated>2012-10-30T14:30:02-07:00</updated>
  <id>http://blog.savageevan.com/</id>
  <author>
    <name><![CDATA[Evan Savage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Track Your Happiness: An Adventure In Data Extraction]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/18/track-your-happiness-an-adventure-in-data-extraction/"/>
    <updated>2012-10-18T15:41:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/18/track-your-happiness-an-adventure-in-data-extraction</id>
    <content type="html"><![CDATA[<p>In this post, I go over my first report from
<a href="https://www.trackyourhappiness.org/">Track Your Happiness</a>, a tool that uses
the <a href="https://www.trackyourhappiness.org/">Experience Sampling Method</a> for mood
tracking.</p>

<!-- more -->

<h2 id="my-report">My Report</h2>

<h3 id="charts">Charts</h3>

<p>My happiness is <em>relatively constant across days of the week.</em></p>

<p><img src="https://chart.googleapis.com/chart?chs=310x200&amp;cht=bvg&amp;chco=0088cc&amp;chxt=x%2Cy&amp;chxl=0%3A%7CSun%7CMon%7CTue%7CWed%7CThu%7CFri%7CSat&amp;chxr=1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3Aolpkmkp&amp;chbh=30" title="Weekday" ></p>

<p>I’m <em>happiest at the gym or in parks</em>, with vacations and restaurants close
behind. “At Home” is mid-pack, with <em>“At Work” near the bottom.</em></p>

<p><img src="https://chart.googleapis.com/chart?chs=310x338&amp;cht=bhg&amp;chco=0088cc&amp;chxt=y%2Cx&amp;chxl=0%3A%7CBus+Stoo%7CPlane%7CAt+Work%7CIn+A+Car%7CDentist%7CAt+Home%7CAirport%7CRestaurant%7CVacation%7CPark%7CGym&amp;chxr=1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3Auusroonliee&amp;chbh=20" title="Location" ></p>

<p><em>Fun, exercise, and food</em> generate the most happiness. <em>Passive actions</em> such as
watching TV, commuting, and waiting rank much lower. <em>Work is least
happiness-inducing.</em></p>

<p><img src="https://chart.googleapis.com/chart?chs=310x422&amp;cht=bhg&amp;chco=0088cc&amp;chxt=y%2Cx&amp;chxl=0%3A%7CWorking%7CCommuting%2C+Traveling%7CWaiting%7CWatching+Television%7CReading%7CHome+Computer%7CGrooming%2C+Self+Care%7CShopping%2C+Errands%7CRelaxing%2C+Nothing+Special%7CTalking%2C+Conversation%7CEating%7CPlaying%7CPreparing+Food%7CExercising&amp;chxr=1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3Autrrrqpnnnmlkj&amp;chbh=20" title="What are you doing?" ></p>

<p><em>Whether I want to perform a task</em> is a much stronger determinant of happiness
than whether I have to:</p>

<p><img src="https://chart.googleapis.com/chart?chs=310x200&amp;cht=bvg&amp;chco=0088cc&amp;chxt=x%2Cx%2Cy&amp;chxl=0%3A%7CDon%27t+want+to%7CWant+to%7CWant+to%7CDon%27t+want+to%7C1%3A%7CHave+to%7CHave+to%7CDon%27t+have+to%7CDon%27t+have+to&amp;chxr=2%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10%7C2%2C666666%2C10&amp;chd=s%3Agope&amp;chbh=51" title="Want to / Have to" ></p>

<p>I’m <em>happier when outside.</em></p>

<p><img src="https://chart.googleapis.com/chart?chs=310x126&amp;cht=bhg&amp;chco=0088cc&amp;chxt=y%2Cx&amp;chxl=0%3A%7CNo%7CYes&amp;chxr=1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3Apj&amp;chbh=40" title="Outside?" ></p>

<p>I’m <em>happier when alone.</em></p>

<p><img src="https://chart.googleapis.com/chart?chs=310x126&amp;cht=bhg&amp;chco=0088cc&amp;chxt=y%2Cx&amp;chxl=0%3A%7CNo%7CYes&amp;chxr=1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3Apl&amp;chbh=40" title="Alone" ></p>

<p>Given that, it seems counterintuitive that <em>I’m happier when interacting with
multiple people.</em></p>

<p><img src="https://chart.googleapis.com/chart?chs=310x132&amp;cht=bhg&amp;chco=0088cc&amp;chxt=y%2Cx&amp;chxl=0%3A%7CThree+Or+More%7CTwo%7COne&amp;chxr=1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3Aorq&amp;chbh=26" title="Number of people interacting with" ></p>

<p>I was also surprised by this one: I’m happiest when <em>talking with acquaintances
or friends</em> and least happy when <em>talking with family.</em></p>

<p><img src="https://chart.googleapis.com/chart?chs=310x198&amp;cht=bhg&amp;chco=0088cc&amp;chxt=y%2Cx&amp;chxl=0%3A%7COther+Relatives%7CSpouse%2FPartner%2FSignificant+Other%7CStrangers%7CCo+Workers%7CFriends%7CAcquaintances&amp;chxr=1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3Autsrpo&amp;chbh=20" title="Who talking with" ></p>

<h3 id="what-does-it-mean">What Does It Mean?</h3>

<p>Even without considering the specific results, I have a few <em>unanswered
questions:</em></p>

<ul>
  <li>What is <em>happiness</em>? How do I judge it at a particular moment? Is my
judgment <em>accurate and consistent?</em></li>
  <li>Is it necessarily better to be happier, or is there a
threshold past which additional happiness doesn’t improve the quality of life?</li>
  <li>Are these results <em>significant?</em> They’re computed from just 50 samples, which
seems low for drawing such broad conclusions.</li>
  <li>Do these activities make me more or less happy, or <em>do these readings reflect
my pre-existing mental state?</em></li>
</ul>

<p>There’s also the issue of those surprising findings. Am I really less happy
when talking with <a href="http://www.eecs.berkeley.edu/~valkyrie/">Valkyrie Savage</a>? To me, the most likely
explanation is <em>trust</em>: around her, <em>I feel free to discuss negative aspects
of my life.</em> Doing so would necessarily involve fixating on those aspects,
which could account for some happiness reduction.</p>

<p>During this period, I was confronting <em>doubt and frustration in
my job.</em> According to my personal data, I was also <a href="/blog/2012/10/08/self-tracking-for-panic-a-deeper-look/">drinking heavily</a>,
possibly as a means for coping with that negative emotion. (It doesn’t help.)
Guilt is a potential factor; perhaps I felt
that I was always offloading that doubt and frustration onto her.</p>

<p>The problem, though, is that <em>none of these explanations are testable</em>. They seem
reasonable to me, but from a scientific standpoint they <em>fail a simple criterion:</em></p>

<p><blockquote><p>Upon viewing only my data, would an impartial stranger reach similar conclusions?</p></blockquote></p>

<p>I can’t see how they would, since <em>my explanations involve
intricate self-knowledge</em> that is not represented in the data.</p>

<h3 id="a-further-note-on-significance">A Further Note On Significance</h3>

<p>Let’s take a more critical look at this chart:</p>

<p><img src="https://chart.googleapis.com/chart?chs=310x198&amp;cht=bhg&amp;chco=0088cc&amp;chxt=y%2Cx&amp;chxl=0%3A%7COther+Relatives%7CSpouse%2FPartner%2FSignificant+Other%7CStrangers%7CCo+Workers%7CFriends%7CAcquaintances&amp;chxr=1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3Autsrpo&amp;chbh=20" title="Who talking with" ></p>

<p>I mentioned that this data was drawn from a total of 50 samples. I’m assuming
that these bars represent <em>average reported happiness</em> in each category. But:</p>

<ul>
  <li><strong>Which average?</strong> Probably the mean, but that’s not made explicit
anywhere.</li>
  <li><strong>Where are the error bars?</strong> I have no idea whether the ranking is significant.</li>
  <li><strong>How many samples go into each bar?</strong> Maybe “Acquaintances” and
“Other Relatives” are outliers because I rarely talk to people in those
categories.</li>
</ul>

<p>This leads to an important point:</p>

<p><blockquote><p>Never present uncertain information as certain.</p></blockquote></p>

<h2 id="digging-deeper">Digging Deeper</h2>

<p>Consider this chart:</p>

<p><img src="https://chart.googleapis.com/chart?chs=310x200&amp;cht=s&amp;chco=0088cc&amp;chxt=x%2Cy&amp;chxr=0%2C0%2C100%7C1%2C0%2C100&amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10&amp;chd=s%3AaUXKPnmomsWw0tSQnXaVrk%2CslrjjuZtXvZotualhrmepm" title="Focused" ></p>

<p><em>Am I happier when I’m more focused?</em> It’s hard to tell from looking at this
chart. This is a prime use case for <em>linear regression</em>, but I don’t have the
data! They <a href="http://support.trackyourhappiness.org/customer/portal/questions/302357-combine-categories-">claim to have plans for data export</a>, but I haven’t seen those
come to fruition. What now?</p>

<h3 id="data-extraction">Data Extraction</h3>

<p>Fortunately, the chart was generated using the 
(now deprecated) <a href="https://developers.google.com/chart/image/">Image Charts</a> functionality of the
<a href="https://developers.google.com/chart/">Google Charts API</a>. With Image Charts, you <em>make requests to specially
encoded URLs:</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://chart.googleapis.com/chart
</span><span class='line'>  ?chs=310x200
</span><span class='line'>  &amp;cht=s
</span><span class='line'>  &amp;chco=0088cc
</span><span class='line'>  &amp;chxt=x%2Cy
</span><span class='line'>  &amp;chxr=0%2C0%2C100%7C1%2C0%2C100
</span><span class='line'>  &amp;chxs=0%2C666666%2C10%7C1%2C666666%2C10
</span><span class='line'>  &amp;chd=s%3AaUXKPnmomsWw0tSQnXaVrk%2CslrjjuZtXvZotualhrmepm</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can see what all those parameters do <a href="https://developers.google.com/chart/image/docs/chart_params">here</a>,
but the one I really care about is <code>chd</code>. This <em>encodes the chart data</em>
in the <a href="https://developers.google.com/chart/image/docs/data_formats#simple">Simple Encoding Format</a>. I’ll walk through <em>how to decode
this data.</em></p>

<p>As it stands, the value of <code>chd</code> is <a href="http://tools.ietf.org/html/rfc3986#section-2.1">URL-encoded</a>.
We need to decode those <code>%3A</code> and <code>%2C</code> escape sequences.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">urlparse</span>
</span><span class='line'><span class="n">params</span> <span class="o">=</span> <span class="n">urlparse</span><span class="o">.</span><span class="n">parse_qs</span><span class="p">(</span><span class="err">‘</span><span class="n">chd</span><span class="o">=</span><span class="n">s</span><span class="o">%</span><span class="mi">3</span><span class="n">AaUXKPnmomsWw0tSQnXaVrk</span><span class="o">%</span><span class="mi">2</span><span class="n">CslrjjuZtXvZotualhrmepm</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="n">chd</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="err">‘</span><span class="n">chd</span><span class="err">’</span><span class="p">]</span> <span class="c"># ‘s:aUXKPnmomsWw0tSQnXaVrk,slrjjuZtXvZotualhrmepm’</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>s:</code> at the front means <em>use the simple encoding</em>. In that encoding, the
characters <code>A-Za-z0-9</code> are mapped to values 0-61 in a, well, simple manner:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="err">&lt;</span><span class="nf">em</span><span class="o">&gt;</span><span class="n">get_simple_value</span><span class="p">(</span><span class="n">c</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="err">‘</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>  <span class="k">if</span> <span class="err">‘</span><span class="n">A</span><span class="err">’</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">c</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="n">Z</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="err">‘</span><span class="n">A</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="err">‘</span><span class="n">a</span><span class="err">’</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">c</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="n">z</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">26</span> <span class="o">+</span> <span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="err">‘</span><span class="n">a</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="err">‘</span><span class="mi">0</span><span class="err">’</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">c</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">9</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">52</span> <span class="o">+</span> <span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="err">‘</span><span class="mi">0</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="err">‘</span><span class="n">invalid</span> <span class="n">character</span> <span class="k">for</span> <span class="n">simple</span> <span class="n">encoding</span><span class="p">:</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="err">’</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here the underscores <code>_</code> indicate missing or <code>null</code> values. With this function,
recovering the original data from the <code>chd</code> param is a quick one-liner:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="nb">map</span><span class="p">(</span><span class="n">_get_simple_value</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">chd</span><span class="p">[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="err">‘</span><span class="p">,</span><span class="err">’</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>By default, the simple encoding maps onto an effective range of 1-100, so the
last step is to normalize this and <code>zip()</code> the lists into pairs:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">fitSimpleToRange</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">xmin</span><span class="p">,</span> <span class="n">xmax</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">x</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>  <span class="n">nx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">/</span> <span class="mf">61.0</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">nx</span><span class="p">)</span> <span class="o">*</span> <span class="n">xmin</span> <span class="o">+</span> <span class="n">nx</span> <span class="o">*</span> <span class="n">xmax</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">points</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span>
</span><span class='line'>  <span class="p">[</span><span class="n">fitSimpleToRange</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span>
</span><span class='line'>  <span class="p">[</span><span class="n">fitSimpleToRange</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Done! I’ve packaged this up as <a href="https://github.com/candu/quantified-savagery-files/blob/master/lib/py/chdecode.py">chdecode</a>,
which also deals with the
<a href="https://developers.google.com/chart/image/docs/data_formats#text">Basic Text</a> and <a href="https://developers.google.com/chart/image/docs/data_formats#extended">Extended Encoding</a> formats.</p>

<h3 id="lets-see-those-charts-again">Let’s See Those Charts Again</h3>

<p>You can see the code for this analysis <a href="https://github.com/candu/quantified-savagery-files/blob/master/Panic/track-your-happiness/linregress.py">here</a>.</p>

<p>Focus, productivity, and sleep quality all have <em>minor positive correlations</em>
with happiness:</p>

<p><img src="https://lh4.googleusercontent.com/-DG51p79XNtk/UIGcRjGMLQI/AAAAAAAAAG4/mk1xaar0yJM/s640/happiness-focus.jpg" title="Focus" >
<img src="https://lh6.googleusercontent.com/-85nu0a-MBJw/UIGcRyutW9I/AAAAAAAAAG8/psRbjq12PLw/s640/happiness-productivity.jpg" title="Productivity" >
<img src="https://lh3.googleusercontent.com/-bjcS4-21xIw/UIGcSLK9mCI/AAAAAAAAAHA/EVJ1qonZvks/s640/happiness-sleep-quality.jpg" title="Sleep Quality" ></p>

<p>The <em>most significant one is focus,</em> but with $ p = 0.0927 $ it doesn’t quite
make the 5% significance threshold.</p>

<h2 id="up-next">Up Next</h2>

<p>This ends my series of posts on data collection and analysis for dealing
with panic disorder. In my next few posts, I’ll talk about my plans for future
experiments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fitbit: APIs, crossfilter, and d3.js]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/17/fitbit-apis-crossfilter-and-d3/"/>
    <updated>2012-10-17T08:30:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/17/fitbit-apis-crossfilter-and-d3</id>
    <content type="html"><![CDATA[<p>In this post, I present
<a href="https://github.com/candu/fitbit-crossfilter">fitbit-crossfilter</a>, which uses
the <a href="http://dev.fitbit.com/">Fitbit API</a>, <a href="http://square.github.com/crossfilter/">crossfilter</a> and <a href="http://d3js.org/">d3.js</a>
to provide an interactive visualization for exploratory analysis.</p>

<!-- more -->

<h2 id="the-inspiration">The Inspiration</h2>

<p>It was early April 2012. By this point, I’d been through a stint of pen-and-paper
self-tracking for <a href="/blog/2012/10/03/panic/">panic recovery</a>.
I’d <a href="/blog/2012/10/16/fitbit-my-brief-experience/">just received my Fitbit in the mail</a>. </p>

<p>Earlier that year, I applied to the <a href="http://www.eecs.berkeley.edu/Gradadm/">EECS PhD program at UC Berkeley</a> with
<a href="https://docs.google.com/document/d/10PupOF0RLa54o6y9_xBGnj7VbjtQNPab0-HdoVfT6gA/edit">this statement of purpose</a>. I was fascinated by this idea that <em>pervasive
gameplay really could make us all better</em>, that somewhere beyond the rat wheel
of gamification was hidden a Shangri-La of game-driven awesome.</p>

<p>That unfortunately didn’t pan out, and I was left with the age-old question:</p>

<p><blockquote><p>What do I do with this idea?</p></blockquote></p>

<p>It was around this time that, in a moment of exquisite
digital serendipity, <a href="http://www.meetup.com/">Meetup</a> suggested I check out the
<a href="http://www.meetup.com/quantifiedself/">Bay Area Quantified Self Meetup Group</a>.</p>

<p>Quantified Self? <a href="/blog/2012/10/02/welcome-to-quantified-savagery/">What’s that?</a>. As I explored the group page, I felt
a rush of clarity: <em>this was exactly what I’d been doing!</em> There’s a whole
community of people turning their lives into games in the name of
self-betterment!</p>

<p>I bit the bullet and forked over hard cash to sign up for
<a href="http://www.meetup.com/quantifiedself/events/58370532/">QS Show&amp;Tell #25</a> at the
<a href="http://goo.gl/maps/fn8H4">California College of the Arts</a>. It was everything I’d hoped for.
One presenter dissected 30 years of medical data and correlated it with
his marital status. Another showed off a cyclist threat detection system
cobbled together by mounting a webcam and sonar unit to his handlebars.
There was a <em>rich vein of inquiry into awesome here.</em> I was hooked.</p>

<p><a href="http://www.beaugunderson.com/">Beau Gunderson</a> of
<a href="https://singly.com/">Singly</a> presented <a href="https://github.com/beaugunderson/zeo-crossfilter">zeo-crossfilter</a>.
That was the turning point. I saw what he had done and said</p>

<p><blockquote><p>Hey, I can build that!</p></blockquote></p>

<p>And so <a href="https://github.com/candu/fitbit-crossfilter">fitbit-crossfilter</a> was born.</p>

<h2 id="the-tools">The Tools</h2>

<p>As mentioned, <a href="https://github.com/candu/fitbit-crossfilter">fitbit-crossfilter</a> is a mashup between
the <a href="http://dev.fitbit.com/">Fitbit API</a>,
<a href="http://square.github.com/crossfilter/">crossfilter</a>,
and <a href="http://d3js.org/">d3.js</a>.
I’ll go over each part with examples.</p>

<h3 id="fitbit-api">Fitbit API</h3>

<p>The Fitbit API uses <a href="http://oauth.net/">OAuth</a> for authentication. If you’ve never
confronted OAuth before, it can be confusing. To compound the confusion, <em>every
API provider seems to do it slightly differently.</em> The
<a href="https://wiki.fitbit.com/display/API/OAuth+Authentication+in+the+Fitbit+API">official Fitbit docs</a> are opaque, the
<a href="http://tools.ietf.org/html/rfc5849">OAuth specs</a> are even more opaque, and
the <a href="http://apis.io/Fitbit">unofficial apis.io listing</a> is just wrong:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -X GET -u ‘&lt;username&gt;:&lt;password&gt;<span class="err">&#39;</span> http://api.fitbit.com/1/user/-/profile.json 2&amp;gt;/dev/null | jsonpp
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;errors&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;errorType&quot;</span>: <span class="s2">&quot;oauth&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;fieldName&quot;</span>: <span class="s2">&quot;n/a&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;No Authorization header provided in the request. Each call to Fitbit API should be OAuth signed&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></password></username></p>

<p>I turned to <a href="https://github.com/simplegeo/python-oauth2">oauth2</a>, a Python library that makes it easier to carry out
this handshake. First, we get a <em>temporary access token:</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c"># Fill in your app parameters here.</span>
</span><span class='line'><span class="n">FITBIT_APP_KEY</span> <span class="o">=</span> <span class="err">‘</span><span class="o">&lt;</span><span class="n">app</span> <span class="n">key</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span><span class="s">&#39;</span>
</span><span class='line'><span class="n">FITBIT_APP_SECRET</span> <span class="o">=</span> <span class="s">&#39;&lt;app secret=&quot;&quot;&gt;&#39;</span><span class="o">&lt;/</span><span class="n">app</span><span class="o">&gt;&lt;/</span><span class="n">app</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">oauth2</span>
</span><span class='line'><span class="n">consumer</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Consumer</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">FITBIT_APP_KEY</span><span class="p">,</span> <span class="n">secret</span><span class="o">=</span><span class="n">FITBIT_APP_SECRET</span><span class="p">)</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">consumer</span><span class="p">)</span>
</span><span class='line'><span class="n">resp</span><span class="p">,</span> <span class="n">content</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="err">‘</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">api</span><span class="o">.</span><span class="n">fitbit</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">oauth</span><span class="o">/</span><span class="n">request_token</span><span class="p">,</span> <span class="err">‘</span><span class="n">GET</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="n">token</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Token</span><span class="o">.</span><span class="n">from_string</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'><span class="c"># NOTE: the auth URL uses www.fitbit.com as the domain, NOT api.fitbit.com</span>
</span><span class='line'><span class="n">auth_url</span> <span class="o">=</span> <span class="err">‘</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">fitbit</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">oauth</span><span class="o">/</span><span class="n">authorize</span><span class="err">?</span><span class="n">oauth_token</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="err">’</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">token</span><span class="o">.</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">auth_url</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we need an <a href="http://wiki.oauth.net/w/page/12238555/Signed%20Callback%20URLs">OAuth verifier</a>. This will be used to retrieve the real
access credentials. Visit <code>auth_url</code> in your browser,
log into Fitbit, and click Allow. You’ll be redirected to the OAuth callback
specified in your app. Use the value of the <code>oauth_verifier</code> GET param on your
<code>token</code> from before to keep going:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">token</span><span class="o">.</span><span class="n">set_verifier</span><span class="p">(</span><span class="err">‘</span><span class="o">&lt;</span><span class="n">oauth_verifier</span><span class="o">&gt;</span><span class="s">&#39;)</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">consumer</span><span class="p">,</span> <span class="n">token</span><span class="p">)</span>
</span><span class='line'><span class="n">resp</span><span class="p">,</span> <span class="n">content</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="s">&#39;http://api.fitbit.com/oauth/access_token&#39;</span><span class="p">,</span> <span class="s">&#39;POST&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">access_token</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Token</span><span class="o">.</span><span class="n">from_string</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></oauth_verifier></p>

<p>With this, we can now <em>retrieve useful information:</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">request_url</span> <span class="o">=</span> <span class="err">‘</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">api</span><span class="o">.</span><span class="n">fitbit</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="mi">1</span><span class="o">/</span><span class="n">user</span><span class="o">/-/</span><span class="n">profile</span><span class="o">.</span><span class="n">json</span><span class="err">’</span>
</span><span class='line'><span class="n">oauth_request</span> <span class="o">=</span> <span class="n">oauth2</span><span class="o">.</span><span class="n">Request</span><span class="o">.</span><span class="n">from_consumer_and_token</span><span class="p">(</span><span class="n">consumer</span><span class="p">,</span> <span class="n">token</span><span class="o">=</span><span class="n">access_token</span><span class="p">,</span> <span class="n">http_url</span><span class="o">=</span><span class="n">request_url</span><span class="p">)</span>
</span><span class='line'><span class="c"># Despite what the docs say, you need to generate a plaintext signature.</span>
</span><span class='line'><span class="n">oauth_request</span><span class="o">.</span><span class="n">sign_request</span><span class="p">(</span><span class="n">oauth2</span><span class="o">.</span><span class="n">SignatureMethod_PLAINTEXT</span><span class="p">(),</span> <span class="n">consumer</span><span class="p">,</span> <span class="n">access_token</span><span class="p">)</span>
</span><span class='line'><span class="n">headers</span> <span class="o">=</span> <span class="n">oauth_request</span><span class="o">.</span><span class="n">to_header</span><span class="p">(</span><span class="n">realm</span><span class="o">=</span><span class="err">’</span><span class="n">api</span><span class="o">.</span><span class="n">fitbit</span><span class="o">.</span><span class="n">com</span><span class="err">’</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">httplib</span>
</span><span class='line'><span class="n">connection</span> <span class="o">=</span> <span class="n">httplib</span><span class="o">.</span><span class="n">HTTPSConnection</span><span class="p">(</span><span class="err">‘</span><span class="n">api</span><span class="o">.</span><span class="n">fitbit</span><span class="o">.</span><span class="n">com</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="n">connection</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="err">‘</span><span class="n">GET</span><span class="err">’</span><span class="p">,</span> <span class="n">request_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'><span class="n">resp</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I encountered a few difficulties in figuring this out:</p>

<ul>
  <li>For the authorize step, you need to use <code>www.fitbit.com</code> as the URL domain.
<code>api.fitbit.com</code> will NOT work.</li>
  <li>You need to <em>sign all requests with the access token.</em></li>
  <li>No, <code>oauth2.SignatureMethod_HMAC_SHA1</code> will <strong>NOT</strong> work. Yes, they explicitly
claim to use HMAC-SHA1 in the documentation. Don’t believe everything you
read. Use <a href="http://oauth.net/core/1.0/#anchor35">plaintext signatures</a> instead.</li>
  <li>Fitbit expects both the URI and Authorization header to be set, but
<code>oauth2</code> will only set <strong>ONE</strong> of them properly.
See <a href="https://github.com/candu/fitbit-crossfilter/commit/1d094cecaa6c78bc8d5c295a797d96b7e1687493">this commit message</a>
for more details.</li>
</ul>

<p>You can see the full implementation <a href="https://github.com/candu/fitbit-crossfilter/blob/master/fitbit_crossfilter/foo/lib/fitbit.py">here</a>, along with
<a href="https://github.com/candu/fitbit-crossfilter/blob/master/fitbit_crossfilter/foo/views/__init__.py">an example of its use</a>.</p>

<h3 id="crossfilter">crossfilter</h3>

<p>Square’s <a href="http://square.github.com/crossfilter/">crossfilter</a> is a JavaScript library for efficiently performing
<em>multidimensional range queries.</em> I’ve included an interactive example
<a href="#quick-demo">below</a>.</p>

<p>crossfilter uses two types of objects to <em>represent a multidimensional dataset:</em></p>

<ul>
  <li><strong>dimension:</strong> a map function that returns totally-ordered <em>dimension values</em>
(e.g. numbers, dates);</li>
  <li><strong>group:</strong> a reduce function on those dimension values.</li>
</ul>

<p>The <em>totally-ordered</em> part is essential, since that makes it possible to
perform range queries. A quick code snippet might help explain this further:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">L</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">N</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">M</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">L</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">i</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">M</span> <span class="o">*</span> <span class="p">(</span><span class="nx">N</span> <span class="o">-</span> <span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="nx">N</span><span class="p">)]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">crossfilter</span><span class="p">(</span><span class="nx">L</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">d0</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">g0</span> <span class="o">=</span> <span class="nx">d0</span><span class="p">.</span><span class="nx">group</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">d1</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">g1</span> <span class="o">=</span> <span class="nx">d1</span><span class="p">.</span><span class="nx">group</span><span class="p">();</span>
</span><span class='line'><span class="nx">d0</span><span class="p">.</span><span class="nx">filterRange</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>At this point, we can <em>inspect the dimensions and groups</em> to understand the
effect of <code>filterRange()</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">d1</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="kc">Infinity</span><span class="p">))</span>
</span><span class='line'><span class="err">‘</span><span class="p">[[</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">6</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">]]</span><span class="err">’</span>
</span><span class='line'><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">g1</span><span class="p">.</span><span class="nx">all</span><span class="p">())</span>
</span><span class='line'><span class="err">‘</span><span class="p">[{</span><span class="err">“</span><span class="nx">key</span><span class="err">”</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="err">”</span><span class="nx">value</span><span class="err">”</span><span class="o">:</span><span class="mi">3</span><span class="p">},{</span><span class="err">“</span><span class="nx">key</span><span class="err">”</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="err">”</span><span class="nx">value</span><span class="err">”</span><span class="o">:</span><span class="mi">2</span><span class="p">}]</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note that the range <code>[3, 8]</code> is actually interpreted as the semi-open interval
$ [3, 8) $. Note also that the elements of <code>g1.all()</code> are of the form
<code>{key: k, value: v}</code> where <code>v</code> is the number of elements <code>x</code> with
<code>3 &lt;= x[0] &amp;&amp; x[0] &lt; 8 &amp;&amp; x[1] == k</code>.</p>

<h3 id="d3js">d3.js</h3>

<p><blockquote><p>D3.js is a JavaScript library for manipulating documents based on data.</p><footer><strong>D3.js</strong> <cite><a href='http://d3js.org/'>d3js.org/&hellip;</a></cite></footer></blockquote></p>

<p>Using HTML, SVG, CSS, and JavaScript, you can build some pretty stunning
visualizations.
Again, check out the interactive example <a href="#quick-demo">below</a>. For more
examples, the <a href="https://github.com/mbostock/d3/wiki/Gallery">D3 Gallery</a> is
many kinds of awesome.</p>

<h3 id="a-quick-demo">A Quick Demo</h3>

<div id="quick-demo">
  <style type="text/css">
    .chart {
      display: inline-block;
      height: 151px;
      margin-bottom: 20px;
    }
    
    .reset {
      margin-left: 1em;
      font-size: smaller;
    }
    
    .background.bar {
      fill: #ccc;
    }
    
    .foreground.bar {
      fill: steelblue;
    }
    
    .axis path, .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }
    
    .axis text {
      font: 10px sans-serif;
    }
    
    .brush rect.extent {
      fill: steelblue;
      fill-opacity: .125;
    }
    
    .brush .resize path {
      fill: #eee;
      stroke: #666;
    }

    #chartA {
      width: 610px;
    }
    
    #chartB {
      width: 610px;
    }
  </style>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/Panic/fitbit-crossfilter/crossfilter.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/Panic/fitbit-crossfilter/d3.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/Panic/fitbit-crossfilter/chart.js"></script>
  <script src="https://raw.github.com/candu/quantified-savagery-files/master/Panic/fitbit-crossfilter/demo.js"></script>
  <div id="charts">
    <div id="chartA" class="chart">
      <div class="title">A</div>
    </div>
    <div id="chartB" class="chart">
      <div class="title">B</div>
    </div>
  </div>
</div>

<p>If you’re viewing this through an RSS reader, the above demo won’t show
correctly. You can view it <a href="/blog/2012/10/17/fitbit-apis-crossfilter-and-d3#quick-demo">on my blog</a>.</p>

<h2 id="insights-from-my-data">Insights From My Data</h2>

<p>You can see the live dashboard <a href="http://fitbit.savageevan.com/">here</a>. Some of the highlights:</p>

<ul>
  <li>During this tracking period, I was <em>most active during the 8-10 am and 6-9 pm
timeslots.</em> (The former was my morning walk to the employee shuttle; the
latter was the evening walk back plus <a href="http://soccerfours.com/">Soccer Fours</a>.</li>
  <li>The more sleep I get, the more bipolar my exercise habits become.</li>
  <li>Unlike Beau Gunderson, I’m not seeing a correlation between number of times
awoken and duration of sleep.</li>
  <li>There is, however, a clear positive correlation between steps per minute
and calories burned per minute, as expected.</li>
</ul>

<p>Again, you can play around with the dashboard <a href="http://fitbit.savageevan.com/">here</a>
to find patterns in my Fitbit data.</p>

<h2 id="how-to-use-fitbit-crossfilter">How To Use fitbit-crossfilter</h2>

<p>I’ve placed my live fitbit-crossfilter dashboard into demo mode, but <em>you can
fetch and view your data as follows.</em></p>

<p>First, you will need a Fitbit app <em>with Partner API access</em>; see
<a href="https://wiki.fitbit.com/display/API/Fitbit+Partner+API">this page</a> for more details on setting that up. Use the following
application settings:</p>

<ul>
  <li><strong>Application Type:</strong> Website</li>
  <li><strong>Callback URL:</strong> <code>http://localhost:9001/oauth</code></li>
  <li><strong>Default Access Type:</strong> Read-Only</li>
</ul>

<p>Now copy <code>settings.py.nopasswd</code> to create your settings file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cp settings.py.nopasswd settings.py
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Edit the bottom of <code>settings.py</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">SYNC_ENABLED</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'><span class="n">DEFAULT_USER</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'><span class="n">FITBIT_CONSUMER_KEY</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">your</span> <span class="n">app</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">key</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">FITBIT_CONSUMER_SECRET</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">your</span> <span class="n">app</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">secret</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></your></your></p>

<p>Start the server, login, and sync your data:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python manage.py runserver 9001
</span><span class='line'><span class="c"># visit localhost:9001/login in the browser to do the OAuth handshake</span>
</span><span class='line'><span class="c"># visit localhost:9001/sync-user-data in the browser to sync data</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When the syncing completes, you’ll be redirected to your dashboard.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Tracking for Panic: Another Dataset]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/14/self-tracking-for-panic-another-dataset/"/>
    <updated>2012-10-14T21:23:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/14/self-tracking-for-panic-another-dataset</id>
    <content type="html"><![CDATA[<p>In this post, I perform the same analyses presented in
<a href="/blog/2012/10/09/self-tracking-for-panic-an-even-deeper-look/">my last post</a> using data from my second panic tracking period.
I then test whether my average alcohol and sugar consumption changed
measurably between the two tracking periods.</p>

<p>During the second tracking period, I gathered data using
<a href="https://github.com/candu/qs-counters">qs-counters</a>, a simple utility I built for reducing friction in
the recording process.</p>

<!-- more -->

<h2 id="the-usual-suspects">The Usual Suspects</h2>

<h3 id="linear-regression">Linear Regression</h3>

<p>During the second tracking period, <em>alcohol consumption remained
relatively constant</em>:</p>

<p><img src="https://lh4.googleusercontent.com/-Kha5L6BVqUo/UHxN-lFh_LI/AAAAAAAAADY/eVVLWJbYMaU/s640/qs-counters-alcohol.jpg" title="Alcohol Consumption" ></p>

<p>Sugar consumption is a different story, with a <em>pronounced negative trend</em>:</p>

<p><img src="https://lh6.googleusercontent.com/-MN60bkN-thg/UHxN_qhP-AI/AAAAAAAAADo/HXsmUbqEWnw/s640/qs-counters-sweets.jpg" title="Sugar Consumption" ></p>

<p>The evidence to suggest that <em>my alcohol and sugar consumption are linked</em> is
also much stronger now:</p>

<p><img src="https://lh5.googleusercontent.com/-9J_fMxZS2Co/UHxOAaijDbI/AAAAAAAAAD4/UDt5xjzZ-Lw/s640/qs-counters-alcohol-vs-sugar.jpg" title="Alcohol vs. Sugar Consumption" ></p>

<p>On the other hand, the previous-day alcohol effect seems to be
non-existent:</p>

<p><img src="https://lh6.googleusercontent.com/-8CPpr0mjczs/UHxOABjFKSI/AAAAAAAAADw/4sVdt2axAEs/s640/qs-counters-alcohol-today-vs-yesterday.jpg" title="Alcohol: Today vs. Yesterday" ></p>

<h3 id="fast-fourier-transform">Fast Fourier Transform</h3>

<p>With more data points, the FFT frequency amplitude plot is more muddled:</p>

<p><img src="https://lh4.googleusercontent.com/-1AeQyUEEW8o/UHxN90Wk75I/AAAAAAAAADM/eJs5x6UaQNI/s640/qs-counters-fft-frequencies.jpg" title="FFT Frequencies" ></p>

<p>The 2-day and 7-day effects previously “discovered” are nowhere to be
found.</p>

<h3 id="maximum-entropy-modelling">Maximum Entropy Modelling</h3>

<p>I didn’t record panic attacks during this tracking period. My previous
efforts reduced the severity and frequency of these attacks drastically,
enough so that the data here would have been extremely sparse.</p>

<p>In the absence of that data, I asked a different question:</p>

<p><blockquote><p>What features best predict my exercise patterns?</p></blockquote></p>

<p>Here are the top features from <code>MaxentClassifier</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>3.369 caffeine==True and label is ‘no-exercise’
</span><span class='line'>  -0.739 sweets==True and label is ‘exercise’
</span><span class='line'>   0.399 sweets==True and label is ‘no-exercise’
</span><span class='line'>  -0.201 alcohol==True and label is ‘exercise’
</span><span class='line'>   0.166 alcohol==True and label is ‘no-exercise’
</span><span class='line'>   0.161 relaxation==True and label is ‘exercise’
</span><span class='line'>  -0.092 relaxation==True and label is ‘no-exercise’</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The caffeine finding is misleading. On one of the two days where I entered
non-zero caffeine consumption, that was due to a <em>mistake in data entry.</em>
(Side note to self: all tools should include an undo feature!) Aside from
that, <em>sugar consumption appears to have the strongest negative effect on
exercise.</em></p>

<h2 id="students-t-test">Student’s t-test</h2>

<h3 id="what">What?</h3>

<p>Student’s t-test answers this question:</p>

<p><blockquote><p>Are these samples significantly different?</p></blockquote></p>

<p>More formally, the t-test answers a statistical question about normal
distributions: given
$ X \sim \mathcal{N}(\mu_X, \sigma_X^2) $ and
$ Y \sim \mathcal{N}(\mu_Y, \sigma_Y^2) $,
does $ \mu_X = \mu_Y $?</p>

<p>If we let $ Y $ be a known normal distribution centered at
rather than taking it from an empirical sample,
we also obtain a one-sample t-test for the null hypothesis
$ \mu_X = \mu_Y $.</p>

<h3 id="why">Why?</h3>

<p>In a self-tracking context, you might ask the following questions:</p>

<ul>
  <li>Did I improve significantly across tracking periods?</li>
  <li>Is my behavior consistent across tracking periods?</li>
</ul>

<p>Student’s t-test can help address both questions.</p>

<h3 id="the-data">The Data</h3>

<p>Before using Student’s t-test on my alcohol and sugar consumption data from
the two tracking periods, I <em>check whether these samples have a roughly
normal distribution.</em> The code for normality checking is
<a href="https://github.com/candu/quantified-savagery-files/blob/master/Panic/qs-counters/counters_normality.py">here</a>.</p>

<p>It helps to <em>visualize the histogram data first</em>:</p>

<p><img src="https://lh5.googleusercontent.com/-1sX3PJfuiAg/UHxdvv_-mkI/AAAAAAAAAEc/Rm7uknNlG7g/s640/recovery-journal-alcohol-histogram.jpg" title="Alcohol Histogram (recovery-journal)" >
<img src="https://lh5.googleusercontent.com/-9ScCbHMq4ls/UHxdu40NnPI/AAAAAAAAAEM/3SRyqPF_Bh8/s640/qs-counters-alcohol-histogram.jpg" title="Alcohol Histogram (qs-counters)" ></p>

<p><img src="https://lh3.googleusercontent.com/-10RnNsKZAS0/UHxdvzkHVhI/AAAAAAAAAEg/QCgl_8vd4Go/s640/recovery-journal-sweets-histogram.jpg" title="Sugar Histogram (recovery-journal)" >
<img src="https://lh6.googleusercontent.com/-c407cdWckp0/UHxdvMT5GJI/AAAAAAAAAEU/_xR3qO3ZMX0/s640/qs-counters-sweets-histogram.jpg" title="Sugar Histogram (qs-counters)" ></p>

<p>These don’t look particularly close to normal distributions, but it’s hard to
tell with discrete-valued data. For more evidence, I use the
<a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.shapiro.html">Shapiro-Wilk statistical normality test</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alcohol, recovery-journal:  (0.944088339805603, 0.10709714889526367)
</span><span class='line'>alcohol, qs-counters:  (0.8849299550056458, 4.6033787270971516e-07)
</span><span class='line'>sugar, recovery-journal:  (0.722859263420105, 2.5730114430189133e-06)
</span><span class='line'>sugar, qs-counters:  (0.8092769384384155, 8.38931979441071e-10)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The null hypothesis for Shapiro-Wilk is that the sample is normally distributed,
so these low p-values indicate the opposite: <em>my data isn’t normally distributed!</em>
Bad news for my attempt to use Student’s t-test here.</p>

<p>Nevertheless, I’ll barge ahead and run the t-test anyways, just to see what
that process looks like with <code>scipy.stats</code>. The code for t-testing is
<a href="https://github.com/candu/quantified-savagery-files/blob/master/Panic/qs-counters/counters_ttest.py">here</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alcohol
</span><span class='line'>==========
</span><span class='line'>avg(A) = 3.26
</span><span class='line'>avg(B) = 2.35
</span><span class='line'>(t, p) = (2.0721, 0.0469)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="sweets">sweets&lt;/h1>
</span><span class='line'>&lt;p>avg(A) = 1.19
</span><span class='line'>avg(B) = 1.23
</span><span class='line'>(t, p) = (-0.1969, 0.8453)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If the t-test were useful for this data, it would show that <em>my alcohol
consumption was significantly lower during the second tracking period.</em>
With such a large drop in average consumption, I’m willing to say that
this is a reasonable assertion.</p>

<h2 id="a-question-of-motivation">A Question Of Motivation</h2>

<p>By this point, you might be asking:</p>

<p><blockquote><p>Why did I even bother with all this analysis when I have so few data points?</p></blockquote></p>

<p>Good question! The short answer? It’s a <em>learning opportunity.</em> The longer
answer is backed by a chain of reasoning:</p>

<ul>
  <li>As data collection gets easier, <em>the value of data analysis goes up;</em></li>
  <li>Statistical analysis is <em>hard to impossible</em> for the average user, so <em>they
will use whatever tools they can get</em> from app markets and device vendors;</li>
  <li>Most of those tools are built by people who, by trade, are software
developers;</li>
  <li>Most developers, even good ones, are typically not that great in the
statistics and data analysis department;</li>
  <li>Therefore, as a developer with plans to build self-tracking tools, <em>I owe it
to myself and my future users to know this stuff better.</em></li>
</ul>

<p>As it turns out, data analysis is hard, period. Picking the right tools is
difficult, and picking the wrong ones (like the t-test above!) <em>can easily
produce results that appear to be meaningful but are not.</em> In a self-tracking
scenario, this problem is often made worse by <em>smaller datasets</em> and <em>uncontrolled
conditions.</em></p>

<h2 id="thought-experiments">Thought Experiments</h2>

<h3 id="repeat-yourself-a-reflection-on-self-tracking-and-science">Repeat Yourself: A Reflection On Self-Tracking And Science</h3>

<p>One criticism often launched at the Quantified Self community is that
self-tracking is not <em>scientific</em> enough. For an interesting discussion
of the merits and drawbacks of presenting self-experimentation as science,
I highly recommend the <a href="http://www.escholarship.org/uc/item/2xc2h866#page-36">Open Peer Commentary section</a>
of <a href="http://www.escholarship.org/uc/item/2xc2h866">this paper</a>. Some of
the broader themes in this debate are also summarized
<a href="http://quantifiedself.com/2012/05/qs-101-the-science-of-self-experimentation/">here</a> on
the Quantified Self website.</p>

<p>To be fair, there are a host of valid concerns here. For starters,
<em>it’s very difficult to impose a controlled environment when self-tracking.</em>
In a Heisenbergian twist, being mindful of your behavior could modify the
behavior you’re trying to measure; this effect is discussed briefly by
<a href="http://www.escholarship.org/uc/item/2xc2h866#page-45">Simon Moore and Joselyn Sellen</a>.</p>

<p>Additionally, a sample population of one is meaningless. Will your
approaches work for others? Did you gather the data in a consistent
manner? Are your sensors working properly? The usual antidote is to
increase the sample population, but then you have another set of problems.
Are all participants using the same sensors in the same way? Are they all
running the same analyses?</p>

<p>From watching several presentations about self-tracking, there is a
curious pattern:</p>

<p><blockquote><p>Like any other habit, the tracking habit is hard to maintain.</p></blockquote></p>

<p>As a corollary, many tracking experiments consist of multiple
tracking periods, these punctuated by relapses of the tracking habit.</p>

<p>Many people interpret these relapses as failures, but they’re actually
<em>amazing scientific opportunities!</em> These are chances to re-run the same
experiment, verifying or confounding results from your earlier tracking
periods.</p>

<h3 id="the-predictive-modelling-game">The Predictive Modelling Game</h3>

<p>Predictive modelling could be an interesting component of a habit
modification system. Suppose I want to exercise more regularly. First, 
I <em>select several features that seem likely to influence my exercise
patterns</em>, such as:</p>

<ul>
  <li>Am I travelling? Where am I?</li>
  <li>What foods did I eat? When? How much?</li>
  <li>How positive or negative is my mood?</li>
  <li>Did I schedule time today to exercise?</li>
  <li>Did I exercise yesterday? How much?</li>
</ul>

<p>Next, I <em>gather some baseline data</em> by tracking these features along with
my exercise patterns. I then use that data to <em>train a classifier.</em>
Finally, I keep tracking the features, ask the classifier to predict my
exercise activity, and play a simple game with myself:</p>

<p><blockquote><p>Can I beat the classifier?</p></blockquote></p>

<p>That is, <em>can I exercise more often than my existing behavior patterns
suggest I should?</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Tracking For Panic: A Deeper Look]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/09/self-tracking-for-panic-an-even-deeper-look/"/>
    <updated>2012-10-09T07:00:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/09/self-tracking-for-panic-an-even-deeper-look</id>
    <content type="html"><![CDATA[<p>In this post, I apply three statistical and machine learning tools to my panic
recovery journal data: linear regression/correlation, the Fast Fourier
Transform, and maximum entropy modelling.</p>

<!-- more -->

<h2 id="first-a-word-about-tools">First, A Word About Tools</h2>

<p><blockquote><p>I suppose it is tempting, if the only tool you have is a hammer, to treat<br/>everything as if it were a nail.</p><footer><strong>Abraham Maslow</strong> <cite>The Psychology of Science: A Reconnaissance</cite></footer></blockquote></p>

<h2 id="now-a-necessary-disclaimer">Now, A Necessary Disclaimer</h2>

<p>My experiment has fewer than 50 samples, which is <em>nowhere near enough to draw
statistically significant conclusions</em>. That’s not the point. The primary
purpose of this post is to <em>demonstrate analysis techniques by example</em>. These
same methods can be wielded on larger datasets, where they are much more
useful.</p>

<h2 id="getting-ready">Getting Ready</h2>

<p>To follow along with the examples here, you’ll need
the excellent Python toolkits
<a href="http://scipy.org/">scipy</a>,
<a href="http://matplotlib.org/">matplotlib</a>, and
<a href="http://nltk.org/">nltk</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install scipy nltk matplotlib</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="linear-regression">Linear Regression</h2>

<h3 id="what">What?</h3>

<p>Linear regression answers this question:</p>

<p><blockquote><p>What is the line that most closely fits this data?</p></blockquote></p>

<p>Given points $ P_i = (x_i, y_i) $, the goal is to find the line
$ y = mx + b $ such that some error function is minimized.
A common one is the least squares function:</p>

<script type="math/tex; mode=display">
f(m, b) = \sum_{i} \left(y_i - (mx_i + b)\right)^2
</script>

<p>The
<a href="http://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient">Pearson correlation coefficient</a> $ R $ and
<a href="http://www.lstr.net/blog/2008/07/08/p-values-explained-well/">p-value</a> $ p $
are also useful here, as they measure <em>correlation</em> and <em>statistical
significance</em>.</p>

<h3 id="why">Why?</h3>

<p>In a self-tracking context, you might ask the following questions:</p>

<ul>
  <li>Have I been exercising more over time?</li>
  <li>Does exercise affect mood? By how much and in what direction?</li>
</ul>

<p>Linear regression can help address both questions. However, it can only find
<em>linear</em> relationships between datasets. Many dynamic processes are <em>locally linear</em>
but not <em>globally linear</em>. For instance, there are practical limits to how
much you can exercise in a day, so no linear model with non-zero slope will
accurately capture your exercise duration for all time.</p>

<h3 id="the-data">The Data</h3>

<p>You can see the code for this analysis <a href="https://github.com/candu/quantified-savagery-files/blob/master/Panic/recovery-journal/food_linregress.py">here</a>. I look at only the first
31 days, that being the largest consecutive run for which I have data.</p>

<p><img src="https://lh6.googleusercontent.com/-plD2webhfrY/UHXc4xHxAGI/AAAAAAAAACM/2X488DqHKms/s640/alcohol.jpg" title="Alcohol Consumption" ></p>

<p>My alcohol consumption did not decrease over time, but rather stayed fairly
constant: with $ R = 0.0098 $, there is no correlation between alcohol and time.</p>

<p><img src="https://lh5.googleusercontent.com/-UCZKlx5l5RI/UHXc6u8h2vI/AAAAAAAAACs/CWcJjS09dS8/s640/sweets.jpg" title="Sugar Consumption" ></p>

<p>Sugar consumption is a similar story: although the best-fit slope is slightly
negative, $ R = -0.0671 $ indicates no correlation over time. It seems that my
alcohol and sugar consumption were not modified significantly over the tracking
period.</p>

<p><img src="https://lh5.googleusercontent.com/-Ssz89uoE-EA/UHXc5DvHf0I/AAAAAAAAACU/o0C_PJpmZcM/s640/alcohol-and-sugar.jpg" title="Alcohol and Sugar Consumption" ></p>

<p>I decided to graph alcohol and sugar together. It looks like they might be
related, as the peaks in each seem to coincide on several occasions. Let’s
test this hypothesis:</p>

<p><img src="https://lh6.googleusercontent.com/-iCO9umA8L8s/UHXc5vImvhI/AAAAAAAAACc/d82SCqFs-qI/s640/alcohol-today-vs-yesterday.jpg" title="Alcohol vs. Sugar Consumption" ></p>

<p>The positive slope is more pronounced this time, but
$ R = 0.1624 $ still indicates a small degree of correlation. We can also look
at the p-value: with $ p = 0.3827 $, it is fairly easy to write this off as
a random effect.</p>

<p>Finally, let’s take another look at a question from
<a href="/blog/2012/10/08/self-tracking-for-panic-a-deeper-look/">a previous blog post</a>:</p>

<p><blockquote><p>On days where I drink heavily, do I drink less the day after?</p></blockquote></p>

<p><img src="https://lh6.googleusercontent.com/-iCO9umA8L8s/UHXc5vImvhI/AAAAAAAAACc/d82SCqFs-qI/s640/alcohol-today-vs-yesterday.jpg" title="Alcohol Consumption: Today vs. Yesterday" ></p>

<p>There’s a negative slope there, but the correlation and p-value statistics are
in the same uncertain zone as before. I likely need more data to investigate
these last two effects properly.</p>

<h2 id="fast-fourier-transform">Fast Fourier Transform</h2>

<h3 id="what-1">What?</h3>

<p>Fourier analysis answers this question:</p>

<p><blockquote><p>What frequencies comprise this signal?</p></blockquote></p>

<p>Given a sequence $ x_n $, a
<a href="http://en.wikipedia.org/wiki/Discrete_Fourier_transform">Discrete Fourier Transform</a> (DFT)
computes</p>

<script type="math/tex; mode=display">
X_k = \sum_{n=0}^{N-1} x_n \cdot e^{\frac{-2 i \pi k n}{N}}
</script>

<p>The $ X_k $ encode the amplitude and phase of frequencies
$ \frac{f k}{N} $ Hz, where $ T $ is the time between samples
and $ f = 1 / T $ is the sampling frequency.</p>

<p>As described here, the DFT requires $ \mathcal{O}(N^2) $ time to
compute. The <a href="http://mathworld.wolfram.com/FastFourierTransform.html">Fast Fourier Transform</a> (FFT) uses
divide-and-conquer on this sum of complex exponentials to compute the DFT in
$ \mathcal{O}(N \log N) $ time. 
<a href="http://groups.csail.mit.edu/netmit/sFFT/">Further speedups are possible</a> for
real-world signals that are sparse in the frequency domain.</p>

<h3 id="why-1">Why?</h3>

<p>In a self-tracking context, you might ask the following questions:</p>

<ul>
  <li>Do I have regular exercising patterns?</li>
  <li>Do these patterns cycle weekly? bi-weekly? monthly?</li>
  <li>How much does my amount of exercise fluctuate during a cycle?</li>
</ul>

<p>With the FFT, Fourier analysis can help address these questions. However, it
can only find <em>periodic</em> effects. Unlike linear regression, it does not help
find <em>trends</em> in your data.</p>

<h3 id="the-data-1">The Data</h3>

<p>You can see the code for this analysis <a href="https://github.com/candu/quantified-savagery-files/blob/master/Panic/recovery-journal/food_fft.py">here</a>. Again, I look at the
first 31 days to ensure that the frequency analysis is meaningful.</p>

<p><img src="https://lh5.googleusercontent.com/-8j00ob_Ji-Y/UHXc67MQVpI/AAAAAAAAAC0/n3akVSjtRHs/s640/fft-frequencies.jpg" title="Frequency Strengths" ></p>

<p>There are some apparent maxima there, but it’s hard to tell what they
mean. Part of the difficulty is that <em>these are frequencies rather than
period lengths</em>, so let’s deal with that:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python food_fft.py 
</span><span class='line'>food_fft.py:32: RuntimeWarning: divide by zero encountered in divide
</span><span class='line'>  for strength, phase, period in sorted(zip(FS, FP, 1.0 / Q))[-5:]:
</span><span class='line'>[2.21 days] 3.0461 (phase=-0.67 days)
</span><span class='line'>[-2.21 days] 3.0461 (phase=-0.67 days)
</span><span class='line'>[7.75 days] 3.1116 (phase=-3.67 days)
</span><span class='line'>[-7.75 days] 3.1116 (phase=-3.67 days)
</span><span class='line'>food_fft.py:33: RuntimeWarning: invalid value encountered in double_scalars
</span><span class='line'>  phase_days = period * (phase / (2.0 * math.pi))
</span><span class='line'>[inf days] 18.1401 (phase=nan days)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you’re not familiar with the Fourier transform,
the last line might be a bit mysterious. That corresponds to $ X_0 $, which
is just the sum of the original samples:</p>

<script type="math/tex; mode=display">
X_0 = \sum_{n=0}^{N-1} x_n \cdot e^0 = \sum_{n=0}^{N-1} x_n
</script>

<p>Other than that, the most pronounced cycles have period lengths of
2.21 days and 7.75 days. The former might be explained by a <em>see-saw drinking
pattern</em>, whereas the latter is likely related to the day-of-week effects
we saw <a href="/blog/2012/10/08/self-tracking-for-panic-a-deeper-look/">in the previous post</a>.</p>

<p>Which day of the week? The phase is -3.67 days, and our sample starts on a
Monday, placing the first peak on Thursday. The period is slightly longer than
a week, though, and the data runs for 31 days, so these peaks gradually shift
to <em>cover the weekend</em>.</p>

<p>There are two caveats:</p>

<ol>
  <li>I have no idea whether a Fourier coefficient of about 3 is significant
here. If it isn’t, I’m grasping at straws.</li>
  <li>Again, the small amount of data means the frequency domain data is sparse.
To accurately test for bi-daily or weekly effects, I <em>need more
fine-grained period lengths.</em></li>
</ol>

<h2 id="maximum-entropy-modelling">Maximum Entropy Modelling</h2>

<h3 id="what-2">What?</h3>

<p>Maximum entropy modelling answers this question:</p>

<p><blockquote><p>Given observations of a random process, what is the most likely model<br/>for that random process?</p></blockquote></p>

<p>Given a discrete probability distribution $ p(X = x_k) = p_k $, the entropy
of this distribution is given by</p>

<script type="math/tex; mode=display">
H(p) = \sum - p_k \log p_k
</script>

<p>(Yes, I’m conflating the concepts of
<a href="http://en.wikipedia.org/wiki/Random_variable">random variables</a> and
<a href="http://en.wikipedia.org/wiki/Probability_distribution">probability distributions</a>.
If you knew that, you probably don’t need this explanation.)</p>

<p>This can be thought of as the <em>number of bits needed to encode outcomes
in this distribution</em>. For instance, if I have a double-headed coin, I need
no bits: I already know the outcome. Given a fair coin, though, I need one bit:
heads or tails?</p>

<p>After repeated sampling, we get observed expected values for $ p_k $;
let these be $ p’_k $. Since we would like the model to <em>accurately
reflect what we already know</em>, we impose the constraints $ p_k = p’_k $.
The maximum entropy model is the model that also maximizes $ H(p’) $.</p>

<p>This model encodes what is known
<em>while remaining maximally noncommittal on what is unknown.</em></p>

<p>Adam Berger (CMU) provides <a href="http://www.cs.cmu.edu/afs/cs/user/aberger/www/html/tutorial/node2.html#SECTION00011000000000000000">a more concrete example</a>.
If you’re interested in learning more, his tutorial is highly recommended
reading.</p>

<h3 id="why-2">Why?</h3>

<p>In a self-tracking context, you might ask the following questions:</p>

<ul>
  <li>Which treatments have the greatest effect in preventing panic attacks?
Which have the least effect?</li>
  <li>Today I exercised for at least 30 minutes and had four drinks. Am I
likely to get a panic attack?</li>
  <li>What treatments should I try next?</li>
</ul>

<p>Maximum entropy modelling can help address these questions. It is often
used to <em>classify unseen examples</em>, and would be fantastic in a
<a href="http://100plus.com/2012/09/qs-data-commons/">data commons</a> scenario
with enough data to provide recommendations to users. </p>

<h3 id="feature-extraction">Feature Extraction</h3>

<p>Since I’m now effectively building a classifier, there’s an additional step.
I need features for my classifier, which I extract from my existing datasets:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>train_set = []
</span><span class='line'>dates = set(W).intersection(F)
</span><span class='line'>for ds in dates:
</span><span class='line'>  try:
</span><span class='line'>    ds_data = {
</span><span class='line'>      ‘relaxation’ : bool(int(W[ds][‘relaxation’])),
</span><span class='line'>      ‘exercise’ : bool(int(W[ds][‘exercise’])),
</span><span class='line'>      ‘caffeine’ : int(F[ds][‘caffeine’]) &gt; 0,
</span><span class='line'>      ‘sweets’ : int(F[ds][‘sweets’]) &gt; 1,
</span><span class='line'>      ‘alcohol’ : int(F[ds][‘alcohol’]) &gt; 4,
</span><span class='line'>      ‘supplements’ : bool(int(F[ds][‘supplements’]))
</span><span class='line'>    }
</span><span class='line'>  except (ValueError, KeyError):
</span><span class='line'>    continue
</span><span class='line'>  had_panic = P.get(ds) and ‘panic’ or ‘no-panic’
</span><span class='line'>  train_set.append((ds_data, had_panic))</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note that the features listed here are binary. I use my daily goals as
thresholds on caffeine, sweets, and alcohol.</p>

<p>(If you know how to get float-valued features working with NLTK, let me know!
Otherwise, there’s always <a href="http://www.cs.utah.edu/~hal/megam/">megam</a> or
<a href="http://www-i6.informatik.rwth-aachen.de/web/Software/YASMET.html">YASMET</a>.</p>

<h3 id="the-data-2">The Data</h3>

<p>You can see the code for this analysis <a href="https://github.com/candu/quantified-savagery-files/blob/master/Panic/recovery-journal/panic_maxent.py">here</a>.
This time I don’t care about having consecutive dates, so I use all of the
samples.</p>

<p>After building a <code>MaxentClassifier</code>, I print out the most informative features
with <code>show_most_informative_features()</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-2.204 exercise==True and label is ‘panic’
</span><span class='line'>   1.821 caffeine==True and label is ‘panic’
</span><span class='line'>  -0.867 relaxation==True and label is ‘panic’
</span><span class='line'>   0.741 alcohol==True and label is ‘panic’
</span><span class='line'>  -0.615 caffeine==True and label is ‘no-panic’
</span><span class='line'>  -0.537 supplements==True and label is ‘panic’
</span><span class='line'>   0.439 sweets==True and label is ‘panic’
</span><span class='line'>   0.430 exercise==True and label is ‘no-panic’
</span><span class='line'>   0.284 relaxation==True and label is ‘no-panic’
</span><span class='line'>   0.233 supplements==True and label is ‘no-panic’</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Exercise, relaxation breathing, and vitamin supplements help with panic.
Caffeine, alcohol, and sweets do not. I knew that already, but this suggests 
<em>which treatments or dietary factors have greatest impact.</em></p>

<p>Let’s consider the supplements finding more closely. Of the 45 days, I took
supplements on all but two. It’s <em>dangerous</em> to draw any conclusions from a
feature for which there are very few negative samples.
This points out some important points about data analysis:</p>

<ul>
  <li><strong>Know your data</strong>: otherwise, you may <em>ascribe undue meaning to outliers or noise.</em></li>
  <li><strong>Know your features:</strong> supplements are probably not a good feature here.
A <em>feature inclusion threshold</em> on number of positive and negative samples 
might be helpful here.</li>
  <li><strong>Beware magic:</strong> even when you understand their inner workings, <em>machine
learning algorithms can produce results that are difficult to interpret.</em></li>
</ul>

<h2 id="up-next">Up Next</h2>

<p>In my next post, I look at a panic recovery dataset gathered using
<a href="https://github.com/candu/qs-counters">qs-counters</a>, a simple utility I built to reduce friction in
self-tracking. I perform these same three analyses on the
<a href="https://github.com/candu/quantified-savagery-files/tree/master/Panic/qs-counters">qs-counters dataset</a>, then compare it to the
<a href="https://github.com/candu/quantified-savagery-files/tree/master/Panic/recovery-journal">recovery-journal dataset</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Tracking For Panic: A bash-ful Look At Some Data]]></title>
    <link href="http://blog.savageevan.com/blog/2012/10/08/self-tracking-for-panic-a-deeper-look/"/>
    <updated>2012-10-08T10:00:00-07:00</updated>
    <id>http://blog.savageevan.com/blog/2012/10/08/self-tracking-for-panic-a-deeper-look</id>
    <content type="html"><![CDATA[<p>In this post, I perform initial exploratory analysis on my panic recovery
journal data using basic UNIX/bash commands.</p>

<!-- more -->

<h2 id="unix-bash-youre-not-serious-right">UNIX? bash? You’re not serious, right?</h2>

<p>Most of the data-centric Quantified Self talks I’ve seen focus on more
complicated methods, including:</p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Linear_regression">linear regression</a>, which <em>identifies gradual trends</em>;</li>
  <li><a href="http://en.wikipedia.org/wiki/Fast_Fourier_transform">FFT</a>, which <em>identifies periodic effects</em>;</li>
  <li><a href="http://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient">Pearson’s r</a>, which <em>measures correlation between datasets</em>;</li>
  <li><a href="http://en.wikipedia.org/wiki/Student's_t-test">t-test</a>, which <em>measures difference between datasets</em>.</li>
</ul>

<p>These are extremely powerful tools to have at your disposal. Better yet,
many languages have community-contributed libraries that provide these
tools out-of-the-box. For instance, Python’s <a href="LINK">scipy</a>
offers <a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.linregress.html">linregress</a>
for performing linear regression.</p>

<p>That said, these tools rely on mathematics that is <em>opaque</em> to many software
developers. Even if you don’t need to know how they work to use them, you need
some knowledge of <em>what they do</em> and <em>where they are most appropriate</em>.
Statistical tests in particular often have <em>strong preconditions</em> for use:</p>

<p><blockquote><p>Each of the two populations being compared should follow a normal distribution.</p><footer><strong>Wikipedia</strong> <cite><a href='http://en.wikipedia.org/wiki/Student%27s_t-test'>Student’s T-test</a></cite></footer></blockquote></p>

<p>Even if you pick the right tool, there’s still <em>fear associated with losing
control</em>. These tools are not hammers and screwdrivers but magic
wands, and <a href="http://www.flickr.com/photos/wishingline/7162517642/">we are terrible magicians</a>.</p>

<h3 id="a-word-on-exploratory-analysis">A Word On Exploratory Analysis</h3>

<p>I mentioned that this post would demonstrate <em>exploratory analysis</em>. This is
a mode of analysis where you explore your data, play around with it a bit,
grab some low-hanging analytical fruit. You don’t necessarily need higher
mathematics. Regular counts and averages will do. You’re not looking for
ironclad proof, but rather for <em>suggestions</em>.</p>

<p><blockquote><p>What does this data suggest?</p></blockquote></p>

<p>This is an important question. Put this way, <em>there is no “right” or “wrong”
way to analyze your data</em>. UNIX tools fit in nicely here, because you can
piece them together and pretty quickly get some useful insights. Better yet,
since you understand what you just did, you can explain it to someone else.
Analysis becomes a <em>demystified</em> and <em>shareable</em> process.</p>

<p>Exploratory analysis is also a <em>great entry point</em> to deeper and more directed
analysis. As you work with the data, you ask more complicated questions. Eventually these
questions exceed the sophistication of your tools, so you look for better
tools. You might not deeply understand the better tools, but at least you’ve
worked with the data a bit. You can <em>perform basic sanity checks</em> when these
better tools turn up results you don’t expect.</p>

<h2 id="the-data">The Data</h2>

<p>I took my paper recovery journal logs:</p>

<p><img src="https://lh6.googleusercontent.com/-TDKFRsDfutE/UHNEPJReCOI/AAAAAAAAABU/q0sWUwRbPoE/s640/IMG<em>20121005</em>171146_426.jpg" title="A page from my journal" ></p>

<p>and manually converted them to handy CSV files:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>date,relaxation,exercise,diet,supplements
</span><span class='line'>…
</span><span class='line'>2012-03-12,0,0,1,1
</span><span class='line'>2012-03-13,1,0,1,1
</span><span class='line'>2012-03-14,1,0,0,1
</span><span class='line'>2012-03-15,1,1,1,1
</span><span class='line'>2012-03-16,1,1,1,1
</span><span class='line'>2012-03-17,1,1,0,1
</span><span class='line'>2012-03-18,0,1,0,1
</span><span class='line'>…</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Where did all those different treatments go? I didn’t end up using most of
them. Making nine parallel habit changes is difficult, so I rapidly converged
on a subset of four:</p>

<ul>
  <li>relaxation breathing;</li>
  <li>daily exercise;</li>
  <li>dietary modifications; and</li>
  <li>vitamin supplements.</li>
</ul>

<p>Why manual input? There wasn’t enough data to make
<a href="http://code.google.com/p/tesseract-ocr/">OCR</a>
worthwhile:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd recovery-journal
</span><span class='line'>$ wc -l * | grep total
</span><span class='line'>      41 exercise-record
</span><span class='line'>      46 food-diary
</span><span class='line'>       8 panic-log
</span><span class='line'>      46 weekly-practice-record
</span><span class='line'>     141 total</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can view and download the raw data files
<a href="https://github.com/candu/quantified-savagery-files/tree/master/Panic/recovery-journal">here</a>.</p>

<h2 id="common-operations">Common Operations</h2>

<p>These operations appear several times in the UNIX one-liners below, so let’s go over
them quickly.</p>

<p>To lop off the CSV column name header:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tail -n+2</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To extract field <span>$ n $</span> from a CSV file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cut -d’,’ -f$n</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To tabulate counts in descending order:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sort | uniq -c | sort -rn</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To sum a series of numbers:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>awk ‘{sum+=$1} END {print sum}’</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To get the day before <code>$ds</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ts=$(date -j -f “%Y-%m-%d” $ds “+%s”); tsprev=$(echo “$ts - 86400” | bc); dsprev=$(date -j -f “%s” $tsprev “+%Y-%m-%d”);</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="and-now-the-main-show">And Now, The Main Show</h2>

<p>Let’s start by looking at my weekly practice record:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ for a in [01] 1; do for b in [01] 1; do for c in [01] 1; do for d in [01] 1; do count=$(grep -E “,$a,$b,$c,$d$” weekly-practice-record | wc -l); echo $a $b $c $d $count; done; done; done; done | tr ‘ ‘ ‘\t’
</span><span class='line'>[01]    [01]    [01]    [01]    45
</span><span class='line'>[01]    [01]    [01]    1       43
</span><span class='line'>[01]    [01]    1       [01]    22
</span><span class='line'>[01]    [01]    1       1       21
</span><span class='line'>[01]    1       [01]    [01]    32
</span><span class='line'>[01]    1       [01]    1       31
</span><span class='line'>[01]    1       1       [01]    16
</span><span class='line'>[01]    1       1       1       16
</span><span class='line'>1       [01]    [01]    [01]    36
</span><span class='line'>1       [01]    [01]    1       34
</span><span class='line'>1       [01]    1       [01]    19
</span><span class='line'>1       [01]    1       1       18
</span><span class='line'>1       1       [01]    [01]    26
</span><span class='line'>1       1       [01]    1       25
</span><span class='line'>1       1       1       [01]    14
</span><span class='line'>1       1       1       1       14</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I tracked myself for 45 days. During that time, I followed all four treatments
on 14 days. In order from most to least regular:</p>

<ul>
  <li>vitamin supplements (43 days);</li>
  <li>relaxation breathing (36 days);</li>
  <li>daily exercise (32 days);</li>
  <li>dietary modifications (22 days).</li>
</ul>

<p>I followed both the exercise and diet treatments for only 16 of 45 days! Right away, I
have a question for further inquiry:</p>

<p><blockquote><p>What was so hard about those two treatments?</p></blockquote></p>

<h3 id="exercise">Exercise</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tail -n+2 exercise-record | cut -d’,’ -f2 | sort | uniq -c | sort -rn | head -5
</span><span class='line'>  11 16:00
</span><span class='line'>   8 20:00
</span><span class='line'>   3 15:00
</span><span class='line'>   3 14:00
</span><span class='line'>   3 12:00</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>My most common exercise times were 4pm and 8pm. What was I doing at those times?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ grep 16:00 exercise-record | cut -d’,’ -f3 | sort | uniq -c | sort -rn | head -1
</span><span class='line'>   9 conditioning
</span><span class='line'>$ grep 20:00 exercise-record | cut -d’,’ -f3 | sort | uniq -c | sort -rn | head -1
</span><span class='line'>   6 soccer</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Aha! 4pm was my scheduled gym time at work, and 8pm was when I went for
<a href="http://soccerfours.com/">weekly pickup soccer</a>. Both were regularly scheduled activities.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ grep -E “(00|01|02|03|04|05|06|07|08|09|10|11):00” exercise-record | wc -l
</span><span class='line'>       7
</span><span class='line'>$ grep -E “(12|13|14|15|16|17|18|19|20|21|22|23):00” exercise-record | wc -l
</span><span class='line'>       33</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I rarely exercise in the morning, which might be okay: physical performance is
<a href="http://online.wsj.com/article/SB10000872396390444180004578018294057070544.html">higher in the afternoon</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tail -n+2 exercise-record | cut -d’,’ -f3 | sort | uniq -c | sort -rn
</span><span class='line'>  15 conditioning
</span><span class='line'>   7 soccer
</span><span class='line'>   6 walking
</span><span class='line'>   6 cycling
</span><span class='line'>   2 running
</span><span class='line'>   2 dancing
</span><span class='line'>   1 swimming
</span><span class='line'>   1 longboarding</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It’s not surprising to see gym conditioning sets and soccer as my top
activities, but walking and cycling aren’t far behind.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tail -n+2 exercise-record | cut -d’,’ -f4 | sort | uniq -c | sort -rn
</span><span class='line'>  20 30
</span><span class='line'>  11 60
</span><span class='line'>   4 45
</span><span class='line'>   2 40
</span><span class='line'>   2 240
</span><span class='line'>   1 120</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I most commonly exercised for 30-60 minutes, with infrequent longer blocks
of activity. What was I doing in those longer blocks?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ grep -E “,(120|240)$” exercise-record 
</span><span class='line'>2012-01-27,20:00,dancing,120
</span><span class='line'>2012-01-29,10:00,walking,240
</span><span class='line'>2012-02-11,12:00,walking,240</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When else was I dancing?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ grep dancing exercise-record
</span><span class='line'>2012-01-27,20:00,dancing,120
</span><span class='line'>2012-02-03,21:00,dancing,30</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Looking at my calendar, these blocks are easily identified:</p>

<p><img src="https://lh6.googleusercontent.com/-BMXU2Ek3Ng0/UHNJnPz-bqI/AAAAAAAAABw/3vSmmAKQzQo/s800/Screen%2520Shot%25202012-10-08%2520at%25205.45.17%2520PM.jpg" title="Jan 27, 2012" >
<img src="https://lh4.googleusercontent.com/-EWShEmAoYPc/UHNJnuc6eGI/AAAAAAAAAB4/nWSI-zqtp_U/s800/Screen%2520Shot%25202012-10-08%2520at%25205.45.37%2520PM.jpg" title="Feb 03, 2012" ></p>

<p>Having fun is great for my health!</p>

<h3 id="diet">Diet</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ for i in $(seq 2 5); do count=$(cut -d’,’ -f$i food-diary | awk ‘{ sum+=$1} END {print sum}’); name=$(head -1 food-diary | cut -d’,’ -f$i); printf “%12s\t%s\n” $name $count; done
</span><span class='line'>    caffeine    6
</span><span class='line'>      sweets    48
</span><span class='line'>     alcohol    140
</span><span class='line'> supplements    42</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I nearly eliminated caffeine during this period! By the time I started keeping the log,
I’d already started to reduce my consumption. On average, I had just over one sweet per day.
More troubling is alcohol, with an average of 3.1 drinks/day. Let’s take a closer look
at my drinking patterns.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tail -n+2 food-diary | cut -d’,’ -f4 | sort | uniq -c | sort -rn
</span><span class='line'>  12 4
</span><span class='line'>   9 2
</span><span class='line'>   7 1
</span><span class='line'>   6 5
</span><span class='line'>   3 3
</span><span class='line'>   2 8
</span><span class='line'>   2 6
</span><span class='line'>   2 0
</span><span class='line'>   2</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>My most common daily drinking amounts were 1, 2, and 4 drinks per day. It was
very rare for me to go a day without drinking any alcohol. More alarmingly,
<a href="http://en.wikipedia.org/wiki/Binge_drinking#Definition">binge drinking</a> counts for <em>over 40% of my alcohol consumption!</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tail -n+2 food-diary | while read line; do weekday=$(date -j -f “%Y-%m-%d” $(echo $line | cut -d’,’ -f1) “+%a”); alcohol=$(echo $line | cut -d’,’ -f4); echo $weekday $alcohol; done &gt; drinking.log
</span><span class='line'>$ for weekday in Mon Tue Wed Thu Fri Sat Sun; do count=$(grep $weekday drinking.log | cut -d’ ‘ -f2 | awk ‘{ sum+=$1} END {print sum}’); echo $count $weekday; done | sort -rn
</span><span class='line'>28 Wed
</span><span class='line'>27 Sat
</span><span class='line'>23 Mon
</span><span class='line'>20 Sun
</span><span class='line'>19 Fri
</span><span class='line'>15 Tue
</span><span class='line'>8 Thu</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I drank most on Wednesdays and Saturdays; Mondays were also major drinking days,
which is surprising! By contrast, I drank much less than average on Thursdays.
When I narrow in on binge drinking, the pattern shifts slightly:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ grep -E “(5|6|7|8)$” drinking.log | cut -d’ ‘ -f1 | sort | uniq -c | sort -rn
</span><span class='line'>   4 Sat
</span><span class='line'>   3 Sun
</span><span class='line'>   2 Wed
</span><span class='line'>   1 Fri</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Wednesday is still an offender, but the weekends are clear culprits. <em>80% of my
binge drinking days fell on weekends.</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tail -n+2 food-diary | cut -d’,’ -f1,4 | grep -E “(5|6|7|8)$” | while read line; do ds=$(echo $line | cut -d’,’ -f1); ts=$(date -j -f “%Y-%m-%d” $ds “+%s”); ts_next=$(echo “$ts + 86400” | bc); ds_next=$(date -j -f “%s” $ts_next “+%Y-%m-%d”); echo $line $(grep $ds_next food-diary | cut -d’,’ -f1,4); done
</span><span class='line'>2012-01-21,5 2012-01-22,5
</span><span class='line'>2012-01-22,5 2012-01-23,1
</span><span class='line'>2012-01-28,8 2012-01-29,2
</span><span class='line'>2012-02-01,6 2012-02-02,0
</span><span class='line'>2012-02-04,5 2012-02-05,3
</span><span class='line'>2012-02-10,6 2012-02-11,4
</span><span class='line'>2012-02-12,5 2012-02-13,3
</span><span class='line'>2012-03-14,8 2012-03-15,0
</span><span class='line'>2012-03-17,5 2012-03-18,5
</span><span class='line'>2012-03-18,5 2012-03-19,4</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Among days where I had 5 or more drinks, I had an average of 2.7 drinks the next day.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tail -n+2 food-diary | cut -d’,’ -f1,4 | grep -E “(0|1)$” | while read line; do ds=$(echo $line | cut -d’,’ -f1); ts=$(date -j -f “%Y-%m-%d” $ds “+%s”); tsprev=$(echo “$ts - 86400” | bc); dsprev=$(date -j -f “%s” $tsprev “+%Y-%m-%d”); echo $(grep $dsprev food-diary | cut -d’,’ -f1,4) $line; done
</span><span class='line'>2012-01-22,5 2012-01-23,1
</span><span class='line'>2012-01-23,1 2012-01-24,1
</span><span class='line'>2012-01-30,4 2012-01-31,1
</span><span class='line'>2012-02-01,6 2012-02-02,0
</span><span class='line'>2012-02-05,3 2012-02-06,1
</span><span class='line'>2012-02-06,1 2012-02-07,1
</span><span class='line'>2012-02-08,4 2012-02-09,1
</span><span class='line'>2012-03-14,8 2012-03-15,0
</span><span class='line'>2012-03-15,0 2012-03-16,1</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Among days where I had fewer than 2 drinks, I had consumed an average of 3.6 drinks the
previous day. This suggests a <em>see-saw pattern</em>: I would drink too much one day,
back off the next, and repeat.</p>

<h3 id="panic">Panic</h3>

<p>All of this skirts the real question:</p>

<p><blockquote><p>What caused me to have panic attacks?</p></blockquote></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ for i in $(seq 2 4); do head -1 food-diary | cut -d’,’ -f$i; tail -n+2 panic-log | cut -d’,’ -f1 | while read ds; do ts=$(date -j -f “%Y-%m-%d” $ds “+%s”); tsprev=$(echo “$ts - 86400” | bc); dsprev=$(date -j -f “%s” $tsprev “+%Y-%m-%d”); echo $(grep $dsprev food-diary | cut -d’,’ -f1,2) $(grep $ds food-diary | cut -d’,’ -f1,$i) $ds; done; done
</span><span class='line'>caffeine
</span><span class='line'>2012-01-28,0 2012-01-29,0 2012-01-29
</span><span class='line'>2012-01-31,0 2012-02-01,0 2012-02-01
</span><span class='line'>2012-02-03,0 2012-02-04,0 2012-02-04
</span><span class='line'>2012-02-07,0 2012-02-08,1 2012-02-08
</span><span class='line'>2012-02-12,0 2012-02-13,0 2012-02-13
</span><span class='line'>2012-02-29
</span><span class='line'>2012-03-12,0 2012-03-13,1 2012-03-13
</span><span class='line'>sweets
</span><span class='line'>2012-01-28,0 2012-01-29,3 2012-01-29
</span><span class='line'>2012-01-31,0 2012-02-01,1 2012-02-01
</span><span class='line'>2012-02-03,0 2012-02-04,2 2012-02-04
</span><span class='line'>2012-02-07,0 2012-02-08,1 2012-02-08
</span><span class='line'>2012-02-12,0 2012-02-13,1 2012-02-13
</span><span class='line'>2012-02-29
</span><span class='line'>2012-03-12,0 2012-03-13,1 2012-03-13
</span><span class='line'>alcohol
</span><span class='line'>2012-01-28,0 2012-01-29,2 2012-01-29
</span><span class='line'>2012-01-31,0 2012-02-01,6 2012-02-01
</span><span class='line'>2012-02-03,0 2012-02-04,5 2012-02-04
</span><span class='line'>2012-02-07,0 2012-02-08,4 2012-02-08
</span><span class='line'>2012-02-12,0 2012-02-13,3 2012-02-13
</span><span class='line'>2012-02-29
</span><span class='line'>2012-03-12,0 2012-03-13,2 2012-03-13</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I had no data for <code>2012-02-28</code>. Other than that, on days where I had reported
panic attacks, my <em>current- and previous-day consumption patterns</em> were:</p>

<ul>
  <li><strong>alcohol</strong>: 3.7 drinks that day, 3.8 the previous day (overall average is 3.1);</li>
  <li><strong>sweets</strong>: 1.5 sweets that day, 1.0 the previous day (overall average is 1.0);</li>
  <li><strong>caffeine</strong>: 0.3 caffeinated beverages that day, 0.0 the previous day (overall average is 0.1).</li>
</ul>

<p>This suggests that <em>reducing alcohol and sweets consumption does help</em>. The data
is less clear on caffeine; as previously mentioned, I had mostly cut out
caffeine by the time I started tracking.</p>

<h2 id="up-next">Up Next</h2>

<p>In the next post, I’ll run some of the statistical tests and transformations
mentioned previously on this same data. I’ll also compare this dataset with
another dataset gathered through
<a href="https://github.com/candu/qs-counters">qs-counters</a>, a simple lightweight tracking utility I built to
reduce friction in the recording process.</p>
]]></content>
  </entry>
  
</feed>
